PROJECT(cos_c_sdk)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)  

set(CMAKE_VERSION 1.0.1)

# default C / CXX flags
set(CMAKE_C_FLAGS " -g -ggdb -O0 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")
set(CMAKE_CXX_FLAGS " -g -ggdb -O0 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")

set(CMAKE_C_FLAGS_DEBUG " -g -ggdb -O0 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")
set(CMAKE_CXX_FLAGS_DEBUG " -g -ggdb -O0 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")

set(CMAKE_C_FLAGS_RELEASE " -O3 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")
set(CMAKE_CXX_FLAGS_RELEASE " -O3 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")

set(CMAKE_C_FLAGS_MINSIZEREF " -Os -Wall  -fpic -fPIC -D_LARGEFILE64_SOURCE")
set(CMAKE_CXX_FLAGS_MINSIZEREF " -Os -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")

set(CMAKE_C_FLAGS_RELWITHDEBINFO " -O2 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO " -O2 -Wall -fpic -fPIC -D_LARGEFILE64_SOURCE")

set(CMAKE_C_FLAGS_COVERAGE " ${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
set(CMAKE_CXX_FLAGS_COVERAGE " ${CMAKE_C_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")

set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_BUILD_TYPE}/lib)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_BUILD_TYPE}/bin)
set(CMAKE_C_OUTPUT_EXTENSION_REPLACE 1)
set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE 1)

# FIND_PROGRAM(APR_CONFIG_BIN NAMES apr-config apr-1-config PATHS /usr/bin /usr/local/bin /usr/local/apr/bin/)
# FIND_PROGRAM(APU_CONFIG_BIN NAMES apu-config apu-1-config PATHS /usr/bin /usr/local/bin /usr/local/apr/bin/)
# 
# IF (APR_CONFIG_BIN)
#     EXECUTE_PROCESS(
#         COMMAND ${APR_CONFIG_BIN} --includedir
#         OUTPUT_VARIABLE APR_INCLUDE_DIR
#         OUTPUT_STRIP_TRAILING_WHITESPACE
#     )
#     EXECUTE_PROCESS(
#         COMMAND ${APR_CONFIG_BIN} --cflags
#         OUTPUT_VARIABLE APR_C_FLAGS
#         OUTPUT_STRIP_TRAILING_WHITESPACE
#     )
#     EXECUTE_PROCESS(
#         COMMAND ${APR_CONFIG_BIN} --link-ld
#         OUTPUT_VARIABLE APR_LIBRARIES
#         OUTPUT_STRIP_TRAILING_WHITESPACE
#     )
# ELSE()
#     MESSAGE(FATAL_ERROR "Could not find apr-config/apr-1-config")
# ENDIF()
# 
# IF (APU_CONFIG_BIN)
#     EXECUTE_PROCESS(
#         COMMAND ${APU_CONFIG_BIN} --includedir
#         OUTPUT_VARIABLE APR_UTIL_INCLUDE_DIR
#         OUTPUT_STRIP_TRAILING_WHITESPACE
#     )
#     EXECUTE_PROCESS(
#         COMMAND ${APU_CONFIG_BIN} --cflags
#         OUTPUT_VARIABLE APU_C_FLAGS
#         OUTPUT_STRIP_TRAILING_WHITESPACE
#     )
#     EXECUTE_PROCESS(
#         COMMAND ${APU_CONFIG_BIN} --link-ld
#         OUTPUT_VARIABLE APU_LIBRARIES
#         OUTPUT_STRIP_TRAILING_WHITESPACE
#     )
# ELSE()
#     MESSAGE(FATAL_ERROR "Could not find apu-config/apu-1-config")
# ENDIF()
# 
# #curl-config
# FIND_PROGRAM(CURL_CONFIG_BIN NAMES curl-config)
#   
# IF (CURL_CONFIG_BIN)
#     EXECUTE_PROCESS(
#         COMMAND ${CURL_CONFIG_BIN} --libs
#         OUTPUT_VARIABLE CURL_LIBRARIES
#         OUTPUT_STRIP_TRAILING_WHITESPACE
#         )
# ELSE()
#     MESSAGE(FATAL_ERROR "Could not find curl-config")
# ENDIF()
  
# Compile and link lib_cos_c_sdk
include_directories(${APR_INCLUDE_DIR})
include_directories(${APR_UTIL_INCLUDE_DIR})
include_directories(${MINIXML_INCLUDE_DIR})
include_directories(${CURL_INCLUDE_DIR})

aux_source_directory(cos_c_sdk SRC_LIST)

# add_library(${CMAKE_PROJECT_NAME} SHARED ${SRC_LIST})
add_library(${CMAKE_PROJECT_NAME}_static STATIC ${SRC_LIST})

# set_target_properties(${CMAKE_PROJECT_NAME} PROPERTIES VERSION ${CMAKE_VERSION}  SOVERSION ${CMAKE_VERSION})

# INSTALL(TARGETS ${CMAKE_PROJECT_NAME} LIBRARY DESTINATION lib)

INSTALL(TARGETS ${CMAKE_PROJECT_NAME}_static ARCHIVE DESTINATION lib)

INSTALL(FILES
  cos_c_sdk/cos_buf.h
  cos_c_sdk/cos_sys_define.h
  cos_c_sdk/cos_fstack.h
  cos_c_sdk/cos_http_io.h
  cos_c_sdk/cos_list.h
  cos_c_sdk/cos_log.h
  cos_c_sdk/cos_status.h
  cos_c_sdk/cos_string.h
  cos_c_sdk/cos_transport.h
  cos_c_sdk/cos_sys_util.h
  cos_c_sdk/cos_crc64.h
  cos_c_sdk/cos_api.h
  cos_c_sdk/cos_auth.h
  cos_c_sdk/cos_define.h
  cos_c_sdk/cos_resumable.h
  cos_c_sdk/cos_utility.h
  cos_c_sdk/cos_xml.h
  DESTINATION include/cos_c_sdk)

# add_subdirectory(cos_c_sdk_test)
