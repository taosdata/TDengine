{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TDengine Cases Docs","text":"<p>You can switch branches on this page. For more information about how to run cases, see README.</p> <p>Case list can be found on the top bar case list docs.</p> <p>For more information about how to write new case docstring format, see Test Case Specification</p>"},{"location":"case_list_docs/DataCompression/","title":"30-DataCompression","text":""},{"location":"case_list_docs/DataCompression/#12-DataCompression.test_compress_alter_option.TestCompressAlterOption.test_compress_alter_option","title":"","text":"Summary: Compress: alter options                    Description: 1. Create a table containing data types including BOOL, TINYINT, SMALLINT, INT, BIGINT, FLOAT, DOUBLE, and BINARY; 2. insert records and query the results 3. Modify compression settings (compression option, level, and encoding method), including disabling compression entirely, then query the results 4. Execute FLUSH DATABASE and restart the taosdservice 5. Insert new data again and continue querying the results Path:                        cases/12-DataCompression/test_compress_alter_option.py"},{"location":"case_list_docs/DataCompression/#12-DataCompression.test_compress_alter_table.TestCompressBasic.test_compress_basic","title":"","text":"Summary: Compress: alter table                    Description: 1. Insert data 2. Modify table structure 3. Execute FLUSH DATABASE 4. Insert data again and query the results Path:                        cases/12-DataCompression/test_compress_alter_table.py"},{"location":"case_list_docs/DataDeletion/","title":"09-DataDeletion","text":""},{"location":"case_list_docs/DataDeletion/#11-DataDeletion.test_delete.TestInsertDelete.test_insert_delete","title":"","text":"Summary: Delete data                    Description: 1. Deleting data from normal tables 2. Deleting data from super tables 3. Deleting data from child tables Path:                        cases/11-DataDeletion/test_delete.py"},{"location":"case_list_docs/DataSubscription/","title":"12-DataSubscription","text":""},{"location":"case_list_docs/DataTypes/","title":"01-DataTypes","text":""},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_bigint.TestDatatypeBigInt.test_datatype_bigint","title":"","text":"Summary: DataTypes: bigint                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_bigint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_blob.TestDatatypeBlob.test_datatype_blob","title":"","text":"Summary: DataTypes: blob                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_blob.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_bool.TestDatatypeBool.test_datatype_bool","title":"","text":"Summary: DataTypes: bool                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_bool.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_decimal.TestDatatypeDecimal.test_datatype_decimal","title":"","text":"Summary: DataTypes: decimal                    Description: test decimal types filtering with tag conditions crash fix Path:                        cases/01-DataTypes/test_datatype_decimal.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_double.TestDatatypeDouble.test_datatype_double","title":"","text":"Summary: DataTypes: double                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_double.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_float.TestDatatypeFloat.test_datatype_float","title":"","text":"Summary: DataTypes: float                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_float.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_geometry.TestDatatypeGeometry.test_datatype_geometry","title":"","text":"Summary: DataTypes: geometry                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_geometry.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_int.TestDatatypeInt.test_datatype_int","title":"","text":"Summary: DataTypes: int                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_int.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_json.TestDatatypeJson.test_datatype_json","title":"","text":"Summary: DataTypes: json                    Description: 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_json.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_nchar1.TestDatatypeNchar.test_datatype_nchar","title":"","text":"Summary: DataTypes: nchar                    Description: 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_nchar1.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_nchar2.TestNChar.test_nchar","title":"","text":"Summary: DataTypes: nchar (Chinese)                    Description: 1. Create table 2. Insert data 3. Query data Path:                        cases/01-DataTypes/test_datatype_nchar2.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_smallint.TestDatatypeSmallint.test_datatype_smallint","title":"","text":"Summary: DataTypes: smallint                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_smallint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_timestamp.TestDatatypeTimestamp.test_datatype_timestamp","title":"","text":"Summary: DataTypes: timestamp                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_timestamp.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_tinyint.TestDatatypeTinyint.test_datatype_tinyint","title":"","text":"Summary: DataTypes: tinyint                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_tinyint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_uint.TestDatatypeUint.test_datatype_uint","title":"","text":"Summary: DataTypes: unsigned int                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_uint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_unsign.TestDatatypeUnsigned.test_datatype_unsigned","title":"","text":"Summary: DataTypes: unsigned numeric                    Description: 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_unsign.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_varbinary.TestDatatypeVarbinary.test_datatype_varbinary","title":"","text":"Summary: DataTypes: varbinary                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_varbinary.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_varchar.TestDatatypeVarchar.test_datatype_varchar","title":"","text":"Summary: DataTypes: varchar                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_varchar.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_null_column.TestNullColumn.test_null_column","title":"","text":"Summary: NULL: column                    Description: 1. Create table 2. Insert data with NULL 3. Query data Path:                        cases/01-DataTypes/test_null_column.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_null_tag.TestNullTag.test_null_tag","title":"","text":"Summary: NULL: tag                    Description: 1. Create table with NULL tags 2. Select tags 3. Alter tags Path:                        cases/01-DataTypes/test_null_tag.py"},{"location":"case_list_docs/EscapeCharacters/","title":"16-EscapeCharacters","text":""},{"location":"case_list_docs/EscapeCharacters/#16-EscapeCharacters.test_binary_escape_character.TestBinaryEscapeCharacter.test_binary_escape_character","title":"","text":"Summary: binary escape character                    Description: 1. Path:                        cases/16-EscapeCharacters/test_binary_escape_character.py"},{"location":"case_list_docs/JSONDataType/","title":"15-JSONDataType","text":""},{"location":"case_list_docs/JoinQueries/","title":"29-JoinQueries","text":""},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join.TestJoin.test_join","title":"","text":"Summary: Join Test                    Description: 1. Path:                        cases/29-JoinQueries/test_join.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join2.TestJoin.test_join","title":"","text":"Summary: Join Test                    Description: 1. Path:                        cases/29-JoinQueries/test_join2.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_full.TestJoinFull.test_join_full","title":"","text":"Summary: Join Test Full                    Description: 1. test full_join 2. test inner_join 3. test join_boundary 4. test join_explain 5. test join_nested 6. test join_scalar1 7. test join_scalar2 8. test join_timeline 9. test left_anti_join 10. test left_asof_join 11. test left_join 12. test left_semi_join 13. test left_win_join 14. test right_anti_join 15. test right_asof_join 16. test right_join 17. test right_semi_join 18. test right_win_join 19. restart and test again Path:                        cases/29-JoinQueries/test_join_full.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_interval.TestJoinInterval.test_join_interval","title":"","text":"Summary: Join Test                    Description: 1. Path:                        cases/29-JoinQueries/test_join_interval.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_manyblocks.TestJoinManyBlocks.test_join_manyblocks","title":"","text":"Summary: Join Test Manyblocks                    Description: 1. Path:                        cases/29-JoinQueries/test_join_manyblocks.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_multitables.TestJoinMultitables.test_join_multitables","title":"","text":"Summary: Join Test Multitables                    Description: 1. Path:                        cases/29-JoinQueries/test_join_multitables.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_multivnode.TestJoinMultivnode.test_join_multivnode","title":"","text":"Summary: Join Test Multivnode                    Description: 1. Path:                        cases/29-JoinQueries/test_join_multivnode.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_ns_db.TestJoinNsDb.test_join_ns_db","title":"","text":"Summary: Join Test                    Description: 1. Path:                        cases/29-JoinQueries/test_join_ns_db.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_order.TestJoinOrder.test_join_order","title":"","text":"Summary: Join Test                    Description: 1. Path:                        cases/29-JoinQueries/test_join_order.py"},{"location":"case_list_docs/JoinQueries/#29-JoinQueries.test_join_pk.TestJoinPk.test_join_pk","title":"","text":"Summary: Join Test                    Description: 1. Path:                        cases/29-JoinQueries/test_join_pk.py"},{"location":"case_list_docs/Metadata/","title":"20-Metadata","text":""},{"location":"case_list_docs/Metadata/#20-Metadata.test_keep_time_offset.TestKeepTimeOffset.test_create_db","title":"","text":"Summary: create db using keep_time_offset                    Description: 1. create db using keep_time_offset 2. query keep_time_offset 3. alter keep_time_offset 4. query keep_time_offset Path:                        cases/20-Metadata/test_keep_time_offset.py"},{"location":"case_list_docs/Metadata/#20-Metadata.test_keep_time_offset.TestKeepTimeOffset.test_check_old_syntax","title":"","text":"Summary: alter keeptimeoffset using old syntax                    Description: 1. alter dnode 1 'keeptimeoffset 10'; return error Path:                        cases/20-Metadata/test_keep_time_offset.py"},{"location":"case_list_docs/Metadata/#20-Metadata.test_metrics_idx.TestTableCount.test_table_count","title":"","text":"Summary: Table Count                    Description: 1. Path:                        cases/20-Metadata/test_metrics_idx.py"},{"location":"case_list_docs/Metadata/#20-Metadata.test_show_db_table_kind.TestShowDbTableKind.test_show_db_table_kind","title":"","text":"Summary: Sys Tb name                    Description: 1. Path:                        cases/20-Metadata/test_show_db_table_kind.py"},{"location":"case_list_docs/Metadata/#20-Metadata.test_sys_tbname.TestSysTbname.test_func_sys_tbname","title":"","text":"Summary: Sys Tb name                    Description: 1. Path:                        cases/20-Metadata/test_sys_tbname.py"},{"location":"case_list_docs/Metadata/#20-Metadata.test_table_count.TestTableCount.test_table_count","title":"","text":"Summary: Table Count                    Description: 1. Path:                        cases/20-Metadata/test_table_count.py"},{"location":"case_list_docs/NameLimits/","title":"17-NameLimits","text":""},{"location":"case_list_docs/NameLimits/#17-NameLimits.test_dbtbname_validate.TestDbTbNameValidate.test_dbtbname_validate","title":"","text":"Summary: db tb name Validate                    Description: 1. Path:                        cases/17-NameLimits/test_dbtbname_validate.py"},{"location":"case_list_docs/Operators/","title":"14-Operators","text":""},{"location":"case_list_docs/PerformanceData/","title":"21-PerformanceData","text":""},{"location":"case_list_docs/Permissions/","title":"24-Permissions","text":""},{"location":"case_list_docs/ReservedKeywords/","title":"18-ReservedKeywords","text":""},{"location":"case_list_docs/Show/","title":"22-Show","text":""},{"location":"case_list_docs/Show/#22-Show.test_show_alive.TestShowAlive.test_show_alive","title":"","text":"Summary: Show Alive                    Description: 1. build cluster with 4 dnodes 2. execute show commands Path:                        cases/22-Show/test_show_alive.py"},{"location":"case_list_docs/Show/#22-Show.test_show_basic.TestShowBasic.test_show_basic","title":"","text":"Summary: Show Basic                    Description: 1. build cluster with 2 dnodes 2. execute show commands Path:                        cases/22-Show/test_show_basic.py"},{"location":"case_list_docs/Show/#22-Show.test_show_diskinfo.TestShowDiskInfo.test_show_disk_info","title":"","text":"Summary: Show DiskInfo\u8bed\u53e5                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u6570\u636e\u5e93\u6267\u884c Flush \u64cd\u4f5c 4. \u6267\u884c show disk_info \u8bed\u53e5 Path:                        cases/22-Show/test_show_diskinfo.py"},{"location":"case_list_docs/Show/#22-Show.test_show_table_distributed.TestShowTableDistributed.test_show_table_distributed","title":"","text":"Summary: Show Table Distributed \u8bed\u53e5                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u6570\u636e\u5e93\u6267\u884c Flush \u64cd\u4f5c 4. \u6267\u884c show table distributed \u8bed\u53e5 Path:                        cases/22-Show/test_show_table_distributed.py"},{"location":"case_list_docs/Show/#22-Show.test_show_table_distributed_null.TestShowTableDistributed.test_show_table_distributed","title":"","text":"Summary: Show Table Distributed Test                    Description: 1.Create db 2.Create supper table and sub table 4.Insert data into sub table 5.Run show table distributed command Path:                        cases/22-Show/test_show_table_distributed_null.py"},{"location":"case_list_docs/SteamProcessing/","title":"13-SteamProcessing","text":""},{"location":"case_list_docs/TSMAs/","title":"26-TSMAs","text":""},{"location":"case_list_docs/TSMAs/#26-TSMAs.test_tsma.TestTsma.test_tsma","title":"","text":"Summary: tsma                    Description: test tsma Path:                        cases/26-TSMAs/test_tsma.py"},{"location":"case_list_docs/TagIndices/","title":"08-TagIndices","text":""},{"location":"case_list_docs/Troubleshooting/","title":"27-Troubleshooting","text":""},{"location":"case_list_docs/UDFs/","title":"25-UDFs","text":""},{"location":"case_list_docs/UDFs/#25-UDFs.test_udf_c.TestUdfC.test_udf_c","title":"","text":"Summary: Udf                    Description: 1.- Path:                        cases/25-UDFs/test_udf_c.py"},{"location":"case_list_docs/UDFs/#25-UDFs.test_udf_py.TestUdf.test_udf","title":"","text":"Summary: Udf                    Description: 1.- Path:                        cases/25-UDFs/test_udf_py.py"},{"location":"case_list_docs/UDFs/#25-UDFs.test_udf_with_const.TestUdfPy.test_udf_py","title":"","text":"Summary: Udf Py                    Description: 1.- Path:                        cases/25-UDFs/test_udf_with_const.py"},{"location":"case_list_docs/Users/","title":"23-Users","text":""},{"location":"case_list_docs/Users/#23-Users.test_user_basic.TestUserBasic.test_user_basic","title":"","text":"Summary: user basic                    Description: 1. - Path:                        cases/23-Users/test_user_basic.py"},{"location":"case_list_docs/Users/#23-Users.test_user_crypted_pass.TestUserPassword.test_user_password","title":"","text":"Summary: user crypted password                    Description: 1. - create encrypt_key and test to create user and login with crypted password Path:                        cases/23-Users/test_user_crypted_pass.py"},{"location":"case_list_docs/Users/#23-Users.test_user_password.TestUserPassword.test_user_password","title":"","text":"Summary: user password                    Description: 1. - Path:                        cases/23-Users/test_user_password.py"},{"location":"case_list_docs/Users/#23-Users.test_user_privilege_create_db.TestUserPrivilegeCreateDb.test_user_privilege_create_db","title":"","text":"Summary: user privilege create db                    Description: 1. - Path:                        cases/23-Users/test_user_privilege_create_db.py"},{"location":"case_list_docs/Users/#23-Users.test_user_privilege_db.TestUserPrivilegeDb.test_user_privilege_db","title":"","text":"Summary: user privilege db                    Description: 1. - Path:                        cases/23-Users/test_user_privilege_db.py"},{"location":"case_list_docs/Users/#23-Users.test_user_privilege_sysinfo.TestUserPrivilegeSysinfo.test_user_privilege_sysinfo","title":"","text":"Summary: user privilege sysinfo                    Description: 1. - Path:                        cases/23-Users/test_user_privilege_sysinfo.py"},{"location":"case_list_docs/Users/#23-Users.test_user_privilege_table.TestUserPrivilegeTable.test_user_privilege_table","title":"","text":"Summary: user privilege table                    Description: 1. - Path:                        cases/23-Users/test_user_privilege_table.py"},{"location":"case_list_docs/Users/#23-Users.test_user_privilege_topic.TestUserPrivilegeTopic.test_user_privilege_topic","title":"","text":"Summary: user privilege topic                    Description: 1. - Path:                        cases/23-Users/test_user_privilege_topic.py"},{"location":"case_list_docs/Users/#23-Users.test_user_whitelist.TestUserWhiteList.test_user_whitelist","title":"","text":"Summary: user whitelist                    Description: 1. - Path:                        cases/23-Users/test_user_whitelist.py"},{"location":"case_list_docs/Views/","title":"31-Views","text":""},{"location":"case_list_docs/Views/#31-Views.test_view_mgmt.TestViewMgmt.test_view_mgmt","title":"","text":"Summary: \u89c6\u56fe\u7ba1\u7406                    Description: 1. \u521b\u5efa\u4e09\u4e2a\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u6743\u9650\u6d4b\u8bd5 4. \u521b\u5efa\u3001\u5220\u9664\u6d4b\u8bd5 5. \u5199\u5165\u6d4b\u8bd5 6. \u6d41\u8ba1\u7b97\u6d4b\u8bd5\uff08\u5f85\u6d41\u8ba1\u7b97\u91cd\u6784\u540e\u518d\u8fc1\u79fb\uff09 7. Show/Desc \u6d4b\u8bd5 8. \u540c\u540d\u8868\u6d4b\u8bd5 9. \u91cd\u542f\u670d\u52a1\u7aef 10. \u91cd\u590d\u4ee5\u4e0a\u6d4b\u8bd5 11. \u4fee\u6539\u53c2\u6570 keepColumnName \u4e3a 1 12. \u91cd\u590d\u4ee5\u4e0a\u6d4b\u8bd5 Path:                        cases/31-Views/test_view_mgmt.py"},{"location":"case_list_docs/Views/#31-Views.test_view_nested_join.TestViewNestedJoin.test_view_nested_join","title":"","text":"Summary: \u5e26\u5d4c\u5957\u67e5\u8be2\u7684\u590d\u6742\u89c6\u56fe                    Description: 1. \u521b\u5efa\u666e\u901a\u8868\u3001\u5b50\u8868 2. \u521b\u5efa\u5305\u542b\u5d4c\u5957\u67e5\u8be2\u7684\u590d\u6742\u89c6\u56fe 3. \u67e5\u8be2\u89c6\u56fe Path:                        cases/31-Views/test_view_nested_join.py"},{"location":"case_list_docs/VirtualTables/","title":"05-VirtualTables","text":""},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_normal_table","title":"","text":"Summary: Alter: virtual normal table                    Description: 1. add column 2. drop column 3. change column reference 4. change column type length 5. change column name Path:                        cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_child_table","title":"","text":"Summary: Alter: virtual child table                    Description: 1. change column reference 2. change tag value Path:                        cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_super_table","title":"","text":"Summary: Alter: virtual super table                    Description: 1. add column 2. drop column 3. change column type length 4. add tag 5. drop tag 6. change tag name 7. change tag length Path:                        cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_super_table_and_create_child","title":"","text":"Summary: Alter: virtual super table then create child table                    Description: 1. add column 2. drop column Path:                        cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_error_cases","title":"","text":"Summary: Alter: virtual table errors                    Description: 1. normal table 2. child table 3. super table Path:                        cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_alter_normaltable.TestVtableAuthAlterDrop.test_alter_drop_virtual_normal_table","title":"","text":"Summary: Auth: alter virtual normal table                    Description: test \"write\", \"read\", \"none\", \"all\" each auth user alter opration Path:                        cases/05-VirtualTables/test_vtable_auth_alter_normaltable.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_alter_subtable.TestVtableAuthAlterDropChild.test_alter_drop_virtual_child_table","title":"","text":"Summary: Auth: alter virtual child table                    Description: test \"write\", \"read\", \"none\", \"all\" each auth user alter opration Path:                        cases/05-VirtualTables/test_vtable_auth_alter_subtable.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_create.TestVtableAuthCreate.test_create_virtual_normal_table","title":"","text":"Summary: Auth: create virtual normal table                    Description: test \"write\", \"read\", \"none\", \"all\" each auth user create opration Path:                        cases/05-VirtualTables/test_vtable_auth_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_create.TestVtableAuthCreate.test_create_virtual_child_table","title":"","text":"Summary: Auth: create virtual child table                    Description: test \"write\", \"read\", \"none\", \"all\" each auth user create opration Path:                        cases/05-VirtualTables/test_vtable_auth_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_select.TestVtableAuthSelect.test_select_virtual_normal_table","title":"","text":"Summary: Auth: select virtual normal table                    Description: test \"write\", \"read\", \"none\", \"all\" each auth user select opration Path:                        cases/05-VirtualTables/test_vtable_auth_select.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_select.TestVtableAuthSelect.test_select_virtual_child_table","title":"","text":"Summary: Auth: select virtual child table                    Description: test \"write\", \"read\", \"none\", \"all\" each auth user select opration Path:                        cases/05-VirtualTables/test_vtable_auth_select.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_create_virtual_super_table","title":"","text":"Summary: Create: virtual super table                    Description: test create virtual super tables Path:                        cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_create_virtual_child_table","title":"","text":"Summary: Create: virtual child table                    Description: 1.create virtual child table and don't use 'FROM' to specify the origin table 2.create virtual child table and use 'FROM' to specify the origin table Path:                        cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_create_virtual_normal_table","title":"","text":"Summary: Create: virtual normal table                    Description: test create virtual normal tables Path:                        cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_error_cases","title":"","text":"Summary: Create: virtual table errors                    Description: 1. create virtual child table using non-virtual super table 2. create child table using virtual super table 3. create virtual child table using non-exist super table 4. column definition different from referenced column 5. set data source for primary timestamp column 6. data source column does not exist 7. data source table does not exist 8. data source table has composite primary key 9. data source is tag 10. create virtual child table using from to specify some columns and do not use from for other columns 11. create virtual table using decimal Path:                        cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_child_table","title":"","text":"Summary: Drop: virtual child table                    Description: test drop virtual child tables Path:                        cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_normal_table","title":"","text":"Summary: Drop: virtual normal table                    Description: test drop virtual normal tables Path:                        cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_super_table","title":"","text":"Summary: Drop: virtual super table                    Description: test drop virtual super table Path:                        cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_not_exists","title":"","text":"Summary: Drop: virtual table errors                    Description: test drop virtual not exists Path:                        cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_insert.TestVtableInsert.test_vtable_insert","title":"","text":"Summary: Insert: virtual table                    Description: 1. Create db 2. Create supper table and sub table 3. Create virtual supper table and sub table 4. Create normal virtual table and normal table 5. Insert data into virtual super table or virtual sub table or virtual normal table, it should be return error Path:                        cases/05-VirtualTables/test_vtable_insert.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_join.TestVtableJoin.test_vtable_join","title":"","text":"Summary: Query: join                    Description: test query virtual tables join Path:                        cases/05-VirtualTables/test_vtable_join.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_meta.TestVtableMeta.test_normal_query_new","title":"","text":"Summary: Query: meta                    Description: test virtual table normal query Path:                        cases/05-VirtualTables/test_vtable_meta.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query.TestVTableQuery.test_select_virtual_normal_table","title":"","text":"Summary: Query: virtual normal table                    Description: 1. test vstable select normal table projection 2. test vstable select normal table projection filter 3. test vstable select normal table interval 4. test vstable select normal table state 5. test vstable select normal table session 6. test vstable select normal table event 7. test vstable select normal table count 8. test vstable select normal table partition 9. test vstable select normal table group 10. test vstable select chnormalild table orderby Path:                        cases/05-VirtualTables/test_vtable_query.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query.TestVTableQuery.test_select_virtual_child_table","title":"","text":"Summary: Query: virtual child table                    Description: 1. test vstable select child table projection 2. test vstable select child table projection filter 3. test vstable select child table interval 4. test vstable select child table state 5. test vstable select child table session 6. test vstable select child table event 7. test vstable select child table count 8. test vstable select child table partition 9. test vstable select child table group 10. test vstable select child table orderby Path:                        cases/05-VirtualTables/test_vtable_query.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query.TestVTableQuery.test_select_virtual_super_table","title":"","text":"Summary: Query: virtual super table                    Description: 1. test vstable select super table projection 2. test vstable select super table projection filter 3. test vstable select super table interval 4. test vstable select super table state 5. test vstable select super table session 6. test vstable select super table event 7. test vstable select super table count 8. test vstable select super table partition 9. test vstable select super table group 10. test vstable select super table orderby Path:                        cases/05-VirtualTables/test_vtable_query.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_after_alter.TestVtableQueryAfterAlter.test_virtual_stable_and_child_table","title":"","text":"Summary: Query: after alter super and child table                    Description: test virtual table select after alter stable Path:                        cases/05-VirtualTables/test_vtable_query_after_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_after_alter.TestVtableQueryAfterAlter.test_virtual_normal_table","title":"","text":"Summary: Query: after alter normal table                    Description: test virtual table select after alter normal table Path:                        cases/05-VirtualTables/test_vtable_query_after_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_after_drop_origin_table.TestVtableQueryAfterDropOriginTable.test_query_after_drop","title":"","text":"Summary: Query: after drop                    Description: test query after drop tables Path:                        cases/05-VirtualTables/test_vtable_query_after_drop_origin_table.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db.TestVtableQueryCrossDB.test_select_virtual_normal_table","title":"","text":"Summary: Query: v-ntable crossdb query                    Description: 1. test vstable select normal table cross db projection 2. test vstable select normal table cross db projection filter 3. test vstable select normal table cross db interval 4. test vstable select normal table cross db state 5. test vstable select normal table cross db session 6. test vstable select normal table cross db event 7. test vstable select normal table cross db count 8. test vstable select normal table cross db partition 9. test vstable select normal table cross db group 10. test vstable select normal table cross db orderby Path:                        cases/05-VirtualTables/test_vtable_query_cross_db.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db.TestVtableQueryCrossDB.test_select_virtual_child_table","title":"","text":"Summary: Query: v-ctable crossdb query                    Description: 1. test vstable select child table cross db projection 2. test vstable select child table cross db projection filter 3. test vstable select child table cross db interval 4. test vstable select child table cross db state 5. test vstable select child table cross db session 6. test vstable select child table cross db event 7. test vstable select child table cross db count 8. test vstable select child table cross db partition 9. test vstable select child table cross db group 10. test vstable select child table cross db orderby Path:                        cases/05-VirtualTables/test_vtable_query_cross_db.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db_stb_group.TestVtableQueryCrossDbStbGroup.test_select_virtual_super_table","title":"","text":"Summary: Query: v-stable crossdb group query                    Description: 1. test vstable select super table cross db partition 2. test vstable select super table cross db group 3. test vstable select super table cross db orderby Path:                        cases/05-VirtualTables/test_vtable_query_cross_db_stb_group.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db_stb_project.TestVtableQueryCrossDbStb.test_select_virtual_super_table","title":"","text":"Summary: Query: v-stable crossdb porject query                    Description: 1. test vstable select super table cross db projection 2. test vstable select super table cross db projection filter Path:                        cases/05-VirtualTables/test_vtable_query_cross_db_stb_project.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db_stb_window.TestVtableQueryCrossDbStbWindow.test_select_virtual_super_table","title":"","text":"Summary: Query: v-stable crossdb window query                    Description: 1. test vstable select super table cross db interval 2. test vstable select super table cross db state 3. test vstable select super table cross db session 4. test vstable select super table cross db event 5. test vstable select super table cross db count Path:                        cases/05-VirtualTables/test_vtable_query_cross_db_stb_window.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_schema_is_old.TestVTableSchemaIsOld.test_vtable_schema_is_old","title":"","text":"Summary: Query: old schema (bugfix)                    Description: schema is old when origin table's column has same prefix during virtual supertable query Path:                        cases/05-VirtualTables/test_vtable_schema_is_old.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_show_tag.TestVtableShowTag.test_vtable_show_tag","title":"","text":"Summary: Query: show tag (bugfix)                    Description: 1. Create db 2. Create supper table and sub table 3. Create virtual supper table and sub table 4. Show tag of virtual table and check the result Path:                        cases/05-VirtualTables/test_vtable_show_tag.py"},{"location":"case_list_docs/DataIngestion/Delete/","title":"03-Delete","text":""},{"location":"case_list_docs/DataIngestion/Delete/#10-DataIngestion.test_write_delete.TestWriteDelete.test_write_delete","title":"","text":"Summary: Write: delete data                    Description: 1. Insert data 2. Flush the database 3.Delete data by specific timestamp 4. Delete data by timestamp range 5. Delete data using timestamp condition comparisons 6. Restart the dnode 7. Check data integrity Path:                        cases/10-DataIngestion/test_write_delete.py"},{"location":"case_list_docs/DataIngestion/Import/","title":"02-Import","text":""},{"location":"case_list_docs/DataIngestion/Insert/","title":"01-Insert","text":""},{"location":"case_list_docs/DataIngestion/Others/","title":"05-Others","text":""},{"location":"case_list_docs/DataIngestion/Update/","title":"04-Update","text":""},{"location":"case_list_docs/DataQuerying/Distinct/","title":"13-Distinct","text":""},{"location":"case_list_docs/DataQuerying/Distinct/#20-DataQuerying.10-Distinct.test_distinct.TestDistinct.test_distinct","title":"","text":"Summary: Distinct                    Description: 1. Using on data columns and tag columns 2. Using on super tables Path:                        cases/20-DataQuerying/10-Distinct/test_distinct.py"},{"location":"case_list_docs/DataQuerying/Explain/","title":"14-Explain","text":""},{"location":"case_list_docs/DataQuerying/Explain/#20-DataQuerying.15-Explain.test_explain.TestExplain.test_explain_basic","title":"","text":"Summary: Explain                    Description: Performing EXPLAIN on queries involving various functions, windows, subqueries, and sorting operations Path:                        cases/20-DataQuerying/15-Explain/test_explain.py"},{"location":"case_list_docs/DataQuerying/Filter/","title":"02-Filter","text":""},{"location":"case_list_docs/DataQuerying/Filter/#20-DataQuerying.02-Filter.test_filter_column.TestFilterColumn.test_filter_column","title":"","text":"Summary: Column                    Description: 1. Filtering super tables and regular tables by regular data columns 2. Applying mathematical operators in combination Path:                        cases/20-DataQuerying/02-Filter/test_filter_column.py"},{"location":"case_list_docs/DataQuerying/Filter/#20-DataQuerying.02-Filter.test_filter_operator.TestFilterOperator.test_operator","title":"","text":"Summary: Operator Based                    Description: 1. Filtering with logical operators 2. Filtering with comparison operators 3. Combined with GROUP BY, ORDER BY, and LIMIT OFFSET clauses 4. Including IS NULL operations Path:                        cases/20-DataQuerying/02-Filter/test_filter_operator.py"},{"location":"case_list_docs/DataQuerying/Filter/#20-DataQuerying.02-Filter.test_filter_sma.TestFilterSma.test_filter_sma","title":"","text":"Summary: Sma Based                    Description: 1. Create db with STT_TRIGGER option and set value to 1, will flush data to disk easily 2. Create supper table and sub table 3. Insert some data into sub table 4. Flush database, the action will trigger the data to be written to disk 5. Query the sub table with filter condition on flag column 6. Check the number of rows returned by the query Path:                        cases/20-DataQuerying/02-Filter/test_filter_sma.py"},{"location":"case_list_docs/DataQuerying/Filter/#20-DataQuerying.02-Filter.test_filter_tag.TestFilterTag.test_filter_tag","title":"","text":"Summary: Tag                    Description: 1. Projection queries with arithmetic operations and tag column filtering conditions Path:                        cases/20-DataQuerying/02-Filter/test_filter_tag.py"},{"location":"case_list_docs/DataQuerying/Filter/#20-DataQuerying.02-Filter.test_filter_timestamp.TestFilterTimestamp.test_filter_timestamp","title":"","text":"Summary: Timestamp                    Description: 1. Projection queries with arithmetic operations and timestamp filtering conditions Path:                        cases/20-DataQuerying/02-Filter/test_filter_timestamp.py"},{"location":"case_list_docs/DataQuerying/GroupBy/","title":"03-GroupBy","text":""},{"location":"case_list_docs/DataQuerying/GroupBy/#20-DataQuerying.03-GroupBy.test_groupby_basic.TestGroupByBasic.test_groupby_basic","title":"","text":"Summary: Group By Basic                    Description: 1. Including multiple data types 2. Including data columns and tag columns 3. With ORDER BY clause 4. With Limit offset clause 5. With filtering conditions 6. With various functions 7. With different windows Path:                        cases/20-DataQuerying/03-GroupBy/test_groupby_basic.py"},{"location":"case_list_docs/DataQuerying/Having/","title":"12-Having","text":""},{"location":"case_list_docs/DataQuerying/Having/#20-DataQuerying.09-Having.test_having.TestHaving.test_having","title":"","text":"Summary: Having                    Description: 1. Using HAVING with GROUP BY and aggregate functions (AVG, SUM, COUNT, STDDEV, APERCENTILE, SPREAD, LAST) 2. Performing TOP, BOTTOM, and LAST operations on results 3. Applying ORDER BY and LIMIT OFFSET to results 4. Performing calculations and comparisons in the HAVING clause Path:                        cases/20-DataQuerying/09-Having/test_having.py"},{"location":"case_list_docs/DataQuerying/Having/#20-DataQuerying.09-Having.test_having_bugfix.TestHavingBuffix.test_ts4806","title":"","text":"Summary: BugFix: TS-4806                    Description: test event_windows + case when + having query fix Path:                        cases/20-DataQuerying/09-Having/test_having_bugfix.py"},{"location":"case_list_docs/DataQuerying/Having/#20-DataQuerying.09-Having.test_having_bugfix.TestHavingBuffix.test_td31880","title":"","text":"Summary: BugFix: TD-31880                    Description: test last_row(ts) query fix Path:                        cases/20-DataQuerying/09-Having/test_having_bugfix.py"},{"location":"case_list_docs/DataQuerying/Having/#20-DataQuerying.09-Having.test_having_bugfix.TestHavingBuffix.test_td31966","title":"","text":"Summary: BugFix: TD-31966                    Description: test percentile() from window query fix Path:                        cases/20-DataQuerying/09-Having/test_having_bugfix.py"},{"location":"case_list_docs/DataQuerying/Having/#20-DataQuerying.09-Having.test_having_bugfix.TestHavingBuffix.test_td32059","title":"","text":"Summary: BugFix: TD-32059                    Description: test having with interval and fill Path:                        cases/20-DataQuerying/09-Having/test_having_bugfix.py"},{"location":"case_list_docs/DataQuerying/Interp/","title":"11-Interp","text":""},{"location":"case_list_docs/DataQuerying/Interp/#20-DataQuerying.12-Interp.test_interp_basic.TestInterpBasic.test_interp_basic","title":"","text":"Summary: Interp basic                    Description: 1. Basic INTERP queries 2. Including RANGE and EVERY clauses 3. Including FILL modes like PREV, LINEAR, NULL, VALUE 4. INTERP queries used as subqueries 5. Single INTERP query covering multiple columns Path:                        cases/20-DataQuerying/12-Interp/test_interp_basic.py"},{"location":"case_list_docs/DataQuerying/Interp/#20-DataQuerying.12-Interp.test_interp_fill.TestInterp2.test_normal_query_new","title":"","text":"Summary: Interp fill and psedo column                    Description: 1. Used with PARTITION BY 2. Used with _isfilled and _irowts in both the select list and as ORDER BY columns 3. Testing more comprehensive fill modes Path:                        cases/20-DataQuerying/12-Interp/test_interp_fill.py"},{"location":"case_list_docs/DataQuerying/Interp/#20-DataQuerying.12-Interp.test_interp_fill.TestInterp2.test_abnormal_query","title":"","text":"Summary: Interp abnormal query                    Description: 1. Testing abnormal query Path:                        cases/20-DataQuerying/12-Interp/test_interp_fill.py"},{"location":"case_list_docs/DataQuerying/Limit/","title":"06-Limit","text":""},{"location":"case_list_docs/DataQuerying/Limit/#20-DataQuerying.06-Limit.test_limit.TestLimit.test_limit","title":"","text":"Summary: Limit                    Description: 1. Including multiple data types 2. With ORDER BY clause 3. With GROUP BY clause 4. With PARTITION BY clause 5. With filtering conditions 6. With various functions 7. With different windows Path:                        cases/20-DataQuerying/06-Limit/test_limit.py"},{"location":"case_list_docs/DataQuerying/Operator/","title":"01-Operator","text":""},{"location":"case_list_docs/DataQuerying/OrderBy/","title":"04-OrderBy","text":""},{"location":"case_list_docs/DataQuerying/OrderBy/#20-DataQuerying.04-OrderBy.test_orderby_double.TestOrderByDouble.test_orderby_double","title":"","text":"Summary: Sort double                    Description: 1. Create a database and table 2. Insert double values into the table 3. Query the table with order by double values; without the fix for TS-6772, it should be failed Path:                        cases/20-DataQuerying/04-OrderBy/test_orderby_double.py"},{"location":"case_list_docs/DataQuerying/OrderBy/#20-DataQuerying.04-OrderBy.test_orderby_subquery.TestOrderByBasic.test_orderby_basic","title":"","text":"Summary: Sort subquery results                    Description: 1. Sort the results of subqueries 2. Sort time data after applying the to_charfunction Path:                        cases/20-DataQuerying/04-OrderBy/test_orderby_subquery.py"},{"location":"case_list_docs/DataQuerying/Others/","title":"99-Others","text":""},{"location":"case_list_docs/DataQuerying/PsedoColumn/","title":"16-PsedoColumn","text":""},{"location":"case_list_docs/DataQuerying/Regexp/","title":"18-Regexp","text":""},{"location":"case_list_docs/DataQuerying/SLimit/","title":"07-SLimit","text":""},{"location":"case_list_docs/DataQuerying/SLimit/#20-DataQuerying.07-SLimit.test_slimit.TestSLimit.test_slimit","title":"","text":"Summary: SLimit                    Description: 1. SLIMIT with PARTITION BY 2. SLIMIT with GROUP BY 3. SLIMIT with PARTITION BY + INTERVAL 4. Combined use of SLIMIT and SOFFSET 5. Verify SLIMIT results after modifying tags Path:                        cases/20-DataQuerying/07-SLimit/test_slimit.py"},{"location":"case_list_docs/DataQuerying/SelectList/","title":"09-SelectList","text":""},{"location":"case_list_docs/DataQuerying/SelectList/#20-DataQuerying.01-SelectList.test_selectlist_basic.TestSelectListBasic.test_selectlist","title":"","text":"Summary: SelectList                    Description: 1. Projection queries 2. Aggregation queries 3. Scalar functions 4. Combining GROUP BY, ORDER BY, Limit, and WHERE clauses Path:                        cases/20-DataQuerying/01-SelectList/test_selectlist_basic.py"},{"location":"case_list_docs/DataQuerying/SubQuery/","title":"08-SubQuery","text":""},{"location":"case_list_docs/DataQuerying/SubQuery/#20-DataQuerying.08-SubQuery.test_subquery_basic.TestSubQueryBasic.test_subquery_basic","title":"","text":"Summary: Subquery basic                    Description: 1. Perform projection queries on subquery results 2. Perform aggregate queries on subquery results 3. Perform window queries on subquery results 4. Perform DIFF function queries on subquery results Path:                        cases/20-DataQuerying/08-SubQuery/test_subquery_basic.py"},{"location":"case_list_docs/DataQuerying/SubQuery/#20-DataQuerying.08-SubQuery.test_subquery_lastrow.TestSubQueryLastRow.test_subquery_lastrow","title":"","text":"Summary: Subquery with lastrow                    Description: 1. Create db 2. Create supper table and sub table 3. Insert data into sub table 4. Query last row from sub table as a sub query, it should return the last row data Path:                        cases/20-DataQuerying/08-SubQuery/test_subquery_lastrow.py"},{"location":"case_list_docs/DataQuerying/Tags/","title":"17-Tags","text":""},{"location":"case_list_docs/DataQuerying/Tags/#20-DataQuerying.14-Tags.test_tag_basic.TestTagBasic.test_tag_basic","title":"","text":"Summary: Tag query                    Description: 1. Projection queries combining data columns and the tbname pseudocolumn 2. Projection queries with the DISTINCT keyword 3. Queries combining tags and selection functions like LAST\u3001FITST\u3001MAX\u3001MIN 4. Grouping, sorting, and filtering by tags Path:                        cases/20-DataQuerying/14-Tags/test_tag_basic.py"},{"location":"case_list_docs/DataQuerying/Tags/#20-DataQuerying.14-Tags.test_tag_json.TestSelectWithJsonTags.test_select_with_json_tags","title":"","text":"Summary: Json tag                    Description: 1. Create db 2. Create supper table 3. Inset data with json tags 3. Select data and check the result Path:                        cases/20-DataQuerying/14-Tags/test_tag_json.py"},{"location":"case_list_docs/DataQuerying/Union/","title":"10-Union","text":""},{"location":"case_list_docs/Databases/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_option.TestDatabaseAlterOption.test_database_alter_option","title":"","text":"Summary: Alter all options                    Description: 1. Create database and inspect all option values. 2. Attempt to alter database with invalid options (expect failure). 3. Alter database with valid options and verify the changes. Path:                        cases/02-Databases/03-Alter/test_db_alter_option.py"},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_option_keep.TestDatabaseAlterOptionKeep.test_database_alter_option_keep","title":"","text":"Summary: Alter keep                    Description: 1. Use invalid input to alter the KEEP option 2. Verify results after changing KEEP 3. Add or drop columns on the super table 4. Insert data 5. Check results 6. Repeat steps 3-5 several times Path:                        cases/02-Databases/03-Alter/test_db_alter_option_keep.py"},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_replicas_13.TestDatabaseAlterReplica13.test_database_alter_replica_13","title":"","text":"Summary: Alter replica from 1 to 3                    Description: 1. Create a database with 1 replica 2. Create tables and insert data 3. Flush the database 4. Alter the replica count from 1 to 3 5. Verify that all data remains intact Path:                        cases/02-Databases/03-Alter/test_db_alter_replicas_13.py"},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_replicas_31.TestDatabaseAlterReplica13.test_database_alter_replica_31","title":"","text":"Summary: Alter replica from 3 to 1                    Description: 1. Create a database with 3 replica 2. Create tables and insert data 3. Flush the database 4. Alter the replica count from 3 to 1 5. Verify that all data remains intact Path:                        cases/02-Databases/03-Alter/test_db_alter_replicas_31.py"},{"location":"case_list_docs/Databases/Create/","title":"01-Create","text":""},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic1.TestDatabaseBasic1.test_database_basic1","title":"","text":"Summary: Database: basic 1                    Description: 1. Create database with vgroup option 2. Show vgroups 3. Show vnodes Path:                        cases/02-Databases/01-Create/test_db_basic1.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic2.TestDatabaseBasic2.test_database_basic2","title":"","text":"Summary: Database: basic 2                    Description: 1. Create database 2. Create supertable 3. Create subtable 4. Create regular table 5. Show tables 6. Drop database Path:                        cases/02-Databases/01-Create/test_db_basic2.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic3.TestDatabaseBasic3.test_database_basic3","title":"","text":"Summary: Database: basic 3                    Description: 1. Create database 2. Create normal table with the 'db.' prefix 3. Show tables using the 'db.' prefix Path:                        cases/02-Databases/01-Create/test_db_basic3.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic4.TestDatabaseBasic4.test_database_basic4","title":"","text":"Summary: Database: basic 4                    Description: 1. Create database 2. Create normal table 3. Show tables 4. Drop table 5. Show tables 6. Drop database Path:                        cases/02-Databases/01-Create/test_db_basic4.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic5.TestDatabaseBasic5.test_database_basic5","title":"","text":"Summary: Database: basic 5                    Description: 1. Create database 2. Create super table 3. Create child table 4. Show super tables 5. Show tables 6. Drop database and retest Path:                        cases/02-Databases/01-Create/test_db_basic5.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic6.TestDatabaseBasic6.test_database_basic6","title":"","text":"Summary: Database: basic 6                    Description: 1. Create database with options (replica, duration, keep, minrows) 2. Query information_schema.ins_databases and verify results 3. Repeatedly execute create database, drop database, create table, and write data Path:                        cases/02-Databases/01-Create/test_db_basic6.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_commit.TestDatabaseCommit.test_database_commit","title":"","text":"Summary: Database: commit                    Description: 1. Write data 2. Restart taosd 3. Append data to the same file 4. Verify row count Path:                        cases/02-Databases/01-Create/test_db_commit.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_tables.TestDatabaseTables.test_database_tables","title":"","text":"Summary: Database: cache                    Description: 1. Create database and table 2. Write and query data 3. Drop both 4. Reset query cache 5. Retest Path:                        cases/02-Databases/01-Create/test_db_tables.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_name_all.TestDatabaseCreate.test_database_create","title":"","text":"Summary: Name: basic                    Description: 1. Case sensitivity 2. Illegal names 3. Chinese names Path:                        cases/02-Databases/01-Create/test_name_all.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_name_len.TestDatabaseLen.test_database_len","title":"","text":"Summary: Name: length                    Description: 1. Create database with an excessively long name 2. Test with invalid values Path:                        cases/02-Databases/01-Create/test_name_len.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_all.TestDatabaseCreateAllOptions.test_database_create_all_options","title":"","text":"Summary: Options: basic                    Description: 1. Create database using all available options 2. Query information_schema.ins_databases to verify correct display 3. Test the valid ranges of each option Path:                        cases/02-Databases/01-Create/test_op_all.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_dnodelist.TestDatabaseDnodeList.test_database_dnode_list","title":"","text":"Summary: Options: dnodelist                    Description: 1. Create database with DNODE list option 2. Test creation with varying replica counts and vgroup numbers 3. Alter database DNODE list option Path:                        cases/02-Databases/01-Create/test_op_dnodelist.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_keep.TestDatabaseKeep.test_database_Keep","title":"","text":"Summary: Options: keep                    Description:     1. Create database with the KEEP option     2. Write and query data\u2014including data outside the KEEP range     3. ALTER database KEEP option     4. Write and query data again Path:                        cases/02-Databases/01-Create/test_op_keep.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_table_hash.TestDatabaseTableHash.test_database_table_hash","title":"","text":"Summary: Options: table hash                    Description: 1. Create a database with 2 vgroups and explicitly set table_prefix / table_suffix 2. Create one super table and 5 child tables; query information_schema.ins_tables to confirm their vgroup distribution 3. Create 5 normal tables; query information_schema.ins_tables again to verify their vgroup placement Path:                        cases/02-Databases/01-Create/test_op_table_hash.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_table_prefix_suffix.TestDatabaseTablePrefixSuffix.test_database_table_prefix_suffix","title":"","text":"Summary: Options: table prefix and suffix                    Description: 1. Create database with TABLE_PREFIX and TABLE_SUFFIX options 2. Create tables 3. Verify that tables are distributed across vgroups as expected Path:                        cases/02-Databases/01-Create/test_op_table_prefix_suffix.py"},{"location":"case_list_docs/Databases/Drop/","title":"02-Drop","text":""},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_catalog.TestDatabaseCatalog.test_database_catalog","title":"","text":"Summary: Check catalog                    Description: 1. Create database 2. Create normal table 3. Insert data 4. Alter data column 5. Insert data 6. Drop database 7. Repeat three times Path:                        cases/02-Databases/02-Drop/test_db_catalog.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_delete_reuse1.TestDatabaseDeleteReuse1.test_database_delete_reuse1","title":"","text":"Summary: Repeatedly drop 2                    Description: 1. Create database 2. Drop database 3. Attempt to write data to its tables (expected to fail) 4. Create normal table 5. Insert data 6. Query data 7. Repeat the entire sequence 20 times using the same database and table names Path:                        cases/02-Databases/02-Drop/test_db_delete_reuse1.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_delete_reuse2.TestDatabaseDeleteReuse2.test_database_delete_reuse2","title":"","text":"Summary: Repeatedly drop 3                    Description: 1. Create database 2. Drop database 3. Attempt to write data to its tables (expected to fail) 4. Create normal table 5. Insert data 6. Query data 7. Repeat the entire sequence 20 times using the different database and table names Path:                        cases/02-Databases/02-Drop/test_db_delete_reuse2.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_delete_reuse_vnode.TestDatabaseDeleteReuseVnode.test_database_delete_reuse_vnode","title":"","text":"Summary: Repeatedly drop 1                    Description: 1. Create a database and a normal table, insert data, and repeat the above 30 times using the same names 2. Restart the dnode 3. Create a database and a super table, create child tables, insert data, and repeat the above 10 times using the same names Path:                        cases/02-Databases/02-Drop/test_db_delete_reuse_vnode.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_repeat.TestDatabaseRepeat.test_database_repeat","title":"","text":"Summary: Repeatedly drop 4                    Description: 1. Create database 2. Create table 3. Drop both 4. Repeat several times Path:                        cases/02-Databases/02-Drop/test_db_repeat.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_writing.TestDatabaseDeleteWriting.test_database_delete_writing","title":"","text":"Summary: Drop while writing                    Description: 1. Create database 2. Create normal table 3. Insert data 4. Sleep 1s 5. Repeat 10 times with the same names 6. Meanwhile, start a thread that keeps inserting into that table regardless of success Path:                        cases/02-Databases/02-Drop/test_db_writing.py"},{"location":"case_list_docs/Databases/Flush/","title":"07-Flush","text":""},{"location":"case_list_docs/Databases/Flush/#02-Databases.07-Flush.test_db_flush.TestDbFlush.test_db_flush","title":"","text":"Summary: Flush database                    Description: 1. Create a database with sst_trigger = 1. 2. Insert string-typed data. 3. Flush the database. 4. Continue inserting data (including duplicates). 5. Verify the query results for correctness. Path:                        cases/02-Databases/07-Flush/test_db_flush.py"},{"location":"case_list_docs/Databases/Precision/","title":"06-Precision","text":""},{"location":"case_list_docs/Databases/Precision/#02-Databases.06-Precision.test_db_precision_ns.TestDatabasePrecisionNs.test_database_precision_ns","title":"","text":"Summary: Precision: ns                    Description: 1. Create a nanosecond-precision database. 2. Insert data using numeric timestamps. 3. Verify the row count. 4. Insert data using now(). 5. Filter data by timestamp. 6. Validate INTERVAL \u2026 SLIDING queries. Path:                        cases/02-Databases/06-Precision/test_db_precision_ns.py"},{"location":"case_list_docs/Databases/Precision/#02-Databases.06-Precision.test_db_precision_us.TestDatabasePrecisionUs.test_database_precision_us","title":"","text":"Summary: Precision: ms and us                    Description: 1. Millisecond-precision test 2. Create a millisecond-precision database 3. Insert both valid and invalid timestamps 4. Query the data 5. Microsecond-precision test 6. Create a microsecond-precision database 7. Repeat the same insert and query steps as above Path:                        cases/02-Databases/06-Precision/test_db_precision_us.py"},{"location":"case_list_docs/Databases/Query/","title":"04-Query","text":""},{"location":"case_list_docs/Databases/Query/#02-Databases.04-Query.test_db_show_create_db.TestDatabaseShowCreateDb.test_database_show_create_db","title":"","text":"Summary: Show create db                    Description: 1. Create database 2. Run SHOW CREATE DATABASE 3. Verify the result Path:                        cases/02-Databases/04-Query/test_db_show_create_db.py"},{"location":"case_list_docs/Databases/Query/#02-Databases.04-Query.test_db_show_create_table.TestDatabaseShowCreateTable.test_database_show_create_table","title":"","text":"Summary: Show create table                    Description: 1. Create a normal table 2. Create a super table 3. Create child tables 4. Execute SHOW CREATE TABLE and verify the output 5. Change the showFullCreateTableColumn parameter 6. Execute SHOW CREATE TABLE again and verify the new output Path:                        cases/02-Databases/04-Query/test_db_show_create_table.py"},{"location":"case_list_docs/Databases/Query/#02-Databases.04-Query.test_db_show_vgroup.TestDatabaseShowVgroup.test_database_show_vgroup","title":"","text":"Summary: Show vgroups                    Description: 1. Create multiple databases 2. Repeatedly create and drop tables 3. Run SHOW VGROUPS after each cycle to confirm the expected vgroup count Path:                        cases/02-Databases/04-Query/test_db_show_vgroup.py"},{"location":"case_list_docs/Databases/Sync/","title":"05-Sync","text":""},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance1.TestBalance1.test_balance_1","title":"","text":"Summary: Scale-up: repica-1 (mnode)                    Description: 1. Create a 1-dnode cluster 2. Create database d1 (1 vgroup, replica 1) and insert data 3. Start dnode2, join it to the cluster, run BALANCE VGROUP; verify vnode distribution and data integrity 4. Create database d2 (1 vgroup, replica 1) and insert data; check distribution &amp; integrity 5. Remove dnode2; verify vnode distribution and data integrity 6. Start dnode3, join it to the cluster, run BALANCE VGROUP; verify distribution &amp; integrity 7. Create database d3 (1 vgroup, replica 1) and insert data; check distribution &amp; integrity 8. Remove dnode3; verify vnode distribution and data integrity 9. Create database d4 (1 vgroup, replica 1) and insert data; check distribution &amp; integrity Path:                        cases/02-Databases/05-Sync/test_balance1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance2.TestBalance2.test_balance_2","title":"","text":"Summary: Scale-up: repica-3 db-1                    Description: 1. Create a 3-dnode cluster 2. Create four 1-vgroup, 3-replica databases and insert data; verify vnode distribution and data integrity 3. Start dnode4 and dnode5, then add them to the cluster 4. Drop dnode2; verify vnode re-distribution and data integrity 5. Drop dnode3; verify vnode re-distribution and data integrity Path:                        cases/02-Databases/05-Sync/test_balance2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance3.TestBalance3.test_balance_3","title":"","text":"Summary: Scale-up: repica-1 db-2                    Description: 1. Start a 4-dnode cluster 2. Create two 1-vgroup, 3-replica databases d1 and d2; insert data and verify vnode distribution &amp; data integrity 3. Remove dnode2; verify vnode re-distribution &amp; data integrity 4. Start dnode5 and join it to the cluster; run BALANCE VGROUP; verify distribution &amp; integrity 5. Create one more 1-vgroup, 3-replica database d3; insert data and verify 6. Start dnode6 and join the cluster; run BALANCE VGROUP; verify distribution &amp; integrity 7. Remove dnode3; verify final vnode distribution &amp; data integrity Path:                        cases/02-Databases/05-Sync/test_balance3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance_replica_1.TestBalanceReplica1.test_balance_replica_1","title":"","text":"Summary: Balance: replica-1                    Description: 1. Create a single-replica database with 2 vgroups and insert data 2. Start a new dnode and add it to the cluster 3. Execute BALANCE VGROUP 4. Verify vnode distribution and data integrity Path:                        cases/02-Databases/05-Sync/test_balance_replica_1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance_replica_3.TestBalanceReplica3.test_balance_replica_3","title":"","text":"Summary: Balance: replica-3                    Description: 1. Create a 3-replica database with 4 vgroups and insert data 2. Start a new dnode and add it to the cluster 3. Execute BALANCE VGROUP 4. Verify vnode distribution and data integrity Path:                        cases/02-Databases/05-Sync/test_balance_replica_3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance_vnode_clean.TestVnodeClean.test_vnode_clean","title":"","text":"Summary: Scale-up: repica-1                    Description: 1. Start a 1-node cluster 2. Create database d1 (1 vgroup, 1 replica); create table, insert data, verify 3. Add dnode2 \u2192 run BALANCE VGROUP 4. Create database d2 (1 vgroup, 1 replica); create table, insert data, verify 5. Remove dnode2 6. Add dnode3 \u2192 run BALANCE VGROUP 7. Create database d3 (1 vgroup, 1 replica); create table, insert data, verify 8. Add dnode4 \u2192 run BALANCE VGROUP 9. Create database d4 (4 vgroups, 1 replica); create tables, insert data, verify 10. Remove dnode3 11. Check data integrity for all databases d1, d2, d3, and d4 Path:                        cases/02-Databases/05-Sync/test_balance_vnode_clean.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balancex.TestBalancex.test_balance_x","title":"","text":"Summary: Scale-up: repica mixed                    Description: 1. Start a 1-dnode cluster 2. Create databases d1 and d2 (each 1 vgroup, replica 1) and insert data 3. Start dnode2 and dnode3, add them to the cluster 4. Create database d3 (3 vgroups, replica 3) and insert data; verify vnode distribution &amp; data integrity 5. Start dnode4 and join the cluster; run BALANCE VGROUP; verify distribution &amp; integrity 6. Drop dnode2; verify vnode re-distribution &amp; data integrity Path:                        cases/02-Databases/05-Sync/test_balancex.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica1.TestRedistributeVgroupReplica1.test_redistribute_vgroup_replica1","title":"","text":"Summary: RDST: replica-1                    Description: 1. Start a 2-dnode cluster with supportVnodes=0 on dnode1 2. Create database d1 (1 vgroup, replica 1) and insert data 3. Add dnode3 and dnode4 to the cluster 4. Execute REDISTRIBUTE VGROUP to move the vnode to dnode3; verify distribution &amp; data integrity 5. Execute REDISTRIBUTE VGROUP to move the vnode to dnode4; verify 6. Execute REDISTRIBUTE VGROUP to move the vnode to dnode2; verify 7. Repeat steps 4-6 three more times, cycling the vnode among dnode3 \u2192 dnode4 \u2192 dnode2 \u2192 dnode3 \u2192 dnode2 \u2192 dnode3 \u2192 dnode2, verifying distribution &amp; data integrity after each move Path:                        cases/02-Databases/05-Sync/test_redistribute_vgroup_replica1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v1_follower.TestRedistributeVgroupReplica3V1Follower.test_redistribute_vgroup_replica3_v1_follower","title":"","text":"Summary: RDST: repica-3 follower                    Description: 1. Start a 4-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and insert data 3. Execute illegal REDISTRIBUTE VGROUP commands (expected to fail because no eligible dnodes are available) 4. Add dnode5 to the cluster 5. Identify the vnode whose role is leader; keep this leader fixed 6. For the two follower vnodes, perform five round-trip moves among the remaining three dnodes. After each move, verify vnode distribution and data integrity Path:                        cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v1_follower.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v1_leader.TestRedistributeVgroupReplica3V1Leader.test_redistribute_vgroup_replica3_v1_leader","title":"","text":"Summary: RDST: replica-3 leader                    Description: 1. Start a 4-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and write data 3. Execute illegal REDISTRIBUTE VGROUP commands (expected to fail due to insufficient eligible dnodes) 4. Add dnode5 to the cluster 5. Identify the follower vnode and keep it unchanged 6. Move the leader vnode among the remaining three dnodes five times; after each move, check vnode distribution and data integrity Path:                        cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v1_leader.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v2.TestRedistributeVgroupReplica3V2.test_redistribute_vgroup_replica3_v2","title":"","text":"Summary: RDST: replica-3 move-2                    Description: 1. Start a 4-node cluster with dnode1 set to supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and write data 3. Add dnode5 and dnode6 to the cluster 4. In parallel, move two vnodes to the new nodes 5. After each move, verify vnode distribution and data integrity 6. Repeat steps 4-5 three times Path:                        cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v3.TestRedistributeVgroupReplica3V3.test_redistribute_vgroup_replica3_v3","title":"","text":"Summary: RDST: replica-3 move-3                    Description: 1. Start a 4-node cluster with dnode1 set to supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and write data 3. Add dnode5 and dnode6 to the cluster 4. In parallel, move three vnodes to the new nodes 5. After each move, verify vnode distribution and data integrity 6. Repeat steps 4-5 three times Path:                        cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_split_vgroup_replica1.TestSplitVgroupReplica1.test_split_vgroup_replica1","title":"","text":"Summary: Split: replica-1                    Description: 1. Start a 2-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 1 replica) and insert data 3. Add a new dnode2 to the cluster 4. Run SPLIT VGROUP to split the vnode; verify the new vnode distribution and data integrity Path:                        cases/02-Databases/05-Sync/test_split_vgroup_replica1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_split_vgroup_replica3.TestSplitVgroupReplica3.test_split_vgroup_replica3","title":"","text":"Summary: Split: replica-3                    Description: 1. Start a 4-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and insert data 3. Execute SPLIT VGROUP to split the vnode Path:                        cases/02-Databases/05-Sync/test_split_vgroup_replica3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_stable_balance_replica1.TestStableBalanceReplica1.test_stable_balance_replica1","title":"","text":"Summary: Query: after balance                    Description: 1. Launch a single-node cluster 2. Create a 1-replica database with 4 vgroups 3. Create one super table and 13 child tables; insert 200 rows into each 4. Add dnode2 to the cluster 5. Execute BALANCE VGROUP 6. Verify data integrity in all tables Path:                        cases/02-Databases/05-Sync/test_stable_balance_replica1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_stable_dnode2.TestStableDnode.test_stable_dnode","title":"","text":"Summary: Query: after restart                    Description: 1. Start a 2-node cluster 2. Create a 1-replica database with 3 vgroups 3. Create one super table and 10 child tables; insert 20 rows into each 4. Stop dnode2 \u2192 expect queries to fail 5. Restart dnode2 \u2192 queries succeed and all data are present Path:                        cases/02-Databases/05-Sync/test_stable_dnode2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_stable_replica3_dnode6.TestStableReplica3Vnode3.test_stable_replica3_vnode3","title":"","text":"Summary: Query: repica-3                    Description: 1. Start a 6-node cluster 2. Create a 3-replica database with 3 vgroups 3. Create one super table and 10 child tables; insert 20 rows into each 4. Run COUNT and INTERVAL queries; verify the results Path:                        cases/02-Databases/05-Sync/test_stable_replica3_dnode6.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_sync_3Replica1VgElect.TestSync3Replica5VgElect.test_sync_3Replica5VgElect","title":"","text":"Summary: Query: replica-3 restart                    Description: 1. Start a 4-node cluster with dnode1 set to supportVnodes=0 2. Create a 3-replica database with 1 vgroup 3. Create one super table and 10 child tables; insert 20 rows into each 4. Restart each dnode multiple times 5. Verify data integrity Path:                        cases/02-Databases/05-Sync/test_sync_3Replica1VgElect.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_sync_vnodesnapshot_rsma.TestSyncVnodeSnapshotRsma.test_sync_vnode_snapshot_rsma","title":"","text":"Summary: Query: replica-3 rsma                    Description: 1. Start a 4-node cluster with dnode1 supportVnodes=0 2. Create a 3-replica database with 1 vgroup 3. Create one RSMA-enabled super table and one child table 4. Stop dnode4 5. Insert data and flush database 6. Repeat steps 4-5 twice 7. Restart all dnodes 8. Query and verify results Path:                        cases/02-Databases/05-Sync/test_sync_vnodesnapshot_rsma.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_basic.TestVnodeReplica3Basic.test_vnode_replica3_basic","title":"","text":"Summary: Write: replica-3 mnode-3                    Description: 1. Start a 3-node cluster with 3 mnodes. 2. Create a 1-replica, 1-vgroup database; create table, insert data, and verify. 3. Stop dnode2 \u2192 insert data \u2192 start dnode2 \u2192 insert data. 4. Stop dnode3 \u2192 insert data \u2192 start dnode3 \u2192 insert data. 5. Stop dnode1 \u2192 insert data \u2192 start dnode1 \u2192 insert data. 6. Verify data integrity across all nodes. Path:                        cases/02-Databases/05-Sync/test_vnode_replica3_basic.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_import.TestVnodeReplica3Import.test_vnode_replica3_import","title":"","text":"Summary: Write: replica-3 import data                    Description: 1. Start a 4-node cluster. 2. Create a 3-replica, 1-vgroup database; create table, insert out-of-order data, and verify. 3. Restart dnode2 \u2192 insert out-of-order data \u2192 verify. 4. Restart dnode3 \u2192 insert out-of-order data \u2192 verify. 5. Restart dnode4 \u2192 insert out-of-order data \u2192 verify. 6. Restart dnode3 again \u2192 insert out-of-order data \u2192 verify. Path:                        cases/02-Databases/05-Sync/test_vnode_replica3_import.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_many.TestVnodeReplica3Many.test_vnode_replica3_many","title":"","text":"Summary: Write: replica-3 restart                    Description: 1. Start a 4-node cluster. 2. Create four 1-vgroup, 3-replica databases and a normal table in each. 3. In a background thread, insert one record into every table every 0.1 s (ignore any failures). 4. Sequentially restart dnode1 \u2192 dnode2 \u2192 dnode3 \u2192 dnode4; repeat this full cycle 8 times. 5. After every restart, confirm that row counts never decrease. Path:                        cases/02-Databases/05-Sync/test_vnode_replica3_many.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_vgroup.TestVnodeReplica3Vgroup.test_vnode_replica3_vgroup","title":"","text":"Summary: Write: repica-3 vgroup-2                    Description: 1. Start a 4-node cluster. 2. Create a 3-replica database with 2 vgroups and create a super table. 3. Create 300 child tables and insert one record into each. 4. Insert one earlier-timestamp record into each child table. 5. Verify the query results are correct. Path:                        cases/02-Databases/05-Sync/test_vnode_replica3_vgroup.py"},{"location":"case_list_docs/Functions/Aggregate/","title":"02-Aggregate","text":""},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_apercentile.TestFuncApercentile.test_func_apercentile","title":"","text":"Summary: Apercentile                    Description: 1. - Path:                        cases/10-Functions/02-Aggregate/test_func_apercentile.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_avg.TestFuncAvg.test_func_avg","title":"","text":"Summary: Avg \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Avg \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Avg \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/02-Aggregate/test_func_avg.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_count.TestFuncCount.test_func_count","title":"","text":"Summary: Count \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Count \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Count \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/02-Aggregate/test_func_count.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_elapsed.TestFuncElapsed.test_normal_query","title":"","text":"Summary: test elapsed function                    Description: test elapsed function Path:                        cases/10-Functions/02-Aggregate/test_func_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_elapsed.TestFuncElapsed.test_query_with_filter","title":"","text":"Summary: test elapsed function with filter                    Description: test elapsed function with filter Path:                        cases/10-Functions/02-Aggregate/test_func_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_elapsed.TestFuncElapsed.test_query_with_other_function","title":"","text":"Summary: test elapsed function with other function                    Description: test elapsed function with avg, count, leastsquares, spread, sum, hyperloglog, twa Path:                        cases/10-Functions/02-Aggregate/test_func_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_elapsed.TestFuncElapsed.test_query_with_join","title":"","text":"Summary: test elapsed function with join                    Description: test elapsed function with join Path:                        cases/10-Functions/02-Aggregate/test_func_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_elapsed.TestFuncElapsed.test_query_with_union","title":"","text":"Summary: test elapsed function with union                    Description: test elapsed function with union Path:                        cases/10-Functions/02-Aggregate/test_func_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_elapsed.TestFuncElapsed.test_nested_query","title":"","text":"Summary: test elapsed function with nested query                    Description: test elapsed function with nested query Path:                        cases/10-Functions/02-Aggregate/test_func_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_elapsed.TestFuncElapsed.test_abnormal_query","title":"","text":"Summary: test unsupported elapsed sql command                    Description: test unsupported elapsed sql command Path:                        cases/10-Functions/02-Aggregate/test_func_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_leastsquares.TestFuncLeastsquares.test_func_leastsquares","title":"","text":"Summary: Leastsquares \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Leastsquares \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u65f6\u95f4\u6233\u5217\u7b5b\u9009 Path:                        cases/10-Functions/02-Aggregate/test_func_leastsquares.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_percentile.TestFuncPercentile.test_func_percentile","title":"","text":"Summary: Percentile \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Percentile \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u65f6\u95f4\u6233\u5217\u7b5b\u9009 Path:                        cases/10-Functions/02-Aggregate/test_func_percentile.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_spread.TestFuncSpread.test_func_spread","title":"","text":"Summary: Sum \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Sum \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Sum \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/02-Aggregate/test_func_spread.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_stddev.TestFuncStddev.test_func_stddev","title":"","text":"Summary: Stddev \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Stddev \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u65f6\u95f4\u6233\u5217\u7b5b\u9009 Path:                        cases/10-Functions/02-Aggregate/test_func_stddev.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_stddev2.TestFuncStddev2.test_func_stddev2","title":"","text":"Summary: Stddev                     Description: 1. - Path:                        cases/10-Functions/02-Aggregate/test_func_stddev2.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_func_sum.TestFuncSum.test_func_sum","title":"","text":"Summary: Sum \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Sum \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Sum \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/02-Aggregate/test_func_sum.py"},{"location":"case_list_docs/Functions/Aggregate/#10-Functions.02-Aggregate.test_percentile.TestPercentile.test_percentile","title":"","text":"Summary: test percentile function                    Description: test percentile function with SPREAD(),LEASTSQUARES(),COUNT(),HYPERLOGLOG(),AVG(), HYPERLOGLOG(),AVG(),SPREAD(),STDDEV(),SUM(),COUNT(),APERCENTILE(),LEASTSQUARES(), STDDEV(), COUNT(),HYPERLOGLOG(),HYPERLOGLOG(),SPREAD() Path:                        cases/10-Functions/02-Aggregate/test_percentile.py"},{"location":"case_list_docs/Functions/Selection/","title":"03-Selection","text":""},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_bottom.TestFuncBottom.test_func_bottom","title":"","text":"Summary: Bottom \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Bottom \u67e5\u8be2 Path:                        cases/10-Functions/03-Selection/test_func_bottom.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_first.TestFuncFirst.test_func_first","title":"","text":"Summary: First \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c First \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c First \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/03-Selection/test_func_first.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_first_last.TestFuncFirstLast.test_func_first_last","title":"","text":"Summary: First Last                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_first_last.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_basic.TestFuncLastBasic.test_func_last_basic","title":"","text":"Summary: Last Basic                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Last \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Last \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/03-Selection/test_func_last_basic.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_both.TestFuncLastBoth.test_func_last_both","title":"","text":"Summary: Last Both                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_last_both.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_cache.TestFuncLastCache.test_func_last_cache","title":"","text":"Summary: Last Cache                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_last_cache.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_groupby.TestFuncLastGroupBy.test_func_last_groupby","title":"","text":"Summary: Last Group By                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_last_groupby.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_lru.TestFuncLastLru.test_func_last_lru","title":"","text":"Summary: Last Lru\uff08\u5185\u5b58\u4e0d\u8db3\u3001\u591a Vgroup\u3001\u590d\u6742\u67e5\u8be2\uff09                    Description: 1. \u521b\u5efa\u5185\u5b58\u4e0d\u8db3\u7684\u6570\u636e\u5e93 2. \u521b\u5efa\u8d85\u7ea7\u8868\u3001\u5b50\u8868\u3001\u5199\u5165\u6570\u636e 3. \u8fdb\u884c first/count/last/tbname/\u6392\u5e8f/interval/group by \u7b49\u7684\u6df7\u5408\u67e5\u8be2 4. \u521b\u5efa\u5185\u5b58\u5145\u8db3\u7684\u6570\u636e\u5e93 5. \u91cd\u590d\u4ee5\u4e0a\u67e5\u8be2 6. \u521b\u5efa vroups=4 \u7684\u6570\u636e\u5e93 7. \u91cd\u590d\u4ee5\u4e0a\u67e5\u8be2 Path:                        cases/10-Functions/03-Selection/test_func_last_lru.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_row1.TestFuncLastRow1.test_func_last_row1","title":"","text":"Summary: Last_Row 1                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Last_Row \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Last_Row \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By 5. \u521b\u5efa\u4e00\u4e2a cacheModel = both \u7684\u6570\u636e\u5e93\uff0c\u91cd\u590d\u4ee5\u4e0a\u6d4b\u8bd5 Path:                        cases/10-Functions/03-Selection/test_func_last_row1.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_row2.TestFuncLastBoth.test_func_last_both","title":"","text":"Summary: Last \u51fd\u6570                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_last_row2.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_row3.TestFuncLastRow3.test_func_last_row3","title":"","text":"Summary: Last_Row 3                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_last_row3.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_last_tag.TestFuncLastTag.test_func_last_lru","title":"","text":"Summary: -                    Description: 1. Path:                        cases/10-Functions/03-Selection/test_func_last_tag.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_max.TestFuncMax.test_func_max","title":"","text":"Summary: Max \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Max \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Max \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/03-Selection/test_func_max.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_min.TestFuncMin.test_func_min","title":"","text":"Summary: Min \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Min \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009 4. \u5bf9\u8d85\u7ea7\u8868\u6267\u884c Min \u67e5\u8be2\uff0c\u5305\u62ec\u65f6\u95f4\u7a97\u53e3\u3001\u666e\u901a\u6570\u636e\u5217\u7b5b\u9009\u3001\u6807\u7b7e\u5217\u7b5b\u9009\u3001Group By\u3001Partition By Path:                        cases/10-Functions/03-Selection/test_func_min.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_multires.TestFuncBottom.test_func_multires","title":"","text":"Summary: -                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_multires.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_paramnum.TestFuncParamnum.test_func_paramnum","title":"","text":"Summary: test function parameters numbers                    Description: test last_row, first, last function support 520 parameters Path:                        cases/10-Functions/03-Selection/test_func_paramnum.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_top.TestFuncTop.test_func_top","title":"","text":"Summary: Top \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Top \u67e5\u8be2 Path:                        cases/10-Functions/03-Selection/test_func_top.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_func_topbot.TestFuncTopBottom.test_func_top_bottom","title":"","text":"Summary: Top Bottom                    Description: 1. - Path:                        cases/10-Functions/03-Selection/test_func_topbot.py"},{"location":"case_list_docs/Functions/Selection/#10-Functions.03-Selection.test_selection_function_with_json.TestSelectionFunctionWithJson.test_selection_function_with_json","title":"","text":"Summary: test select function with json params                    Description: test select function with json params Path:                        cases/10-Functions/03-Selection/test_selection_function_with_json.py"},{"location":"case_list_docs/Functions/SingleRow/","title":"01-SingleRow","text":""},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_cast.TestCast.test_ts5972","title":"","text":"Summary: test cast function ts5972                    Description: test cast function convert a floating-point number to a binary and then performing a comparison Path:                        cases/10-Functions/01-SingleRow/test_cast.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_cast.TestCast.test_cast_without_from","title":"","text":"Summary: test cast function                    Description: test cast from int to other, from bigint to other,from smallint to other,from tinyint to other,from float to other,from str to other,from bool to other,from timestamp to other, from compute to other Path:                        cases/10-Functions/01-SingleRow/test_cast.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_concat.TestConcat.test_concat","title":"","text":"Summary: test concat function                    Description: test concat function Path:                        cases/10-Functions/01-SingleRow/test_concat.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_func_cast.TestFuncCast.test_func_cast","title":"","text":"Summary: Cast \u51fd\u6570                    Description: 1. \u521b\u5efa\u8d85\u7ea7\u8868\u3001\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 2. \u6267\u884c\u6700\u57fa\u672c\u7684 cast \u51fd\u6570\uff0c\u8f6c\u6362\u6570\u5b57\u548c\u65f6\u95f4\u6233 Path:                        cases/10-Functions/01-SingleRow/test_func_cast.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_func_char_scalar.TestFuncCharScalar.test_func_char_scalar","title":"","text":"Summary: Cast \u51fd\u6570                    Description: 1. - Path:                        cases/10-Functions/01-SingleRow/test_func_char_scalar.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_func_scalar.TestFuncScalar.test_func_sclar","title":"","text":"Summary: Single Row                    Description: 1. Path:                        cases/10-Functions/01-SingleRow/test_func_scalar.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_func_scalar_null.TestFuncScalarNull.test_func_scalar_null","title":"","text":"Summary: Single Row                    Description: 1. Path:                        cases/10-Functions/01-SingleRow/test_func_scalar_null.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_func_truncate.TestFuncTruncate.test_func_truncate","title":"","text":"Summary: Truncate \u51fd\u6570                    Description: 1. \u521b\u5efa\u8d85\u7ea7\u8868\u3001\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 2. \u6267\u884c\u6700\u57fa\u672c\u7684 Truncate \u51fd\u6570 3. \u8fdb\u884c\u4e00\u4e9b timestamp \u7684\u8f6c\u6362\u64cd\u4f5c Path:                        cases/10-Functions/01-SingleRow/test_func_truncate.py"},{"location":"case_list_docs/Functions/SingleRow/#10-Functions.01-SingleRow.test_single_row_in_tb.TestSingleRowInTb.test_single_row_in_tb","title":"","text":"Summary: Single Row                    Description: 1. Path:                        cases/10-Functions/01-SingleRow/test_single_row_in_tb.py"},{"location":"case_list_docs/Functions/TimeseriesSpecfic/","title":"04-TimeseriesSpecfic","text":""},{"location":"case_list_docs/Functions/TimeseriesSpecfic/#10-Functions.04-TimeseriesSpecfic.test_func_diff.TestFuncDiff.test_func_diff","title":"","text":"Summary: Diff \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Diff \u67e5\u8be2 Path:                        cases/10-Functions/04-TimeseriesSpecfic/test_func_diff.py"},{"location":"case_list_docs/Functions/TimeseriesSpecfic/#10-Functions.04-TimeseriesSpecfic.test_func_diff2.TestFuncDiff2.test_func_diff2","title":"","text":"Summary: Diff \u51fd\u6570\uff08\u591a\u4e2a\u6570\u636e\u7c7b\u578b\uff09                    Description: 1. \u521b\u5efa\u5305\u542b Int\u3001Float\u3001Bigint\u3001Smallint\u3001Tinyint\u3001Double\u3001Bool\u3001Nchar Binary \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Diff \u67e5\u8be2 Path:                        cases/10-Functions/04-TimeseriesSpecfic/test_func_diff2.py"},{"location":"case_list_docs/Functions/TimeseriesSpecfic/#10-Functions.04-TimeseriesSpecfic.test_func_diff3.TestFuncDiff.test_func_diff","title":"","text":"Summary: Diff \u51fd\u6570                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5bf9\u5b50\u8868\u6267\u884c Diff \u67e5\u8be2 Path:                        cases/10-Functions/04-TimeseriesSpecfic/test_func_diff3.py"},{"location":"case_list_docs/ManageNodes/Dnode/","title":"01-Dnode","text":""},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_5dnode_3mnode_add_1dnode.Test5dnode3mnodeAdd1Dnode.test_five_dnode_three_mnode","title":"","text":"Summary: add dnode                    Description: start 5 dnodes and 3 mnodes, add one dnode Path:                        cases/19-ManageNodes/01-Dnode/test_5dnode_3mnode_add_1dnode.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_5dnode_3mnode_stop.Test5dnode3mnodeStop.test_five_dnode_three_mnode","title":"","text":"Summary: cluster mnode status                    Description: 5dnodes start/stop each dnode, then check mnode status Path:                        cases/19-ManageNodes/01-Dnode/test_5dnode_3mnode_stop.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_alter_dnode_debugflag.TestDnodeAlterDebugFlag.test_dnode_alter_debugflag","title":"","text":"Summary: \u5b50\u8868\u521b\u5efa\u3001\u8bfb\u5199                    Description: 1. \u4ec5\u542f\u52a8\u4e00\u4e2a dnode 2. \u4fee\u6539\u5728\u7ebf dnode \u7684 monitor\u3001debugflag \u53c2\u6570 3. \u4fee\u6539\u4e0d\u5728\u7ebf dnode \u53c2\u6570\uff08\u62a5\u9519\uff09 Path:                        cases/19-ManageNodes/01-Dnode/test_alter_dnode_debugflag.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_cluster_basic.TestClusterBasic.test_check_cluster_empty_db","title":"","text":"Summary: cluster dnode reduction                    Description: 5 dnodes start and stop 2, then check cluster status Path:                        cases/19-ManageNodes/01-Dnode/test_cluster_basic.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_cluster_basic.TestClusterBasic.test_check_cluster_with_db","title":"","text":"Summary: cluster dnode reduction with db                    Description: 5 dnodes start and create db, and stop 2, then check cluster status Path:                        cases/19-ManageNodes/01-Dnode/test_cluster_basic.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_create_dnode.TestCreateDnode.test_create_dnode","title":"","text":"Summary: create dnode                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_create_dnode.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_drop_dnode_force.TestDropDnodeForce.test_drop_dnode_force","title":"","text":"Summary: drop dnode force                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_drop_dnode_force.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_drop_dnode_has_mnode.TestDropDnodeHasMnode.test_drop_dnode_has_mnode","title":"","text":"Summary: drop dnode has mnode                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_drop_dnode_has_mnode.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_drop_dnode_has_multi_vnode_replica1.TestDropDnodeHasMultiVnodeReplica1.test_drop_dnode_has_multi_vnode_replica1","title":"","text":"Summary: drop dnode has multi vnode replica 1                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_drop_dnode_has_multi_vnode_replica1.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_drop_dnode_has_multi_vnode_replica3.TestDropDnodeHasMultiVnodeReplica3.test_drop_dnode_has_multi_vnode_replica3","title":"","text":"Summary: drop dnode has multi vnode replica3                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_drop_dnode_has_multi_vnode_replica3.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_drop_dnode_has_qnode_snode.TestDropDnodeHasQnodeSnode.test_drop_dnode_has_qnode_snode","title":"","text":"Summary: drop dnode has qnode snode                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_drop_dnode_has_qnode_snode.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_drop_dnode_has_vnode_replica1.TestDropDnodeHasVnodeReplica1.test_drop_dnode_has_vnode_replica1","title":"","text":"Summary: drop dnode has vnode replica1                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_drop_dnode_has_vnode_replica1.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_drop_dnode_has_vnode_replica3.TestDropDnodeHasVnodeReplica3.test_drop_dnode_has_vnode_replica3","title":"","text":"Summary: drop dnode has vnode replica3                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_drop_dnode_has_vnode_replica3.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_offline_reason.TestOfflineReason.test_offline_reason","title":"","text":"Summary: dnode offline reason                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_offline_reason.py"},{"location":"case_list_docs/ManageNodes/Dnode/#19-ManageNodes.01-Dnode.test_use_dropped_dnode.TestUseDroppedDnode.test_use_dropped_dnode","title":"","text":"Summary: use dropped dnode                    Description: 1. - Path:                        cases/19-ManageNodes/01-Dnode/test_use_dropped_dnode.py"},{"location":"case_list_docs/ManageNodes/Mnode/","title":"02-Mnode","text":""},{"location":"case_list_docs/ManageNodes/Mnode/#19-ManageNodes.02-Mnode.test_mnode_basic1.TestMnodeBasic1.test_mnode_basic1","title":"","text":"Summary: mnode basic 1                    Description: 1. - Path:                        cases/19-ManageNodes/02-Mnode/test_mnode_basic1.py"},{"location":"case_list_docs/ManageNodes/Mnode/#19-ManageNodes.02-Mnode.test_mnode_basic2.TestMnodeBasic2.test_mnode_basic2","title":"","text":"Summary: mnode basic 2                    Description: 1. - Path:                        cases/19-ManageNodes/02-Mnode/test_mnode_basic2.py"},{"location":"case_list_docs/ManageNodes/Mnode/#19-ManageNodes.02-Mnode.test_mnode_basic3.TestMnodeBasic3.test_mnode_basic3","title":"","text":"Summary: mnode basic 3                    Description: 1. - Path:                        cases/19-ManageNodes/02-Mnode/test_mnode_basic3.py"},{"location":"case_list_docs/ManageNodes/Mnode/#19-ManageNodes.02-Mnode.test_mnode_basic4.TestMnodeBasic4.test_mnode_basic4","title":"","text":"Summary: mnode basic 4                    Description: 1. - Path:                        cases/19-ManageNodes/02-Mnode/test_mnode_basic4.py"},{"location":"case_list_docs/ManageNodes/Mnode/#19-ManageNodes.02-Mnode.test_mnode_basic5.TestMnodeBasic5.test_mnode_basic5","title":"","text":"Summary: mnode basic 5                    Description: 1. - Path:                        cases/19-ManageNodes/02-Mnode/test_mnode_basic5.py"},{"location":"case_list_docs/ManageNodes/Mnode/#19-ManageNodes.02-Mnode.test_mnode_basic6.TestMnodeBasic6.test_mnode_basic6","title":"","text":"Summary: mnode basic 6                    Description: 1. - Path:                        cases/19-ManageNodes/02-Mnode/test_mnode_basic6.py"},{"location":"case_list_docs/ManageNodes/Qnode/","title":"03-Qnode","text":""},{"location":"case_list_docs/ManageNodes/Qnode/#19-ManageNodes.03-Qnode.test_qnode_basic1.TestQnodeBasic1.test_qnode_basic1","title":"","text":"Summary: qnode basic 1                    Description: 1. - Path:                        cases/19-ManageNodes/03-Qnode/test_qnode_basic1.py"},{"location":"case_list_docs/ManageNodes/Snode/","title":"04-Snode","text":""},{"location":"case_list_docs/ManageNodes/Snode/#19-ManageNodes.04-Snode.test_snode_basic1.TestSnodeBasic1.test_snode_basic1","title":"","text":"Summary: snode basic 1                    Description: 1. - Path:                        cases/19-ManageNodes/04-Snode/test_snode_basic1.py"},{"location":"case_list_docs/Others/Valgrind/","title":"01-Valgrind","text":""},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_basic1.TestValgrindBasic1.test_valgrind_basic1","title":"","text":"Summary: valgrind basic 1                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_basic1.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_basic2.TestValgrindBasic2.test_valgrind_basic2","title":"","text":"Summary: valgrind basic 2                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_basic2.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_basic3.TestValgrindBasic3.test_valgrind_basic3","title":"","text":"Summary: valgrind basic 3                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_basic3.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_basic4.TestValgrindBasic4.test_valgrind_basic4","title":"","text":"Summary: valgrind basic 4                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_basic4.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror1.TestValgrindCheckError1.test_valgrind_check_error1","title":"","text":"Summary: valgrind check error 1                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror1.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror2.TestValgrindCheckError2.test_valgrind_check_error2","title":"","text":"Summary: valgrind check error 2                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror2.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror3.TestValgrindCheckError3.test_valgrind_check_error3","title":"","text":"Summary: valgrind check error 3                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror3.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror4.TestValgrindCheckError4.test_valgrind_check_error4","title":"","text":"Summary: valgrind check error 4                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror4.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror5.TestValgrindCheckError5.test_valgrind_check_error5","title":"","text":"Summary: valgrind check error 5                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror5.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror6.TestValgrindCheckError6.test_valgrind_check_error6","title":"","text":"Summary: valgrind check error 6                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror6.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror7.TestValgrindCheckError7.test_valgrind_check_error7","title":"","text":"Summary: valgrind check error 7                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror7.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_checkerror8.TestValgrindCheckError8.test_valgrind_check_error8","title":"","text":"Summary: valgrind check error 8                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_checkerror8.py"},{"location":"case_list_docs/Others/Valgrind/#50-Others.01-Valgrind.test_valgrind_udf.TestValgrindUdf.test_valgrind_udf","title":"","text":"Summary: valgrind udf                    Description: 1. - Path:                        cases/50-Others/01-Valgrind/test_valgrind_udf.py"},{"location":"case_list_docs/SuperTables/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/SuperTables/Alter/#04-SuperTables.03-Alter.test_stable_alter_basic.TestStableAlterBasic.test_stable_alter_basic","title":"","text":"Summary: Alter: basic                    Description: 1. Add Modify Drop Column 2. Add Modify Drop Rename Tag 3. Alter Comment Path:                        cases/04-SuperTables/03-Alter/test_stable_alter_basic.py"},{"location":"case_list_docs/SuperTables/Alter/#04-SuperTables.03-Alter.test_stable_alter_tag.TestStableAlterTag.test_stable_alter_tag","title":"","text":"Summary: Alter: Tag                    Description: 1. Create a super table 2. Create a child table and insert data 3. Add a tag column and verify that it takes effect 4. Query using the newly added tag value 5. Repeat the same operations for Drop, Modify, and Rename Tag 6. Restart and verify that all modifications remain effective Path:                        cases/04-SuperTables/03-Alter/test_stable_alter_tag.py"},{"location":"case_list_docs/SuperTables/Alter/#04-SuperTables.03-Alter.test_stable_alter_write_data.TestStableAlterThenWriteData.test_stable_alter_then_write_data","title":"","text":"Summary: Alter: then write data                    Description: 1. Create a table and insert data 2. Alter the table and insert data 3. Alter the table and insert expired data 4. Repeat the above operations 5. Restart and verify that all data remains intact Path:                        cases/04-SuperTables/03-Alter/test_stable_alter_write_data.py"},{"location":"case_list_docs/SuperTables/Create/","title":"01-Create","text":""},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_create_basic.TestStableCreateMt.test_stable_create_mt","title":"","text":"Summary: Name: basic                    Description: 1. Attempt to create stables with invalid table names, column names, and invalid data types 2. Create a super table containing multiple tag types 3. Create child tables and insert data 4. Query using tags Path:                        cases/04-SuperTables/01-Create/test_stable_create_basic.py"},{"location":"case_list_docs/SuperTables/Drop/","title":"02-Drop","text":""},{"location":"case_list_docs/SuperTables/Drop/#04-SuperTables.02-Drop.test_stable_drop_basic.TestStableDropBasic.test_stable_drop_basic","title":"","text":"Summary: Drop: basic                    Description: 1. Create a super table 2. Create a child table 3. Create a normal table 4. Insert data 5. Drop the super table Path:                        cases/04-SuperTables/02-Drop/test_stable_drop_basic.py"},{"location":"case_list_docs/SuperTables/Drop/#04-SuperTables.02-Drop.test_stable_drop_repeat.TestStableDropRepeat.test_stable_drop_repeat","title":"","text":"Summary: Drop: repeatedly                    Description: 1. Create a super table. 2. Create child tables and insert data. 3. Drop the super table. 4. Repeat the above 30 times with the same super-table name. Path:                        cases/04-SuperTables/02-Drop/test_stable_drop_repeat.py"},{"location":"case_list_docs/SuperTables/Query/","title":"04-Query","text":""},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_column_datatypes.TestStableQueryColumnDatatypes.test_stable_query_column_datatypes","title":"","text":"Summary: Query: column datatypes                    Description: 1. Create a super table containing 1 data column and 1 tag column 2. With data column data types: bool, smallint, tinyint, int, bigint, unsigned bigint, float, double, binary 3. Create child tables and insert data 4. Execute queries on the super table with filtering conditions based on regular data columns, including: Projection queries, Aggregate queries, Group-by queries Path:                        cases/04-SuperTables/04-Query/test_stable_query_column_datatypes.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_column_filter.TestStableQueryColumnFilter.test_stable_query_column_filter","title":"","text":"Summary: Query: column filter                    Description: 1. Create a super table containing multiple data columns and tags (2-6 fields) 2. Create child tables and insert data 3. Execute queries on the super table with filtering conditions based on regular data columns, including:     Projection queries     Aggregate queries     Group-by queries 4.  Path:                        cases/04-SuperTables/04-Query/test_stable_query_column_filter.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_during_leader_election.TestSelectDuringLeaderElection.test_select_during_leader_election","title":"","text":"Summary: Query: during leader election                    Description: 1. Create 3 dnodes 2. Create db with 10 vgroups 3 replications 2. Create supper table and sub table 3. Stop one of the dnodes with leader vnode on it 4. Select data from super table, it should be success Path:                        cases/04-SuperTables/04-Query/test_stable_query_during_leader_election.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_from_dnodes.TestStableQueryFromDnodes.test_stable_query_from_dnodes","title":"","text":"Summary: Query: from dnodes                    Description: 1. Create a super table distributed across multiple dnodes and vnodes 2. Insert data and query the results 3. Perform partitioned queries using PARTITION BY 4. Check query results when data is distributed across different vnodes, memory, and disk 5. Restart all nodes and verify the computation results Path:                        cases/04-SuperTables/04-Query/test_stable_query_from_dnodes.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_tag_datatypes.TestStableQueryTagDatatypes.test_stable_query_tag_datatypes","title":"","text":"Summary: Query: tag datatypes                    Description: 1. Create a super table containing 1 data column and 1 tag column 2. With tag column data types: bool, smallint, tinyint, int, bigint, unsigned bigint, float, double, binary 3. Create child tables and insert data 4. Execute queries on the super table with filtering conditions based on regular data columns, including: Projection queries, Aggregate queries, Group-by queries Path:                        cases/04-SuperTables/04-Query/test_stable_query_tag_datatypes.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_tag_filter.TestStableQueryTagFilter.test_stable_query_tag_filter","title":"","text":"Summary: Query: tag filter                    Description: 1. Create a super table containing multiple data columns and tags (1-6 fields) 2. Create child tables and insert data 3. Execute queries on the super table with filtering conditions based on regular data columns, including:     Projection queries     Aggregate queries     Group-by queries Path:                        cases/04-SuperTables/04-Query/test_stable_query_tag_filter.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_tbname_filter.TestStableQueryTbnameFilter.test_stable_query_tbname_filter","title":"","text":"Summary: Query: tbname filter                    Description: 1. Create a super table 2. Create child tables and insert data 3. Execute the following query operations on the super table using tbname INconditions:\u2022 Projection queries (column selection)\u2022 Aggregate queries (COUNT/SUM/AVG/MIN/MAX)\u2022 Grouping queries (GROUP BY with HAVING) Path:                        cases/04-SuperTables/04-Query/test_stable_query_tbname_filter.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_1.TestNormalTableAlter1.test_normal_table_alter_1","title":"","text":"Summary: Alter: then desc                    Description: 1. ALTER TABLE \u2026 ADD/DROP/MODIFY columns 2. DESCRIBE each change to confirm 3. Restart the database 4. Resume ADD/DROP/MODIFY operations and verify again Path:                        cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_1.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_2.TestNormalTableAlter2.test_normal_table_alter_2","title":"","text":"Summary: Alter: then insert                    Description: 1. Execute ADD COLUMN, DROP COLUMN, MODIFY COLUMN operations. 2. Insert data and run SELECT COUNT queries to verify. 3. Restart the database. 4. Continue modifying columns and verify the changes. Path:                        cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_2.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_3.TestNormalTableAlter3.test_normal_table_alter_3","title":"","text":"Summary: Alter: import old data                    Description: 1. Add column 2. Insert out-of-order data 3. Query data Path:                        cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_3.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_4.TestNormalTableAlter4.test_normal_table_alter_4","title":"","text":"Summary: Alter: repeatedly add                    Description: 1. Add column 2. Insert data 3. Project query 4. Loop for 7 times 5. Kill then restart Path:                        cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_4.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_5.TestNormalTableAlter5.test_normal_table_alter_5","title":"","text":"Summary: Alter: repeatedly drop                    Description: 1. Drop column 2. Insert data 3. Project query 4. Loop for 7 times 5. Kill then restart Path:                        cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_5.py"},{"location":"case_list_docs/Tables/NormalTables/Create/","title":"01-Create","text":""},{"location":"case_list_docs/Tables/NormalTables/Create/#03-Tables.01-NormalTables.01-Create.test_normaltable_column_limit.TestNormalTableColumnNumLimit.test_normal_table_column_num_limit","title":"","text":"Summary: Column num limit                    Description: 1. Create normal table 2. Add or delete columns 3. Check column count, the count should not exceed 4096 Path:                        cases/03-Tables/01-NormalTables/01-Create/test_normaltable_column_limit.py"},{"location":"case_list_docs/Tables/NormalTables/Create/#03-Tables.01-NormalTables.01-Create.test_normaltable_datatypes.TestNormalTableDatatypes.test_normal_table_datatypes","title":"","text":"Summary: Datatypes                    Description: 1. Create a normal table containing bigint, binary, bool, double, float, int, smallint, tinyint types 2. Write data 3. Perform a projection query, including an order by condition Path:                        cases/03-Tables/01-NormalTables/01-Create/test_normaltable_datatypes.py"},{"location":"case_list_docs/Tables/NormalTables/Create/#03-Tables.01-NormalTables.01-Create.test_normaltable_synatx.TestNormalTableSynatx.test_normal_table_synatx","title":"","text":"Summary: Synatx                    Description: 1. Attempt to create tables with invalid table names 2. Attempt to create tables with invalid column names 3. Attempt to create tables with invalid data types 4. Create normal tables with valid and invalid names Path:                        cases/03-Tables/01-NormalTables/01-Create/test_normaltable_synatx.py"},{"location":"case_list_docs/Tables/NormalTables/Drop/","title":"02-Drop","text":""},{"location":"case_list_docs/Tables/NormalTables/Drop/#03-Tables.01-NormalTables.02-Drop.test_normaltable_delete_reuse1.TestNormalTableDeleteReuse2.test_normal_table_delete_reuse2","title":"","text":"Summary: Repeatedly drop 2                    Description: 1. Create a normal table (same name) 2. Insert data  3. Query data 4. Repeat 20 timeses Path:                        cases/03-Tables/01-NormalTables/02-Drop/test_normaltable_delete_reuse1.py"},{"location":"case_list_docs/Tables/NormalTables/Drop/#03-Tables.01-NormalTables.02-Drop.test_normaltable_delete_reuse2.TestNormalTableDeleteReuse2.test_normal_table_delete_reuse2","title":"","text":"Summary: Repeatedly drop 2                    Description: 1. Create a normal table (new name) 2. Insert data  3. Query data 4. Repeat 20 timeses Path:                        cases/03-Tables/01-NormalTables/02-Drop/test_normaltable_delete_reuse2.py"},{"location":"case_list_docs/Tables/NormalTables/Drop/#03-Tables.01-NormalTables.02-Drop.test_normaltable_delete_writing.TestNormalTableDeleteWriting.test_normal_table_delete_writing","title":"","text":"Summary: Repeatedly drop 3                    Description: 1. Create a background process that continuously writes data 2. Create a normal table 3. Insert data  4. Query data 5. Repeat 20 timeses Path:                        cases/03-Tables/01-NormalTables/02-Drop/test_normaltable_delete_writing.py"},{"location":"case_list_docs/Tables/NormalTables/Query/","title":"04-Query","text":""},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_after_drop.TestNormalTableDrop.test_normal_table_drop","title":"","text":"Summary: Query: after drop                    Description: 1. Create a table \u2192 insert one record \u2192 query that record \u2192 repeat this sequence 8 times 2. Drop all created tables 3. Repeat 1 times Path:                        cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_after_drop.py"},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_aggregate.TestNormalTableAggregate.test_normal_table_aggregate","title":"","text":"Summary: Query: aggregate                    Description: 1. Create a table with 256 columns 2. Insert data 3. Execute projection queries 4. Execute filter queries 5. Execute aggregate queries 6. Kill the process and restart the database Path:                        cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_aggregate.py"},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_composite.TestCompositeKeyLoad.test_composite_key_load","title":"","text":"Summary: Query: composite key                    Description: Error Reading Composite Key Data from Memory and STT Files Root Cause: The minKeyused a shallow copy. During backward iteration in STT, this accidentally modified the minKeyvalue. When merging keys from memory and STT, inconsistent key states caused data corruption. Reproduction Steps: 1. Create table with timestamp column and composite key string column. Insert 4 records into STT files and 1 record into memory. 2. Execute query \u2192 Trigger failure Path:                        cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_composite.py"},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_filter.TestNormalTableQuery.test_normal_table_query","title":"","text":"Summary: Query: filter                    Description: 1. Create a normal table 2. Insert data 3. Execute projection queries 4. Execute aggregate queries 5. Execute field filtering queries Path:                        cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_filter.py"},{"location":"case_list_docs/Tables/SubTables/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/Tables/SubTables/Create/","title":"01-Create","text":""},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_bigint.TestDatatypeBigInt.test_datatype_bigint","title":"","text":"Summary: DataTypes: bigint                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_bigint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_blob.TestDatatypeBlob.test_datatype_blob","title":"","text":"Summary: DataTypes: blob                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_blob.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_bool.TestDatatypeBool.test_datatype_bool","title":"","text":"Summary: DataTypes: bool                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_bool.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_decimal.TestDatatypeDecimal.test_datatype_decimal","title":"","text":"Summary: DataTypes: decimal                    Description: test decimal types filtering with tag conditions crash fix Path:                        cases/01-DataTypes/test_datatype_decimal.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_double.TestDatatypeDouble.test_datatype_double","title":"","text":"Summary: DataTypes: double                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_double.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_float.TestDatatypeFloat.test_datatype_float","title":"","text":"Summary: DataTypes: float                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_float.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_geometry.TestDatatypeGeometry.test_datatype_geometry","title":"","text":"Summary: DataTypes: geometry                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_geometry.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_int.TestDatatypeInt.test_datatype_int","title":"","text":"Summary: DataTypes: int                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_int.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_json.TestDatatypeJson.test_datatype_json","title":"","text":"Summary: DataTypes: json                    Description: 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_json.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_nchar1.TestDatatypeNchar.test_datatype_nchar","title":"","text":"Summary: DataTypes: nchar                    Description: 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_nchar1.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_nchar2.TestNChar.test_nchar","title":"","text":"Summary: DataTypes: nchar (Chinese)                    Description: 1. Create table 2. Insert data 3. Query data Path:                        cases/01-DataTypes/test_datatype_nchar2.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_smallint.TestDatatypeSmallint.test_datatype_smallint","title":"","text":"Summary: DataTypes: smallint                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_smallint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_timestamp.TestDatatypeTimestamp.test_datatype_timestamp","title":"","text":"Summary: DataTypes: timestamp                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_timestamp.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_tinyint.TestDatatypeTinyint.test_datatype_tinyint","title":"","text":"Summary: DataTypes: tinyint                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_tinyint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_uint.TestDatatypeUint.test_datatype_uint","title":"","text":"Summary: DataTypes: unsigned int                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_uint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_unsign.TestDatatypeUnsigned.test_datatype_unsigned","title":"","text":"Summary: DataTypes: unsigned numeric                    Description: 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_unsign.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_varbinary.TestDatatypeVarbinary.test_datatype_varbinary","title":"","text":"Summary: DataTypes: varbinary                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_varbinary.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_varchar.TestDatatypeVarchar.test_datatype_varchar","title":"","text":"Summary: DataTypes: varchar                    Description: 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input Path:                        cases/01-DataTypes/test_datatype_varchar.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_null_column.TestNullColumn.test_null_column","title":"","text":"Summary: NULL: column                    Description: 1. Create table 2. Insert data with NULL 3. Query data Path:                        cases/01-DataTypes/test_null_column.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_null_tag.TestNullTag.test_null_tag","title":"","text":"Summary: NULL: tag                    Description: 1. Create table with NULL tags 2. Select tags 3. Alter tags Path:                        cases/01-DataTypes/test_null_tag.py"},{"location":"case_list_docs/Tables/SubTables/Query/","title":"04-Query","text":""},{"location":"case_list_docs/TimeSeriesExtensions/CountWindow/","title":"07-CountWindow","text":""},{"location":"case_list_docs/TimeSeriesExtensions/CountWindow/#11-TimeSeriesExtensions.07-CountWindow.test_count.TestCount.test_count","title":"","text":"Summary: Count Window                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/07-CountWindow/test_count.py"},{"location":"case_list_docs/TimeSeriesExtensions/CountWindow/#11-TimeSeriesExtensions.07-CountWindow.test_count1.TestCount.test_count","title":"","text":"Summary: Count Window                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/07-CountWindow/test_count1.py"},{"location":"case_list_docs/TimeSeriesExtensions/CountWindow/#11-TimeSeriesExtensions.07-CountWindow.test_count_sliding.TestCountSliding.test_count_sliding","title":"","text":"Summary: Count Window                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/07-CountWindow/test_count_sliding.py"},{"location":"case_list_docs/TimeSeriesExtensions/EventWindow/","title":"05-EventWindow","text":""},{"location":"case_list_docs/TimeSeriesExtensions/EventWindow/#11-TimeSeriesExtensions.05-EventWindow.test_event.TestEvent.test_event","title":"","text":"Summary: Event                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/05-EventWindow/test_event.py"},{"location":"case_list_docs/TimeSeriesExtensions/Fill/","title":"02-Fill","text":""},{"location":"case_list_docs/TimeSeriesExtensions/Fill/#11-TimeSeriesExtensions.02-Fill.test_fill.TestFill.test_fill","title":"","text":"Summary: Fill                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/02-Fill/test_fill.py"},{"location":"case_list_docs/TimeSeriesExtensions/Fill/#11-TimeSeriesExtensions.02-Fill.test_fill_force.TestFillForce.test_fill_force","title":"","text":"Summary: Fill Force                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/02-Fill/test_fill_force.py"},{"location":"case_list_docs/TimeSeriesExtensions/Fill/#11-TimeSeriesExtensions.02-Fill.test_fill_stb.TestFillStb.test_fill_stb","title":"","text":"Summary: Fill Stb                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/02-Fill/test_fill_stb.py"},{"location":"case_list_docs/TimeSeriesExtensions/Fill/#11-TimeSeriesExtensions.02-Fill.test_fill_us.TestFillUs.test_fill_us","title":"","text":"Summary: Fill Us                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/02-Fill/test_fill_us.py"},{"location":"case_list_docs/TimeSeriesExtensions/PartitionBy/","title":"01-PartitionBy","text":""},{"location":"case_list_docs/TimeSeriesExtensions/PartitionBy/#11-TimeSeriesExtensions.01-PartitionBy.test_partitonby.TestPartitonBy.test_partitionby","title":"","text":"Summary: Partition By                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/01-PartitionBy/test_partitonby.py"},{"location":"case_list_docs/TimeSeriesExtensions/SessionWindow/","title":"06-SessionWindow","text":""},{"location":"case_list_docs/TimeSeriesExtensions/SessionWindow/#11-TimeSeriesExtensions.06-SessionWindow.test_session.TestSession.test_session","title":"","text":"Summary: Session Window                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/06-SessionWindow/test_session.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/","title":"03-TimeWindow","text":""},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval.TestInterval.test_interval","title":"","text":"Summary: \u65f6\u95f4\u7a97\u53e3\u57fa\u672c\u67e5\u8be2                    Description: 1. \u521b\u5efa\u5305\u542b\u4e00\u4e2a Int \u666e\u901a\u6570\u636e\u5217\u7684\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5728 1m \u7a97\u53e3\u5185\u8fdb\u884c count/avg/max/min 4. \u589e\u52a0\u65f6\u95f4\u6233\u7b5b\u9009\u548c Fill \u5b57\u53e5\u67e5\u8be2 Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval2.TestInterval2.test_interval2","title":"","text":"Summary: \u65f6\u95f4\u7a97\u53e3\u57fa\u672c\u67e5\u8be2                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval2.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval_bug.TestInterval.test_interval","title":"","text":"Summary: \u65f6\u95f4\u7a97\u53e3\u586b\u5145 1y \u7684\u6545\u969c                    Description: 1. \u521b\u5efa\u4e00\u4e2a\u7279\u5b9a\u9009\u9879\u7684\u6570\u636e 2. \u521b\u5efa\u8d85\u7ea7\u8868\u3001\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u5199\u5165\u4ec5\u4e00\u6761\u6570\u636e 4. \u8fdb\u884c 1y \u7684\u65f6\u95f4\u7a97\u53e3\u67e5\u8be2 Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval_bug.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval_diff_tz.TestIntervalDiffTz.test_interval_diff_tz","title":"","text":"Summary: test interval using diff tz                    Description: test interval with client and server using different timezone Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval_diff_tz.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval_empty_range.TestIntervalEmptyRange.test_interval_empty_range","title":"","text":"Summary: interval function                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval_empty_range.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval_empty_range_scl.TestIntervalEmptyRangeScl.test_interval_empty_range_scl","title":"","text":"Summary: interval function                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval_empty_range_scl.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval_function.TestIntervalFunction.test_interval_function","title":"","text":"Summary: interval function                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval_function.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval_more.TestIntervalMore.test_query_interval","title":"","text":"Summary: test interval query                    Description: test interval query Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval_more.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_interval_offset.TestInterval.test_interval_offset","title":"","text":"Summary: interval offset                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_interval_offset.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_sliding.TestSliding.test_sliding","title":"","text":"Summary: Sliding                    Description: 1. - Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_sliding.py"},{"location":"case_list_docs/TimeSeriesExtensions/TimeWindow/#11-TimeSeriesExtensions.03-TimeWindow.test_ts5400.TestTs5400.test_ts5400","title":"","text":"Summary: test interval query when ts = 0 error fix                    Description: test interval query when ts = 0 error fix Path:                        cases/11-TimeSeriesExtensions/03-TimeWindow/test_ts5400.py"},{"location":"util_funcs_docs/new_test_framework/utils/","title":"utils","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__","title":"<code>__init__</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.BeforeTest","title":"<code>BeforeTest</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.BeforeTest.create_database","title":"create_database(request, db_name, host, port)","text":"<p>\u521b\u5efamodule\u7ea7\u522b\u7684\u6570\u636e\u5e93</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.BeforeTest.deploy_taos","title":"deploy_taos(yaml_file, mnodes_num=1, clean=False)","text":"<p>get env directory from request; use yaml file for taostest run;</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterComCheck","title":"<code>ClusterComCheck</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterComCheck.check_vgroups_status","title":"check_vgroups_status(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>check vgroups status in 10s after db vgroups status is changed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterComCheck.check_vgroups_status_with_offline","title":"check_vgroups_status_with_offline(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>n nodes cluster, 3 replica database return 1, n leaders, stable status return 2, 0 &lt; num of leader &lt; n, stable status return 0, no leader, stable status return -1, Elections not yet completed, unstable status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterDnodes","title":"<code>ClusterDnodes</code>","text":"<p>rewrite TDDnodes and make MyDdnodes as TDDnodes child class</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ColorFormatter","title":"<code>ColorFormatter</code>","text":"<p>\u81ea\u5b9a\u4e49\u5e26\u989c\u8272\u7684\u65e5\u5fd7\u683c\u5f0f\u5316\u5668</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.CompatibilityBase","title":"<code>CompatibilityBase</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.CompatibilityBase.alter_string_in_file","title":"alter_string_in_file(file, old_str, new_str)","text":"<p>replace str in file :param file :param old_str :param new_str :return:</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ConfigureyCluster","title":"<code>ConfigureyCluster</code>","text":"<p>This will create defined number of dnodes and create a cluster. at the same time, it will return TDDnodes list:  dnodes,</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil","title":"<code>MqttUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkQos","title":"checkQos(expectedQos, show=False)","text":"<p>Checks if the qos fetched by the last subscription matches the expected qos.</p> <p>Parameters:</p> Name Type Description Default <code>expectedQos</code> <code>int</code> <p>The expected qos.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the qos matches the expected qos, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of qos does not match the expected qos.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last subscription matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last sub.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last sub.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem","title":"<code>StreamItem</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.addQuerySqlCase","title":"addQuerySqlCase(query_sql_case)","text":"<p>\u6dfb\u52a0\u67e5\u8be2SQL\u7528\u4f8b</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.awaitResultHasRows","title":"awaitResultHasRows(waitSeconds=60)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u5df2\u6709\u7ed3\u679c\uff0c\u4e0d\u786e\u8ba4\u6700\u7ec8\u7ed3\u679c\u884c\u6570\u65f6\u4f7f\u7528</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.awaitRowStability","title":"awaitRowStability(stable_rows, waitSeconds=120)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u7ed3\u679c\u7684\u884c\u6570\u4e0e\u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570\u4e00\u81f4 :param stable_rows: int, \u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.setResultFile","title":"setResultFile(file)","text":"<p>\u8bbe\u7f6e\u7ed3\u679c\u6587\u4ef6\u8def\u5f84</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.set_exp_query_param_mapping","title":"set_exp_query_param_mapping(mapping)","text":"<p>\u8bbe\u7f6e\u53c2\u6570\u540d\u4e0e\u5217\u7d22\u5f15\u7684\u6620\u5c04\uff0c\u4f8b\u5982 {\"_wstart\": 0, \"_wend\": 1}</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable","title":"<code>StreamTable</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.__delete_data","title":"__delete_data(full_table_name, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u8303\u56f4\u5185\u7684\u6570\u636e</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.appendSubTables","title":"appendSubTables(startTbIndex, endTbIndex)","text":"<p>\u5411\u8d85\u7ea7\u8868\u4e2d\u8ffd\u52a0\u5b50\u8868 :param startTbIndex: int, \u8d77\u59cb\u5b50\u8868\u7d22\u5f15 :param endTbIndex: int, \u7ed3\u675f\u5b50\u8868\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.append_data","title":"append_data(start_row, end_row)","text":"<p>\u5411\u8868\u4e2d\u8ffd\u52a0\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.append_subtable_data","title":"append_subtable_data(tbName, start_row, end_row)","text":"<p>\u5411\u6307\u5b9a\u5b50\u8868\u8ffd\u52a0\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.delete_data","title":"delete_data(start_row, end_row)","text":"<p>\u5220\u9664\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.delete_subtable_data","title":"delete_subtable_data(tbName, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.register_column_generator","title":"register_column_generator(column_name, generator_func)","text":"<p>\u6ce8\u518c\u67d0\u4e2a\u5217\u540d\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u751f\u6210\u51fd\u6570 :param column_name: str, \u5217\u540d :param generator_func: function(row_index: int, timestamp: int) -&gt; str</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.reset_columns","title":"reset_columns()","text":"<p>\u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u5217\u5b9a\u4e49</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setInterval","title":"setInterval(interval)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u95f4\u9694 :param interval: int, \u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u4e3a\u79d2</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setLogOpen","title":"setLogOpen(logOpen)","text":"<p>\u8bbe\u7f6e\u65e5\u5fd7\u5f00\u5173 :param logOpen: bool, \u662f\u5426\u5f00\u542f\u65e5\u5fd7</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setPrecision","title":"setPrecision(precision)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u7cbe\u5ea6 :param precision: str, \u65f6\u95f4\u7cbe\u5ea6\uff0c\u652f\u6301 \"ms\", \"us\", \"ns\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setStart","title":"setStart(start)","text":"<p>\u8bbe\u7f6e\u8d77\u59cb\u65f6\u95f4 :param start: str, \u8d77\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3a \"YYYY-MM-DD HH.MM.SS\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.set_columns","title":"set_columns(column_def)","text":"<p>\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u5217\u5b9a\u4e49 :param column_def: str\uff0c\u4f8b\u5982 \"ts timestamp, val int\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.update_data","title":"update_data(start_row, end_row)","text":"<p>\u66f4\u65b0\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.update_subtable_data","title":"update_subtable_data(tbName, start_row, end_row)","text":"<p>\u66f4\u65b0\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom","title":"<code>TDCom</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cal_watermark_window_close_interval_endts","title":"cal_watermark_window_close_interval_endts(start_ts, interval, watermark=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>interval</code> <code>int</code> <p>[s]</p> required <code>watermark</code> <code>int</code> <p>[s]. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cal_watermark_window_close_session_endts","title":"cal_watermark_window_close_session_endts(start_ts, watermark=None, session=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>watermark</code> <code>int</code> <p>session. Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>as followed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cast_query_data","title":"cast_query_data(query_data)","text":"<p>cast query-result for existed-stb</p> <p>Parameters:</p> Name Type Description Default <code>query_data</code> <code>list</code> <p>query data list</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>new list after cast</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_query_data","title":"check_query_data(sql1, sql2, sorted=False, fill_value=None, tag_value_list=None, defined_tag_count=None, partition=True, use_exist_stb=False, subtable=None, reverse_check=False)","text":"<p>confirm query result</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ....</p> required <code>sql2</code> <code>str</code> <p>select ....</p> required <code>sorted</code> <code>bool</code> <p>if sort result list. Defaults to False.</p> <code>False</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>tag_value_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>defined_tag_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>partition</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>use_exist_stb</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>subtable</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>reverse_check</code> <code>bool</code> <p>not equal. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream","title":"check_stream(sql1, sql2, expected_count, max_delay=None)","text":"<p>confirm stream</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ...</p> required <code>sql2</code> <code>str</code> <p>select ...</p> required <code>expected_count</code> <code>int</code> <p>expected_count</p> required <code>max_delay</code> <code>int</code> <p>max_delay value. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream_field_type","title":"check_stream_field_type(sql, input_function)","text":"<p>confirm stream field</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>input sql</p> required <code>input_function</code> <code>str</code> <p>scalar</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream_res","title":"check_stream_res(sql, expected_res, max_delay)","text":"<p>confirm stream result</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>select ...</p> required <code>expected_res</code> <code>str</code> <p>expected result</p> required <code>max_delay</code> <code>int</code> <p>max_delay value</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream_task_status","title":"check_stream_task_status(stream_name, vgroups, stream_timeout=0, check_wal_info=True)","text":"<p>check stream status</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>vgroups</code> <code>int</code> <p>vgroups</p> required <p>Returns:     str: status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cleanTb","title":"cleanTb(type='taosc', dbname='db')","text":"<p>type is taosc or restful</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.clean_env","title":"clean_env()","text":"<p>drop all streams and databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.create_old_stream","title":"create_old_stream(stream_name, des_table, source_sql, trigger_mode=None, watermark=None, max_delay=None, ignore_expired=None, ignore_update=None, subtable_value=None, fill_value=None, fill_history_value=None, stb_field_name_value=None, tag_value=None, use_exist_stb=False, use_except=False)","text":"<p>create_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target stable</p> required <code>source_sql</code> <code>str</code> <p>stream sql</p> required <code>trigger_mode</code> <code>str</code> <p>at_once/window_close/max_delay. Defaults to None.</p> <code>None</code> <code>watermark</code> <code>str</code> <p>watermark time. Defaults to None.</p> <code>None</code> <code>max_delay</code> <code>str</code> <p>max_delay time. Defaults to None.</p> <code>None</code> <code>ignore_expired</code> <code>int</code> <p>ignore expired data. Defaults to None.</p> <code>None</code> <code>ignore_update</code> <code>int</code> <p>ignore update data. Defaults to None.</p> <code>None</code> <code>subtable_value</code> <code>str</code> <p>subtable. Defaults to None.</p> <code>None</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>fill_history_value</code> <code>int</code> <p>0/1. Defaults to None.</p> <code>None</code> <code>stb_field_name_value</code> <code>str</code> <p>existed stb. Defaults to None.</p> <code>None</code> <code>tag_value</code> <code>str</code> <p>custom tag. Defaults to None.</p> <code>None</code> <code>use_exist_stb</code> <code>bool</code> <p>use existed stb tag. Defaults to False.</p> <code>False</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.create_snode_if_not_exists","title":"create_snode_if_not_exists(dnode_id=1)","text":"<p>Create snode if not exists</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode exists or created successfully, False if creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.create_stream","title":"create_stream(stream_name, des_table=None, source_sql=None, trigger_table=None, trigger_type=None, from_table=None, partition_by=None, stream_options=None, notification_definition=None, output_subtable=None, columns=None, tags=None, if_not_exists=True, db_name=None, use_except=False)","text":"<p>create_stream with new syntax</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target table. Defaults to None.</p> <code>None</code> <code>source_sql</code> <code>str</code> <p>subquery. Defaults to None.</p> <code>None</code> <code>trigger_table</code> <code>str</code> <p>trigger table name. Defaults to None.</p> <code>None</code> <code>trigger_type</code> <code>str</code> <p>SESSION/STATE_WINDOW/INTERVAL/EVENT_WINDOW/COUNT_WINDOW/PERIOD. Defaults to None.</p> <code>None</code> <code>from_table</code> <code>str</code> <p>source table name. Defaults to None.</p> <code>None</code> <code>partition_by</code> <code>str</code> <p>partition columns. Defaults to None.</p> <code>None</code> <code>stream_options</code> <code>str</code> <p>stream options. Defaults to None.</p> <code>None</code> <code>notification_definition</code> <code>str</code> <p>notification settings. Defaults to None.</p> <code>None</code> <code>output_subtable</code> <code>str</code> <p>subtable expression. Defaults to None.</p> <code>None</code> <code>columns</code> <code>str</code> <p>column definitions. Defaults to None.</p> <code>None</code> <code>tags</code> <code>str</code> <p>tag definitions. Defaults to None.</p> <code>None</code> <code>if_not_exists</code> <code>bool</code> <p>if not exists flag. Defaults to True.</p> <code>True</code> <code>db_name</code> <code>str</code> <p>database name. Defaults to None.</p> <code>None</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream SQL if use_except=True, None otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_all_db","title":"drop_all_db()","text":"<p>drop all databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_all_streams","title":"drop_all_streams()","text":"<p>drop all streams from all user databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_db","title":"drop_db(dbname='test')","text":"<p>drop a db</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_snode","title":"drop_snode(snode_id=None)","text":"<p>Drop snode</p> <p>Parameters:</p> Name Type Description Default <code>snode_id</code> <code>int</code> <p>Specific snode ID to drop. If None, drops all snodes.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if successful, False otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.ensure_snode_ready","title":"ensure_snode_ready(dnode_id=1, timeout=30)","text":"<p>Ensure snode is created and ready</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>Maximum wait time in seconds. Defaults to 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode is ready, False if timeout or creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.float_handle","title":"float_handle(input_list)","text":"<p>float list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>float list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.genTs","title":"genTs(precision='ms', ts='', protype='taosc', ns_tag=None)","text":"<p>generate ts</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>str</code> <p>db precision. Defaults to \"ms\".</p> <code>'ms'</code> <code>ts</code> <code>str</code> <p>input ts. Defaults to \"\".</p> <code>''</code> <code>protype</code> <code>str</code> <p>\"taosc\" or \"restful\". Defaults to \"taosc\".</p> <code>'taosc'</code> <code>ns_tag</code> <code>_type_</code> <p>use ns. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>timestamp, datetime: timestamp and datetime</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.gen_tag_col_str","title":"gen_tag_col_str(gen_type, data_type, count)","text":"<p>gen multi tags or cols by gen_type</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.getLongName","title":"getLongName(len, mode='mixed')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.get_long_name","title":"get_long_name(length=10, mode='letters')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.get_timestamp_n_days_later","title":"get_timestamp_n_days_later(n=30)","text":"<p>Get the timestamp of a date n days later from the current date.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of days to add to the current date. Default is 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>int</code> <p>Timestamp of the date n days later, in milliseconds.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.pause_stream","title":"pause_stream(stream_name, if_exist=True, if_not_exist=False)","text":"<p>pause_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.prepare_data","title":"prepare_data(interval=None, watermark=None, session=None, state_window=None, state_window_max=127, interation=3, range_count=None, precision='ms', fill_history_value=0, ext_stb=None, custom_col_index=None, col_value_type='random')","text":"<p>prepare stream data</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>watermark</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>state_window</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>state_window_max</code> <code>int</code> <p>Defaults to 127.</p> <code>127</code> <code>interation</code> <code>int</code> <p>Defaults to 3.</p> <code>3</code> <code>range_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>precision</code> <code>str</code> <p>Defaults to \"ms\".</p> <code>'ms'</code> <code>fill_history_value</code> <code>int</code> <p>Defaults to 0.</p> <code>0</code> <code>ext_stb</code> <code>bool</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.resume_stream","title":"resume_stream(stream_name, if_exist=True, if_not_exist=False, ignore_untreated=False)","text":"<p>resume_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>ignore_untreated</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.round_handle","title":"round_handle(input_list)","text":"<p>round list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>round list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screateDb","title":"screateDb(dbname='test', drop_db=True, **kwargs)","text":"<p>create database</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code> <code>drop_db</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screate_ctable","title":"screate_ctable(dbname=None, stbname=None, ctbname='ctb', use_name='table', tag_elm_list=None, ts_value=None, count=1, default_varchar_datatype='letters', default_nchar_datatype='letters', default_ctbname_prefix='ctb', default_ctbname_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>ctbname</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>ctb count, Defaults to 1.</p> <code>1</code> <code>default_varchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_nchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_ctbname_prefix</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>default_ctbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screate_stable","title":"screate_stable(dbname=None, stbname='stb', use_name='table', column_elm_list=None, tag_elm_list=None, need_tagts=False, count=1, default_stbname_prefix='stb', default_stbname_index_start_num=1, default_column_index_start_num=1, default_tag_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>use_name</code> <code>str</code> <p>stable/table, Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>use for sgen_column_type_str(), Defaults to None.</p> <code>None</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>need_tagts</code> <code>bool</code> <p>tag use timestamp, Defaults to False.</p> <code>False</code> <code>count</code> <code>int</code> <p>stable count, Defaults to 1.</p> <code>1</code> <code>default_stbname_prefix</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>default_stbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tag_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screate_table","title":"screate_table(dbname=None, tbname='tb', use_name='table', column_elm_list=None, count=1, default_tbname_prefix='tb', default_tbname_index_start_num=1, default_column_index_start_num=1, **kwargs)","text":"<p>create ctable</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tbname_prefix</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>default_tbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sdelete_rows","title":"sdelete_rows(dbname=None, tbname=None, start_ts=None, end_ts=None, ts_key=None)","text":"<p>delete rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>start_ts</code> <code>timestamp</code> <p>range start. Defaults to None.</p> <code>None</code> <code>end_ts</code> <code>timestamp</code> <p>range end. Defaults to None.</p> <code>None</code> <code>ts_key</code> <code>str</code> <p>timestamp column name. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_column_type_str","title":"sgen_column_type_str(column_elm_list)","text":"<p>generage column type str</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>column_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_column_value_list","title":"sgen_column_value_list(column_elm_list, need_null, ts_value=None, additional_ts=None, custom_col_index=None, col_value_type=None, force_pk_val=None)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>gen_random_type_value()</p> required <code>need_null</code> <code>bool</code> <p>if insert null</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_tag_type_str","title":"sgen_tag_type_str(tag_elm_list)","text":"<p>generage tag type str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>tag_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_tag_value_list","title":"sgen_tag_value_list(tag_elm_list, ts_value=None)","text":"<p>generage tag value str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>description</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sinsert_rows","title":"sinsert_rows(dbname=None, tbname=None, column_ele_list=None, ts_value=None, count=1, need_null=False, custom_col_index=None, col_value_type='random')","text":"<p>insert rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>column_ele_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>need_null</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.str_ts_trans_bigint","title":"str_ts_trans_bigint(str_ts)","text":"<p>trans str ts to bigint</p> <p>Parameters:</p> Name Type Description Default <code>str_ts</code> <code>str</code> <p>human-date</p> required <p>Returns:</p> Name Type Description <code>bigint</code> <p>bigint-ts</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.time_cast","title":"time_cast(time_value, split_symbol='+')","text":"<p>cast bigint to timestamp</p> <p>Parameters:</p> Name Type Description Default <code>time_value</code> <code>bigint</code> <p>ts</p> required <code>split_symbol</code> <code>str</code> <p>split sympol. Defaults to \"+\".</p> <code>'+'</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>timestamp</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.trans_time_to_s","title":"trans_time_to_s(runtime)","text":"<p>trans time to s</p> <p>Parameters:</p> Name Type Description Default <code>runtime</code> <code>str</code> <p>1d/1h/1m...</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>second</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.update_delete_history_data","title":"update_delete_history_data(delete)","text":"<p>update and delete history data</p> <p>Parameters:</p> Name Type Description Default <code>delete</code> <code>bool</code> <p>True/False</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.update_json_file_replica","title":"update_json_file_replica(json_file_path, new_replica_value, output_file_path=None)","text":"<p>Read a JSON file, update the 'replica' value, and write the result back to a file.</p> <p>Parameters: json_file_path (str): The path to the original JSON file. new_replica_value (int): The new 'replica' value to be set. output_file_path (str, optional): The path to the output file where the updated JSON will be saved. If not provided, the original file will be overwritten.</p> <p>Returns: None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnode","title":"<code>TDDnode</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnode.dnodeClearData","title":"dnodeClearData()","text":"<p>Clear dnode's data (Remove all data files).</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was cleared successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnodes","title":"<code>TDDnodes</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnodes.dnodeClearData","title":"dnodeClearData(index)","text":"<p>Clear dnode's data (Remove all data files).</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to clear.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was cleared successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath","title":"<code>TDFindPath</code>","text":"<p>This class is for finding path within TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath.getTDenginePath","title":"getTDenginePath()","text":"<p>for finding the root path of TDengine</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the root path of TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath.getTaosdemoPath","title":"getTaosdemoPath()","text":"<p>for finding the path of directory containing taosdemo</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the path to directory containing taosdemo</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath.init","title":"init(file)","text":"<p>[summary]</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>the file location you want to start the query. Generally using file</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql","title":"<code>TDSql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkAffectedRows","title":"checkAffectedRows(expectAffectedRows)","text":"<p>Checks if the number of affected rows from the last executed SQL statement matches the expected number of affected rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectAffectedRows</code> <code>int</code> <p>The expected number of affected rows.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of affected rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkAgg","title":"checkAgg(sql, expectCnt)","text":"<p>Executes an aggregate SQL query and checks if the result matches the expected count.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The aggregate SQL query to be executed.</p> required <code>expectCnt</code> <code>int</code> <p>The expected count from the aggregate query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the result of the aggregate query does not match the expected count.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkAssert","title":"checkAssert(assertVal, show=False)","text":"<p>Checks if the assertVal is true.</p> <p>Parameters:</p> Name Type Description Default <code>assertVal</code> <p>The value to be assert</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkColNameList","title":"checkColNameList(col_name_list, expect_col_name_list)","text":"<p>Checks if the column names from the last query match the expected column names.</p> <p>Parameters:</p> Name Type Description Default <code>col_name_list</code> <code>list</code> <p>The list of column names from the last query.</p> required <code>expect_col_name_list</code> <code>list</code> <p>The list of expected column names.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the column names do not match the expected column names.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkCols","title":"checkCols(expectCols)","text":"<p>Checks if the number of columns fetched by the last query matches the expected number of columns.</p> <p>Parameters:</p> Name Type Description Default <code>expectCols</code> <code>int</code> <p>The expected number of columns.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of columns does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkData","title":"checkData(row, col, data, show=False, exit=True)","text":"<p>Checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataCsv","title":"checkDataCsv(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file, or if the sql result does not match the expected data from CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataCsvByLine","title":"checkDataCsvByLine(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file line by line.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file,         or if the SQL result does not match the expected data from the CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataLoop","title":"checkDataLoop(row, col, data, sql, loopCount, waitTime)","text":"<p>Executes a SQL query in a loop and checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>loopCount</code> <code>int</code> <p>The number of times to execute the SQL query.</p> required <code>waitTime</code> <code>int</code> <p>The time to wait (in seconds) between each execution.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataMem","title":"checkDataMem(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataMemByLine","title":"checkDataMemByLine(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data (Same as checkDataMem).</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataNoExist","title":"checkDataNoExist(row, col, data)","text":"<p>Checks if the data at the specified row and column matches the expected data without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data matches the expected data, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataType","title":"checkDataType(row, col, dataType)","text":"<p>Checks if the data type at the specified row and column matches the expected data type.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>dataType</code> <code>str</code> <p>The expected data type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data type matches the expected data type, otherwise False.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataV2","title":"checkDataV2(row, col, data, show=False, operator='==')","text":"<p>Compare the data at the specified row and column with the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to compare against.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <code>operator</code> <code>str</code> <p>The operator to use for comparison. Defaults to \"==\".</p> <code>'=='</code> <p>Returns:     bool: True if the comparison is successful, False otherwise. Usage:     assert self.checkDataV2(row, col, data, show=True, operator=\"==\")     assert self.checkDataV2(row, col, data, show=True, operator=\"&lt;\") # means actual value is less than data</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkFirstValue","title":"checkFirstValue(sql, expect)","text":"<p>Executes a SQL query and checks if the first value in the result matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expect</code> <p>The expected value of the first result.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the first value in the result does not match the expected value.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkGreater","title":"checkGreater(elm, expect_elm)","text":"<p>Verifies that the first element is greater than the second element.</p> <p>This method compares two values and ensures that the first value (elm) is  strictly greater than the second value (expect_elm). It's commonly used for validating query results, performance metrics, or any numeric comparisons in test cases.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The actual value to be compared. Can be any comparable type  (int, float, string, etc.).</p> required <code>expect_elm</code> <p>The expected threshold value that elm should exceed.     Must be the same comparable type as elm.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if elm &gt; expect_elm, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkKeyData","title":"checkKeyData(key, col, data, show=False)","text":"<p>Checks if the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowCol","title":"checkRowCol(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowColNoExist","title":"checkRowColNoExist(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the specified row and column indices are within the range, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last query matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowsNotExited","title":"checkRowsNotExited(expectedRows)","text":"<pre><code>Check if the query rows is equal to the expected rows\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>Returns True if the actual number of rows matches the expected number, otherwise returns False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowsRange","title":"checkRowsRange(excepte_row_list)","text":"<p>Checks if the number of rows fetched by the last query is within the expected range.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>excepte_row_list</code> <code>list</code> <p>A list of expected row counts.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows is within the expected range, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows is not within the expected range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowsV2","title":"checkRowsV2(expectedRows, operator='==', show=True)","text":"<p>Verify if the number of rows returned by SQL query meets the expected condition.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <p>int The expected number of rows to compare against</p> required <code>operator</code> <p>str, optional Comparison operator ('&lt;', '&lt;=', '&gt;', '&gt;=', '==', '!='), defaults to '&lt;'</p> <code>'=='</code> <code>show</code> <p>bool, optional Whether to print the verification result, defaults to True</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool True if the actual row count meets the expected condition, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If invalid operator is provided</p> Usage <p>assert checker.checkRows(15, operator=\"&lt;\")  # Verify if less than 15 rows</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkSameColumn","title":"checkSameColumn(c1, c2)","text":"<p>Checks if the values in two specified columns are the same for all rows in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>c1</code> <code>int</code> <p>The index of the first column to be checked.</p> required <code>c2</code> <code>int</code> <p>The index of the second column to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the values in the specified columns are not the same for any row.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.close","title":"close()","text":"<p>Closes the cursor.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.connect","title":"connect(username='root', passwd='taosdata', **kwargs)","text":"<p>Reconnect</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username used to log in to the cluster.</p> <code>'root'</code> <code>passwd</code> <code>str</code> <p>The password used to log in to the cluster.</p> <code>'taosdata'</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.deleteRows","title":"deleteRows(table, where=None)","text":"<p>Deletes rows from the specified table based on the given condition.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>str</code> <p>The name of the table from which rows are to be deleted.</p> required <code>where</code> <code>str</code> <p>The condition for deleting rows. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the delete operation fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.error","title":"error(sql, expectedErrno=None, expectErrInfo=None, fullMatched=True, show=False)","text":"<p>Executes a SQL statement and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>expectedErrno</code> <code>int</code> <p>The expected error number. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>The expected error information. Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, checks for exact matches of the expected error information. Defaults to True.</p> <code>True</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The error information if an error occurs.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected error does not occur or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.errors","title":"errors(sql_list, expected_error_id_list=None, expected_error_info_list=None)","text":"<p>Executes a list of SQL queries and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expected_error_id_list</code> <code>list</code> <p>The list of expected error numbers corresponding to each SQL query. Defaults to None.</p> <code>None</code> <code>expected_error_info_list</code> <code>list</code> <p>The list of expected error information corresponding to each SQL query. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the SQL list is empty, if the execution of any SQL query fails, if the expected error does not occur, or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.execute","title":"execute(sql, queryTimes=10, show=False)","text":"<p>Executes a SQL statement.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 10.</p> <code>10</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.executeTimes","title":"executeTimes(sql, times)","text":"<p>Executes a SQL statement a specified number of times.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>times</code> <code>int</code> <p>The number of times to execute the SQL statement.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows from the last execution.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.executes","title":"executes(sqls, queryTimes=30, show=False)","text":"<p>Executes a list of SQL statements.</p> <p>Parameters:</p> Name Type Description Default <code>sqls</code> <code>list</code> <p>The list of SQL statements to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 30.</p> <code>30</code> <code>show</code> <code>bool</code> <p>If True, each SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL statement fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.expectKeyData","title":"expectKeyData(key, col, data, show=False)","text":"<p>Whether the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>Bool</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getColData","title":"getColData(col)","text":"<p>Retrieves all data from the specified column in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getColNameList","title":"getColNameList(sql, col_tag=None)","text":"<p>Executes a SQL query and retrieves the column names and optionally the column types.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>col_tag</code> <code>optional</code> <p>If provided, the method will return both column names and column types. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing the column names.</p> <code>tuple</code> <p>A tuple containing two lists - the column names and the column types, if col_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getCols","title":"getCols()","text":"<p>Retrieves the number of cols fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of cols fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getData","title":"getData(row, col)","text":"<p>Retrieves the data at the specified row and column from the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Type Description <p>The data at the specified row and column.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getFirstValue","title":"getFirstValue(sql)","text":"<p>Executes a SQL query and retrieves the first value in the result.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Type Description <p>The first value in the result.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getResult","title":"getResult(sql, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>The fetched results.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getRowData","title":"getRowData(row)","text":"<p>Retrieves all data from the specified row in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified row.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getTimes","title":"getTimes(time_str, precision='ms')","text":"<p>Converts a time string to a timestamp based on the specified precision.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>time_str</code> <code>str</code> <p>The time string to be converted. The string should end with a character indicating the time unit (e.g., 's' for seconds, 'm' for minutes).</p> required <code>precision</code> <code>str</code> <p>The precision of the timestamp. Can be \"ms\" (milliseconds), \"us\" (microseconds), or \"ns\" (nanoseconds). Defaults to \"ms\".</p> <code>'ms'</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The timestamp in the specified precision.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the time string does not end with a valid time unit character or if the precision is not valid.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getType","title":"getType(col)","text":"<p>Retrieves the data type of the specified column in the last query result.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index for which the data type is to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The data type of the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getVariable","title":"getVariable(search_attr)","text":"<p>Retrieves the value of a specified variable from the database.</p> <p>Parameters:</p> Name Type Description Default <code>search_attr</code> <code>str</code> <p>The name of the variable to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the value of the specified variable and the list of all variables.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.init","title":"init(cursor, log=False)","text":"<p>Initializes the TDSql instance with a database cursor and optionally enables logging.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>The database cursor to be used for executing SQL queries.</p> required <code>log</code> <code>bool</code> <p>If True, enables logging of SQL statements to a file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.isErrorSql","title":"isErrorSql(sql)","text":"<p>Executes a SQL statement and checks if it results in an error.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the SQL statement results in an error, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.is_err_sql","title":"is_err_sql(sql)","text":"<p>Checks if a SQL statement will result in an error when executed.</p> <p>This method executes the provided SQL statement and determines whether it  causes an exception. It's useful for testing error conditions and validating that certain SQL statements should fail.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be tested for errors.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if the SQL statement executes successfully without errors, True if the SQL statement results in an error/exception.</p> <p>Raises:</p> Type Description <code>None</code> <p>This method catches all exceptions internally and returns a boolean result instead of raising exceptions.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.no_error","title":"no_error(sql)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>_type_</code> <p>description</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.pause","title":"pause()","text":"<p>Pause the execution of the program and wait for enter key. Used for debugging. Args:     None Returns:     None Raises:     None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.prepare","title":"prepare(dbname='db', drop=True, **kwargs)","text":"<p>Prepares the database by optionally dropping it if it exists, creating it, and setting it as the active database.</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>The name of the database to be prepared. Defaults to \"db\".</p> <code>'db'</code> <code>drop</code> <code>bool</code> <p>If True, drops the database if it exists before creating it. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to be included in the database creation statement. If duration is not provided, it defaults to 100.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.query","title":"query(sql, row_tag=None, queryTimes=10, count_expected_res=None, show=False, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the query in case of failure. Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute the query until the first result matches this value or the queryTimes limit is reached. Defaults to None.</p> <code>None</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched if row_tag is not provided.</p> <code>list</code> <p>The fetched results if row_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.queryAndCheckResult","title":"queryAndCheckResult(sql_list, expect_result_list)","text":"<p>Executes a list of SQL queries and checks the results against the expected results.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expect_result_list</code> <code>list</code> <p>The list of expected results corresponding to each SQL query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL query fails or if the results do not match the expected results.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.query_success_failed","title":"query_success_failed(sql, row_tag=None, queryTimes=10, count_expected_res=None, expectErrInfo=None, fullMatched=True)","text":"<p>Executes a SQL query with retry mechanism and handles both successful and failed scenarios.</p> <p>This method attempts to execute a SQL query multiple times, handling both successful executions and expected error conditions. It's particularly useful for testing scenarios where queries might initially fail but eventually succeed, or for validating specific error conditions.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query statement to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results              instead of just the row count. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>Maximum number of retry attempts if the query fails.                     Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute                          the query until the first result matches this value                          or retry limit is reached. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>Expected error message to validate against when                          query fails. If None, any error is acceptable.                          Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, performs exact string matching for error                          messages. If False, performs partial string matching                          (contains). Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <p>Error information string if an expected error occurs and query fails within retry attempts.</p> <code>None</code> <p>If query succeeds or if unexpected error occurs and reaches retry limit.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If query fails after all retry attempts and the error is not expected     or doesn't match the expected error pattern.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.setConnMode","title":"setConnMode(mode=0, value=1)","text":"<p>Set Conn Mode</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>int</code> <p>connect mode options.</p> <code>0</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.waitedQuery","title":"waitedQuery(sql, expectedRows, timeout)","text":"<p>Executes a SQL query and waits until the expected number of rows is retrieved or the timeout is reached.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expectedRows</code> <code>int</code> <p>The expected number of rows to be retrieved.</p> required <code>timeout</code> <code>int</code> <p>The maximum time to wait (in seconds) for the expected number of rows to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the number of rows retrieved and the time taken (in seconds).</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper","title":"<code>TaosKeeper</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.cfg","title":"cfg(option, value)","text":"<p>add param option and value to cfg file</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <p>str, param name</p> required <code>value</code> <p>str, param value</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.start","title":"start()","text":"<p>start taoskeeper process.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.stop","title":"stop(force_kill=False)","text":"<p>stop taoskeeper process.</p> <p>Parameters:</p> Name Type Description Default <code>force_kill</code> <p>bool, whether to force kill the process default: False if True, use kill -9 if False, use kill -15</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.update_cfg","title":"update_cfg(update_dict)","text":"<p>update taoskeeper cfg file</p> <p>Parameters:</p> Name Type Description Default <code>update_dict</code> <code>dict</code> <p>dict, update dict example: {\"log\": {\"path\": \"/var/log/taos\"}}</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#before_test","title":"<code>before_test</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#before_test.BeforeTest","title":"<code>BeforeTest</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#before_test.BeforeTest.create_database","title":"create_database(request, db_name, host, port)","text":"<p>\u521b\u5efamodule\u7ea7\u522b\u7684\u6570\u636e\u5e93</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#before_test.BeforeTest.deploy_taos","title":"deploy_taos(yaml_file, mnodes_num=1, clean=False)","text":"<p>get env directory from request; use yaml file for taostest run;</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#boundary","title":"<code>boundary</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck","title":"<code>clusterCommonCheck</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck.ClusterComCheck","title":"<code>ClusterComCheck</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck.ClusterComCheck.check_vgroups_status","title":"check_vgroups_status(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>check vgroups status in 10s after db vgroups status is changed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck.ClusterComCheck.check_vgroups_status_with_offline","title":"check_vgroups_status_with_offline(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>n nodes cluster, 3 replica database return 1, n leaders, stable status return 2, 0 &lt; num of leader &lt; n, stable status return 0, no leader, stable status return -1, Elections not yet completed, unstable status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common","title":"<code>common</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom","title":"<code>TDCom</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cal_watermark_window_close_interval_endts","title":"cal_watermark_window_close_interval_endts(start_ts, interval, watermark=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>interval</code> <code>int</code> <p>[s]</p> required <code>watermark</code> <code>int</code> <p>[s]. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cal_watermark_window_close_session_endts","title":"cal_watermark_window_close_session_endts(start_ts, watermark=None, session=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>watermark</code> <code>int</code> <p>session. Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>as followed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cast_query_data","title":"cast_query_data(query_data)","text":"<p>cast query-result for existed-stb</p> <p>Parameters:</p> Name Type Description Default <code>query_data</code> <code>list</code> <p>query data list</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>new list after cast</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_query_data","title":"check_query_data(sql1, sql2, sorted=False, fill_value=None, tag_value_list=None, defined_tag_count=None, partition=True, use_exist_stb=False, subtable=None, reverse_check=False)","text":"<p>confirm query result</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ....</p> required <code>sql2</code> <code>str</code> <p>select ....</p> required <code>sorted</code> <code>bool</code> <p>if sort result list. Defaults to False.</p> <code>False</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>tag_value_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>defined_tag_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>partition</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>use_exist_stb</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>subtable</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>reverse_check</code> <code>bool</code> <p>not equal. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream","title":"check_stream(sql1, sql2, expected_count, max_delay=None)","text":"<p>confirm stream</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ...</p> required <code>sql2</code> <code>str</code> <p>select ...</p> required <code>expected_count</code> <code>int</code> <p>expected_count</p> required <code>max_delay</code> <code>int</code> <p>max_delay value. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream_field_type","title":"check_stream_field_type(sql, input_function)","text":"<p>confirm stream field</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>input sql</p> required <code>input_function</code> <code>str</code> <p>scalar</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream_res","title":"check_stream_res(sql, expected_res, max_delay)","text":"<p>confirm stream result</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>select ...</p> required <code>expected_res</code> <code>str</code> <p>expected result</p> required <code>max_delay</code> <code>int</code> <p>max_delay value</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream_task_status","title":"check_stream_task_status(stream_name, vgroups, stream_timeout=0, check_wal_info=True)","text":"<p>check stream status</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>vgroups</code> <code>int</code> <p>vgroups</p> required <p>Returns:     str: status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cleanTb","title":"cleanTb(type='taosc', dbname='db')","text":"<p>type is taosc or restful</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.clean_env","title":"clean_env()","text":"<p>drop all streams and databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.create_old_stream","title":"create_old_stream(stream_name, des_table, source_sql, trigger_mode=None, watermark=None, max_delay=None, ignore_expired=None, ignore_update=None, subtable_value=None, fill_value=None, fill_history_value=None, stb_field_name_value=None, tag_value=None, use_exist_stb=False, use_except=False)","text":"<p>create_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target stable</p> required <code>source_sql</code> <code>str</code> <p>stream sql</p> required <code>trigger_mode</code> <code>str</code> <p>at_once/window_close/max_delay. Defaults to None.</p> <code>None</code> <code>watermark</code> <code>str</code> <p>watermark time. Defaults to None.</p> <code>None</code> <code>max_delay</code> <code>str</code> <p>max_delay time. Defaults to None.</p> <code>None</code> <code>ignore_expired</code> <code>int</code> <p>ignore expired data. Defaults to None.</p> <code>None</code> <code>ignore_update</code> <code>int</code> <p>ignore update data. Defaults to None.</p> <code>None</code> <code>subtable_value</code> <code>str</code> <p>subtable. Defaults to None.</p> <code>None</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>fill_history_value</code> <code>int</code> <p>0/1. Defaults to None.</p> <code>None</code> <code>stb_field_name_value</code> <code>str</code> <p>existed stb. Defaults to None.</p> <code>None</code> <code>tag_value</code> <code>str</code> <p>custom tag. Defaults to None.</p> <code>None</code> <code>use_exist_stb</code> <code>bool</code> <p>use existed stb tag. Defaults to False.</p> <code>False</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.create_snode_if_not_exists","title":"create_snode_if_not_exists(dnode_id=1)","text":"<p>Create snode if not exists</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode exists or created successfully, False if creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.create_stream","title":"create_stream(stream_name, des_table=None, source_sql=None, trigger_table=None, trigger_type=None, from_table=None, partition_by=None, stream_options=None, notification_definition=None, output_subtable=None, columns=None, tags=None, if_not_exists=True, db_name=None, use_except=False)","text":"<p>create_stream with new syntax</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target table. Defaults to None.</p> <code>None</code> <code>source_sql</code> <code>str</code> <p>subquery. Defaults to None.</p> <code>None</code> <code>trigger_table</code> <code>str</code> <p>trigger table name. Defaults to None.</p> <code>None</code> <code>trigger_type</code> <code>str</code> <p>SESSION/STATE_WINDOW/INTERVAL/EVENT_WINDOW/COUNT_WINDOW/PERIOD. Defaults to None.</p> <code>None</code> <code>from_table</code> <code>str</code> <p>source table name. Defaults to None.</p> <code>None</code> <code>partition_by</code> <code>str</code> <p>partition columns. Defaults to None.</p> <code>None</code> <code>stream_options</code> <code>str</code> <p>stream options. Defaults to None.</p> <code>None</code> <code>notification_definition</code> <code>str</code> <p>notification settings. Defaults to None.</p> <code>None</code> <code>output_subtable</code> <code>str</code> <p>subtable expression. Defaults to None.</p> <code>None</code> <code>columns</code> <code>str</code> <p>column definitions. Defaults to None.</p> <code>None</code> <code>tags</code> <code>str</code> <p>tag definitions. Defaults to None.</p> <code>None</code> <code>if_not_exists</code> <code>bool</code> <p>if not exists flag. Defaults to True.</p> <code>True</code> <code>db_name</code> <code>str</code> <p>database name. Defaults to None.</p> <code>None</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream SQL if use_except=True, None otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_all_db","title":"drop_all_db()","text":"<p>drop all databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_all_streams","title":"drop_all_streams()","text":"<p>drop all streams from all user databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_db","title":"drop_db(dbname='test')","text":"<p>drop a db</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_snode","title":"drop_snode(snode_id=None)","text":"<p>Drop snode</p> <p>Parameters:</p> Name Type Description Default <code>snode_id</code> <code>int</code> <p>Specific snode ID to drop. If None, drops all snodes.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if successful, False otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.ensure_snode_ready","title":"ensure_snode_ready(dnode_id=1, timeout=30)","text":"<p>Ensure snode is created and ready</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>Maximum wait time in seconds. Defaults to 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode is ready, False if timeout or creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.float_handle","title":"float_handle(input_list)","text":"<p>float list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>float list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.genTs","title":"genTs(precision='ms', ts='', protype='taosc', ns_tag=None)","text":"<p>generate ts</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>str</code> <p>db precision. Defaults to \"ms\".</p> <code>'ms'</code> <code>ts</code> <code>str</code> <p>input ts. Defaults to \"\".</p> <code>''</code> <code>protype</code> <code>str</code> <p>\"taosc\" or \"restful\". Defaults to \"taosc\".</p> <code>'taosc'</code> <code>ns_tag</code> <code>_type_</code> <p>use ns. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>timestamp, datetime: timestamp and datetime</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.gen_tag_col_str","title":"gen_tag_col_str(gen_type, data_type, count)","text":"<p>gen multi tags or cols by gen_type</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.getLongName","title":"getLongName(len, mode='mixed')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.get_long_name","title":"get_long_name(length=10, mode='letters')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.get_timestamp_n_days_later","title":"get_timestamp_n_days_later(n=30)","text":"<p>Get the timestamp of a date n days later from the current date.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of days to add to the current date. Default is 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>int</code> <p>Timestamp of the date n days later, in milliseconds.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.pause_stream","title":"pause_stream(stream_name, if_exist=True, if_not_exist=False)","text":"<p>pause_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.prepare_data","title":"prepare_data(interval=None, watermark=None, session=None, state_window=None, state_window_max=127, interation=3, range_count=None, precision='ms', fill_history_value=0, ext_stb=None, custom_col_index=None, col_value_type='random')","text":"<p>prepare stream data</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>watermark</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>state_window</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>state_window_max</code> <code>int</code> <p>Defaults to 127.</p> <code>127</code> <code>interation</code> <code>int</code> <p>Defaults to 3.</p> <code>3</code> <code>range_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>precision</code> <code>str</code> <p>Defaults to \"ms\".</p> <code>'ms'</code> <code>fill_history_value</code> <code>int</code> <p>Defaults to 0.</p> <code>0</code> <code>ext_stb</code> <code>bool</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.resume_stream","title":"resume_stream(stream_name, if_exist=True, if_not_exist=False, ignore_untreated=False)","text":"<p>resume_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>ignore_untreated</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.round_handle","title":"round_handle(input_list)","text":"<p>round list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>round list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screateDb","title":"screateDb(dbname='test', drop_db=True, **kwargs)","text":"<p>create database</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code> <code>drop_db</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screate_ctable","title":"screate_ctable(dbname=None, stbname=None, ctbname='ctb', use_name='table', tag_elm_list=None, ts_value=None, count=1, default_varchar_datatype='letters', default_nchar_datatype='letters', default_ctbname_prefix='ctb', default_ctbname_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>ctbname</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>ctb count, Defaults to 1.</p> <code>1</code> <code>default_varchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_nchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_ctbname_prefix</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>default_ctbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screate_stable","title":"screate_stable(dbname=None, stbname='stb', use_name='table', column_elm_list=None, tag_elm_list=None, need_tagts=False, count=1, default_stbname_prefix='stb', default_stbname_index_start_num=1, default_column_index_start_num=1, default_tag_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>use_name</code> <code>str</code> <p>stable/table, Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>use for sgen_column_type_str(), Defaults to None.</p> <code>None</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>need_tagts</code> <code>bool</code> <p>tag use timestamp, Defaults to False.</p> <code>False</code> <code>count</code> <code>int</code> <p>stable count, Defaults to 1.</p> <code>1</code> <code>default_stbname_prefix</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>default_stbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tag_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screate_table","title":"screate_table(dbname=None, tbname='tb', use_name='table', column_elm_list=None, count=1, default_tbname_prefix='tb', default_tbname_index_start_num=1, default_column_index_start_num=1, **kwargs)","text":"<p>create ctable</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tbname_prefix</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>default_tbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sdelete_rows","title":"sdelete_rows(dbname=None, tbname=None, start_ts=None, end_ts=None, ts_key=None)","text":"<p>delete rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>start_ts</code> <code>timestamp</code> <p>range start. Defaults to None.</p> <code>None</code> <code>end_ts</code> <code>timestamp</code> <p>range end. Defaults to None.</p> <code>None</code> <code>ts_key</code> <code>str</code> <p>timestamp column name. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_column_type_str","title":"sgen_column_type_str(column_elm_list)","text":"<p>generage column type str</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>column_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_column_value_list","title":"sgen_column_value_list(column_elm_list, need_null, ts_value=None, additional_ts=None, custom_col_index=None, col_value_type=None, force_pk_val=None)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>gen_random_type_value()</p> required <code>need_null</code> <code>bool</code> <p>if insert null</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_tag_type_str","title":"sgen_tag_type_str(tag_elm_list)","text":"<p>generage tag type str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>tag_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_tag_value_list","title":"sgen_tag_value_list(tag_elm_list, ts_value=None)","text":"<p>generage tag value str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>description</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sinsert_rows","title":"sinsert_rows(dbname=None, tbname=None, column_ele_list=None, ts_value=None, count=1, need_null=False, custom_col_index=None, col_value_type='random')","text":"<p>insert rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>column_ele_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>need_null</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.str_ts_trans_bigint","title":"str_ts_trans_bigint(str_ts)","text":"<p>trans str ts to bigint</p> <p>Parameters:</p> Name Type Description Default <code>str_ts</code> <code>str</code> <p>human-date</p> required <p>Returns:</p> Name Type Description <code>bigint</code> <p>bigint-ts</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.time_cast","title":"time_cast(time_value, split_symbol='+')","text":"<p>cast bigint to timestamp</p> <p>Parameters:</p> Name Type Description Default <code>time_value</code> <code>bigint</code> <p>ts</p> required <code>split_symbol</code> <code>str</code> <p>split sympol. Defaults to \"+\".</p> <code>'+'</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>timestamp</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.trans_time_to_s","title":"trans_time_to_s(runtime)","text":"<p>trans time to s</p> <p>Parameters:</p> Name Type Description Default <code>runtime</code> <code>str</code> <p>1d/1h/1m...</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>second</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.update_delete_history_data","title":"update_delete_history_data(delete)","text":"<p>update and delete history data</p> <p>Parameters:</p> Name Type Description Default <code>delete</code> <code>bool</code> <p>True/False</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.update_json_file_replica","title":"update_json_file_replica(json_file_path, new_replica_value, output_file_path=None)","text":"<p>Read a JSON file, update the 'replica' value, and write the result back to a file.</p> <p>Parameters: json_file_path (str): The path to the original JSON file. new_replica_value (int): The new 'replica' value to be set. output_file_path (str, optional): The path to the output file where the updated JSON will be saved. If not provided, the original file will be overwritten.</p> <p>Returns: None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#constant","title":"<code>constant</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#eos","title":"<code>eos</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#epath","title":"<code>epath</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#etime","title":"<code>etime</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#etool","title":"<code>etool</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#etool.benchMark","title":"benchMark(command='', json='')","text":"<p>Run the <code>taosBenchmark</code> binary with a command or JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command to execute. Defaults to an empty string.</p> <code>''</code> <code>json</code> <code>str</code> <p>The path to a JSON file for execution. Defaults to an empty string.</p> <code>''</code> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the execution of the JSON file fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.benchMarkFile","title":"benchMarkFile()","text":"<p>Get the path to the <code>taosBenchmark</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosBenchmark</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.curFile","title":"curFile(fullPath, filename)","text":"<p>Get the full path to a file in the current directory.</p> <p>Parameters:</p> Name Type Description Default <code>fullPath</code> <code>str</code> <p>The full path to the current directory.</p> required <code>filename</code> <code>str</code> <p>The name of the file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the file in the current directory.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.exeBinFile","title":"exeBinFile(fname, command, wait=True, show=True)","text":"<p>Execute a binary file with the specified command.</p> <p>This method uses <code>utils.army.frame.eos.exe</code> or <code>utils.army.frame.eos.exeNoWait</code>  to execute the binary file. The <code>exe</code> function waits for the command to finish,  while <code>exeNoWait</code> runs the command in the background and returns immediately.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>The name of the binary file.</p> required <code>command</code> <code>str</code> <p>The command to execute.</p> required <code>wait</code> <code>bool</code> <p>Whether to wait for the command to finish. Defaults to True. - If True, uses <code>utils.army.frame.eos.exe</code>. - If False, uses <code>utils.army.frame.eos.exeNoWait</code>.</p> <code>True</code> <code>show</code> <code>bool</code> <p>Whether to log the command. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The exit status of the command execution. A return value of <code>0</code> indicates success,   while a non-zero value indicates failure.  - If <code>wait</code> is False, the return value is the exit status of the <code>nohup</code> or <code>mintty</code> command.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.runBinFile","title":"runBinFile(fname, command, show=True, checkRun=False, retFail=False)","text":"<p>Run a binary file with the specified command.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>The name of the binary file.</p> required <code>command</code> <code>str</code> <p>The command to execute.</p> required <code>show</code> <code>bool</code> <p>Whether to log the command. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>list</code> <p>The output of the command as a list of strings.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosAdapterFile","title":"taosAdapterFile()","text":"<p>Get the path to the <code>taosAdapter</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosAdapter</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosDumpFile","title":"taosDumpFile()","text":"<p>Get the path to the <code>taosdump</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosdump</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosFile","title":"taosFile()","text":"<p>Get the path to the <code>taos</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taos</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#eutil","title":"<code>eutil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#gettime","title":"<code>gettime</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#log","title":"<code>log</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#log.ColorFormatter","title":"<code>ColorFormatter</code>","text":"<p>\u81ea\u5b9a\u4e49\u5e26\u989c\u8272\u7684\u65e5\u5fd7\u683c\u5f0f\u5316\u5668</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding","title":"<code>pathFinding</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath","title":"<code>TDFindPath</code>","text":"<p>This class is for finding path within TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath.getTDenginePath","title":"getTDenginePath()","text":"<p>for finding the root path of TDengine</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the root path of TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath.getTaosdemoPath","title":"getTaosdemoPath()","text":"<p>for finding the path of directory containing taosdemo</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the path to directory containing taosdemo</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath.init","title":"init(file)","text":"<p>[summary]</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>the file location you want to start the query. Generally using file</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#sql","title":"<code>sql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql","title":"<code>TDSql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAffectedRows","title":"checkAffectedRows(expectAffectedRows)","text":"<p>Checks if the number of affected rows from the last executed SQL statement matches the expected number of affected rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectAffectedRows</code> <code>int</code> <p>The expected number of affected rows.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of affected rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAgg","title":"checkAgg(sql, expectCnt)","text":"<p>Executes an aggregate SQL query and checks if the result matches the expected count.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The aggregate SQL query to be executed.</p> required <code>expectCnt</code> <code>int</code> <p>The expected count from the aggregate query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the result of the aggregate query does not match the expected count.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAssert","title":"checkAssert(assertVal, show=False)","text":"<p>Checks if the assertVal is true.</p> <p>Parameters:</p> Name Type Description Default <code>assertVal</code> <p>The value to be assert</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkColNameList","title":"checkColNameList(col_name_list, expect_col_name_list)","text":"<p>Checks if the column names from the last query match the expected column names.</p> <p>Parameters:</p> Name Type Description Default <code>col_name_list</code> <code>list</code> <p>The list of column names from the last query.</p> required <code>expect_col_name_list</code> <code>list</code> <p>The list of expected column names.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the column names do not match the expected column names.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkCols","title":"checkCols(expectCols)","text":"<p>Checks if the number of columns fetched by the last query matches the expected number of columns.</p> <p>Parameters:</p> Name Type Description Default <code>expectCols</code> <code>int</code> <p>The expected number of columns.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of columns does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkData","title":"checkData(row, col, data, show=False, exit=True)","text":"<p>Checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataCsv","title":"checkDataCsv(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file, or if the sql result does not match the expected data from CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataCsvByLine","title":"checkDataCsvByLine(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file line by line.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file,         or if the SQL result does not match the expected data from the CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataLoop","title":"checkDataLoop(row, col, data, sql, loopCount, waitTime)","text":"<p>Executes a SQL query in a loop and checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>loopCount</code> <code>int</code> <p>The number of times to execute the SQL query.</p> required <code>waitTime</code> <code>int</code> <p>The time to wait (in seconds) between each execution.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataMem","title":"checkDataMem(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataMemByLine","title":"checkDataMemByLine(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data (Same as checkDataMem).</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataNoExist","title":"checkDataNoExist(row, col, data)","text":"<p>Checks if the data at the specified row and column matches the expected data without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data matches the expected data, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataType","title":"checkDataType(row, col, dataType)","text":"<p>Checks if the data type at the specified row and column matches the expected data type.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>dataType</code> <code>str</code> <p>The expected data type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data type matches the expected data type, otherwise False.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataV2","title":"checkDataV2(row, col, data, show=False, operator='==')","text":"<p>Compare the data at the specified row and column with the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to compare against.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <code>operator</code> <code>str</code> <p>The operator to use for comparison. Defaults to \"==\".</p> <code>'=='</code> <p>Returns:     bool: True if the comparison is successful, False otherwise. Usage:     assert self.checkDataV2(row, col, data, show=True, operator=\"==\")     assert self.checkDataV2(row, col, data, show=True, operator=\"&lt;\") # means actual value is less than data</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkFirstValue","title":"checkFirstValue(sql, expect)","text":"<p>Executes a SQL query and checks if the first value in the result matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expect</code> <p>The expected value of the first result.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the first value in the result does not match the expected value.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkGreater","title":"checkGreater(elm, expect_elm)","text":"<p>Verifies that the first element is greater than the second element.</p> <p>This method compares two values and ensures that the first value (elm) is  strictly greater than the second value (expect_elm). It's commonly used for validating query results, performance metrics, or any numeric comparisons in test cases.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The actual value to be compared. Can be any comparable type  (int, float, string, etc.).</p> required <code>expect_elm</code> <p>The expected threshold value that elm should exceed.     Must be the same comparable type as elm.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if elm &gt; expect_elm, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkKeyData","title":"checkKeyData(key, col, data, show=False)","text":"<p>Checks if the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowCol","title":"checkRowCol(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowColNoExist","title":"checkRowColNoExist(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the specified row and column indices are within the range, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last query matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowsNotExited","title":"checkRowsNotExited(expectedRows)","text":"<pre><code>Check if the query rows is equal to the expected rows\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>Returns True if the actual number of rows matches the expected number, otherwise returns False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowsRange","title":"checkRowsRange(excepte_row_list)","text":"<p>Checks if the number of rows fetched by the last query is within the expected range.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>excepte_row_list</code> <code>list</code> <p>A list of expected row counts.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows is within the expected range, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows is not within the expected range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowsV2","title":"checkRowsV2(expectedRows, operator='==', show=True)","text":"<p>Verify if the number of rows returned by SQL query meets the expected condition.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <p>int The expected number of rows to compare against</p> required <code>operator</code> <p>str, optional Comparison operator ('&lt;', '&lt;=', '&gt;', '&gt;=', '==', '!='), defaults to '&lt;'</p> <code>'=='</code> <code>show</code> <p>bool, optional Whether to print the verification result, defaults to True</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>bool True if the actual row count meets the expected condition, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If invalid operator is provided</p> Usage <p>assert checker.checkRows(15, operator=\"&lt;\")  # Verify if less than 15 rows</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkSameColumn","title":"checkSameColumn(c1, c2)","text":"<p>Checks if the values in two specified columns are the same for all rows in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>c1</code> <code>int</code> <p>The index of the first column to be checked.</p> required <code>c2</code> <code>int</code> <p>The index of the second column to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the values in the specified columns are not the same for any row.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.close","title":"close()","text":"<p>Closes the cursor.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.connect","title":"connect(username='root', passwd='taosdata', **kwargs)","text":"<p>Reconnect</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username used to log in to the cluster.</p> <code>'root'</code> <code>passwd</code> <code>str</code> <p>The password used to log in to the cluster.</p> <code>'taosdata'</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.deleteRows","title":"deleteRows(table, where=None)","text":"<p>Deletes rows from the specified table based on the given condition.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>str</code> <p>The name of the table from which rows are to be deleted.</p> required <code>where</code> <code>str</code> <p>The condition for deleting rows. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the delete operation fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.error","title":"error(sql, expectedErrno=None, expectErrInfo=None, fullMatched=True, show=False)","text":"<p>Executes a SQL statement and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>expectedErrno</code> <code>int</code> <p>The expected error number. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>The expected error information. Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, checks for exact matches of the expected error information. Defaults to True.</p> <code>True</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The error information if an error occurs.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected error does not occur or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.errors","title":"errors(sql_list, expected_error_id_list=None, expected_error_info_list=None)","text":"<p>Executes a list of SQL queries and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expected_error_id_list</code> <code>list</code> <p>The list of expected error numbers corresponding to each SQL query. Defaults to None.</p> <code>None</code> <code>expected_error_info_list</code> <code>list</code> <p>The list of expected error information corresponding to each SQL query. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the SQL list is empty, if the execution of any SQL query fails, if the expected error does not occur, or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.execute","title":"execute(sql, queryTimes=10, show=False)","text":"<p>Executes a SQL statement.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 10.</p> <code>10</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.executeTimes","title":"executeTimes(sql, times)","text":"<p>Executes a SQL statement a specified number of times.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>times</code> <code>int</code> <p>The number of times to execute the SQL statement.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows from the last execution.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.executes","title":"executes(sqls, queryTimes=30, show=False)","text":"<p>Executes a list of SQL statements.</p> <p>Parameters:</p> Name Type Description Default <code>sqls</code> <code>list</code> <p>The list of SQL statements to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 30.</p> <code>30</code> <code>show</code> <code>bool</code> <p>If True, each SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL statement fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.expectKeyData","title":"expectKeyData(key, col, data, show=False)","text":"<p>Whether the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>Bool</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getColData","title":"getColData(col)","text":"<p>Retrieves all data from the specified column in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getColNameList","title":"getColNameList(sql, col_tag=None)","text":"<p>Executes a SQL query and retrieves the column names and optionally the column types.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>col_tag</code> <code>optional</code> <p>If provided, the method will return both column names and column types. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing the column names.</p> <code>tuple</code> <p>A tuple containing two lists - the column names and the column types, if col_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getCols","title":"getCols()","text":"<p>Retrieves the number of cols fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of cols fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getData","title":"getData(row, col)","text":"<p>Retrieves the data at the specified row and column from the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Type Description <p>The data at the specified row and column.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getFirstValue","title":"getFirstValue(sql)","text":"<p>Executes a SQL query and retrieves the first value in the result.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Type Description <p>The first value in the result.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getResult","title":"getResult(sql, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>The fetched results.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getRowData","title":"getRowData(row)","text":"<p>Retrieves all data from the specified row in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified row.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getTimes","title":"getTimes(time_str, precision='ms')","text":"<p>Converts a time string to a timestamp based on the specified precision.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>time_str</code> <code>str</code> <p>The time string to be converted. The string should end with a character indicating the time unit (e.g., 's' for seconds, 'm' for minutes).</p> required <code>precision</code> <code>str</code> <p>The precision of the timestamp. Can be \"ms\" (milliseconds), \"us\" (microseconds), or \"ns\" (nanoseconds). Defaults to \"ms\".</p> <code>'ms'</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The timestamp in the specified precision.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the time string does not end with a valid time unit character or if the precision is not valid.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getType","title":"getType(col)","text":"<p>Retrieves the data type of the specified column in the last query result.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index for which the data type is to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The data type of the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getVariable","title":"getVariable(search_attr)","text":"<p>Retrieves the value of a specified variable from the database.</p> <p>Parameters:</p> Name Type Description Default <code>search_attr</code> <code>str</code> <p>The name of the variable to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the value of the specified variable and the list of all variables.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.init","title":"init(cursor, log=False)","text":"<p>Initializes the TDSql instance with a database cursor and optionally enables logging.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>The database cursor to be used for executing SQL queries.</p> required <code>log</code> <code>bool</code> <p>If True, enables logging of SQL statements to a file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.isErrorSql","title":"isErrorSql(sql)","text":"<p>Executes a SQL statement and checks if it results in an error.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the SQL statement results in an error, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.is_err_sql","title":"is_err_sql(sql)","text":"<p>Checks if a SQL statement will result in an error when executed.</p> <p>This method executes the provided SQL statement and determines whether it  causes an exception. It's useful for testing error conditions and validating that certain SQL statements should fail.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be tested for errors.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if the SQL statement executes successfully without errors, True if the SQL statement results in an error/exception.</p> <p>Raises:</p> Type Description <code>None</code> <p>This method catches all exceptions internally and returns a boolean result instead of raising exceptions.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.no_error","title":"no_error(sql)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>_type_</code> <p>description</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.pause","title":"pause()","text":"<p>Pause the execution of the program and wait for enter key. Used for debugging. Args:     None Returns:     None Raises:     None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.prepare","title":"prepare(dbname='db', drop=True, **kwargs)","text":"<p>Prepares the database by optionally dropping it if it exists, creating it, and setting it as the active database.</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>The name of the database to be prepared. Defaults to \"db\".</p> <code>'db'</code> <code>drop</code> <code>bool</code> <p>If True, drops the database if it exists before creating it. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to be included in the database creation statement. If duration is not provided, it defaults to 100.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.query","title":"query(sql, row_tag=None, queryTimes=10, count_expected_res=None, show=False, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the query in case of failure. Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute the query until the first result matches this value or the queryTimes limit is reached. Defaults to None.</p> <code>None</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched if row_tag is not provided.</p> <code>list</code> <p>The fetched results if row_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.queryAndCheckResult","title":"queryAndCheckResult(sql_list, expect_result_list)","text":"<p>Executes a list of SQL queries and checks the results against the expected results.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expect_result_list</code> <code>list</code> <p>The list of expected results corresponding to each SQL query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL query fails or if the results do not match the expected results.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.query_success_failed","title":"query_success_failed(sql, row_tag=None, queryTimes=10, count_expected_res=None, expectErrInfo=None, fullMatched=True)","text":"<p>Executes a SQL query with retry mechanism and handles both successful and failed scenarios.</p> <p>This method attempts to execute a SQL query multiple times, handling both successful executions and expected error conditions. It's particularly useful for testing scenarios where queries might initially fail but eventually succeed, or for validating specific error conditions.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query statement to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results              instead of just the row count. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>Maximum number of retry attempts if the query fails.                     Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute                          the query until the first result matches this value                          or retry limit is reached. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>Expected error message to validate against when                          query fails. If None, any error is acceptable.                          Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, performs exact string matching for error                          messages. If False, performs partial string matching                          (contains). Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <p>Error information string if an expected error occurs and query fails within retry attempts.</p> <code>None</code> <p>If query succeeds or if unexpected error occurs and reaches retry limit.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If query fails after all retry attempts and the error is not expected     or doesn't match the expected error pattern.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.setConnMode","title":"setConnMode(mode=0, value=1)","text":"<p>Set Conn Mode</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>int</code> <p>connect mode options.</p> <code>0</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.waitedQuery","title":"waitedQuery(sql, expectedRows, timeout)","text":"<p>Executes a SQL query and waits until the expected number of rows is retrieved or the timeout is reached.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expectedRows</code> <code>int</code> <p>The expected number of rows to be retrieved.</p> required <code>timeout</code> <code>int</code> <p>The maximum time to wait (in seconds) for the expected number of rows to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the number of rows retrieved and the time taken (in seconds).</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sqlset","title":"<code>sqlset</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl","title":"<code>srvCtl</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl","title":"<code>srvCtl</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.clusterRootPath","title":"clusterRootPath()","text":"<p>Gets the root path of the cluster.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The root path of the cluster.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeCfgPath","title":"dnodeCfgPath(idx)","text":"<p>Gets the configuration path for a specific dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The configuration path for the dnode.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeClearData","title":"dnodeClearData(idx)","text":"<p>Clear dnode's data (Remove all data files).</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to clear.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was cleared successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeDataFiles","title":"dnodeDataFiles(idx)","text":"<p>Gets the data files for a specific dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of data files for the dnode.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeForceStop","title":"dnodeForceStop(idx)","text":"<p>Force Stops a dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to stop.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was stopped successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeRestartAll","title":"dnodeRestartAll()","text":"<p>Restarts all dnodes.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all dnodes were restarted successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStart","title":"dnodeStart(idx)","text":"<p>Starts a dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to start.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was started successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStartAll","title":"dnodeStartAll()","text":"<p>Starts all dnodes.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all dnodes were started successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStop","title":"dnodeStop(idx)","text":"<p>Stops a dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to stop.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was stopped successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStopAll","title":"dnodeStopAll()","text":"<p>Stops all dnodes.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all dnodes were stopped successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.taosdFile","title":"taosdFile(idx)","text":"<p>Gets the path to the taosd file for a specific dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The path to the taosd file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sub","title":"<code>sub</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosadapter","title":"<code>taosadapter</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosadapter.TAdapter","title":"<code>TAdapter</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosadapter.TAdapter.start_taosadapter","title":"start_taosadapter()","text":"<p>use this method, must deploy taosadapter</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg","title":"<code>taosdemoCfg</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg","title":"<code>TDTaosdemoCfg</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.append_sql_stb","title":"append_sql_stb(target, value)","text":"<p>for appending sql dict into specific sql list</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the target append list format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required <code>value</code> <code>dict</code> <p>the sql dict going to be appended</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.get_sql","title":"get_sql(target)","text":"<p>general get function for all sql lists</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the sql list want to get format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.get_template","title":"get_template(target)","text":"<p>general get function for the default sql template</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the sql list want to get format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.import_sql","title":"import_sql(Sql_in, mode)","text":"<p>used for importing the sql later used</p> <p>Parameters:</p> Name Type Description Default <code>Sql_in</code> <code>dict</code> <p>the imported sql dict</p> required <code>mode</code> <code>str</code> <p>the sql storing location within TDTaosdemoCfg format: 'fileType_tableType' fileType: query, sub tableType: table, stable</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.pop_sql_stb","title":"pop_sql_stb(target, index)","text":"<p>for poping a sql dict from specific sql list</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the target append list format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required <code>index</code> <code>int</code> <p>the sql dict that is going to be popped</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper","title":"<code>taoskeeper</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper","title":"<code>TaosKeeper</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.cfg","title":"cfg(option, value)","text":"<p>add param option and value to cfg file</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <p>str, param name</p> required <code>value</code> <p>str, param value</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.start","title":"start()","text":"<p>start taoskeeper process.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.stop","title":"stop(force_kill=False)","text":"<p>stop taoskeeper process.</p> <p>Parameters:</p> Name Type Description Default <code>force_kill</code> <p>bool, whether to force kill the process default: False if True, use kill -9 if False, use kill -15</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.update_cfg","title":"update_cfg(update_dict)","text":"<p>update taoskeeper cfg file</p> <p>Parameters:</p> Name Type Description Default <code>update_dict</code> <code>dict</code> <p>dict, update dict example: {\"log\": {\"path\": \"/var/log/taos\"}}</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#tserror","title":"<code>tserror</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#types","title":"<code>types</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#types.TDSmlProtocolType","title":"<code>TDSmlProtocolType</code>","text":"<p>Schemaless Protocol types 0 - unknown 1 - InfluxDB Line Protocol 2 - OpenTSDB Telnet Protocl 3 - OpenTSDB JSON Protocol</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil","title":"<code>streamUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem","title":"<code>StreamItem</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.addQuerySqlCase","title":"addQuerySqlCase(query_sql_case)","text":"<p>\u6dfb\u52a0\u67e5\u8be2SQL\u7528\u4f8b</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.awaitResultHasRows","title":"awaitResultHasRows(waitSeconds=60)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u5df2\u6709\u7ed3\u679c\uff0c\u4e0d\u786e\u8ba4\u6700\u7ec8\u7ed3\u679c\u884c\u6570\u65f6\u4f7f\u7528</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.awaitRowStability","title":"awaitRowStability(stable_rows, waitSeconds=120)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u7ed3\u679c\u7684\u884c\u6570\u4e0e\u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570\u4e00\u81f4 :param stable_rows: int, \u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.setResultFile","title":"setResultFile(file)","text":"<p>\u8bbe\u7f6e\u7ed3\u679c\u6587\u4ef6\u8def\u5f84</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.set_exp_query_param_mapping","title":"set_exp_query_param_mapping(mapping)","text":"<p>\u8bbe\u7f6e\u53c2\u6570\u540d\u4e0e\u5217\u7d22\u5f15\u7684\u6620\u5c04\uff0c\u4f8b\u5982 {\"_wstart\": 0, \"_wend\": 1}</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable","title":"<code>StreamTable</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.__delete_data","title":"__delete_data(full_table_name, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u8303\u56f4\u5185\u7684\u6570\u636e</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.appendSubTables","title":"appendSubTables(startTbIndex, endTbIndex)","text":"<p>\u5411\u8d85\u7ea7\u8868\u4e2d\u8ffd\u52a0\u5b50\u8868 :param startTbIndex: int, \u8d77\u59cb\u5b50\u8868\u7d22\u5f15 :param endTbIndex: int, \u7ed3\u675f\u5b50\u8868\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.append_data","title":"append_data(start_row, end_row)","text":"<p>\u5411\u8868\u4e2d\u8ffd\u52a0\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.append_subtable_data","title":"append_subtable_data(tbName, start_row, end_row)","text":"<p>\u5411\u6307\u5b9a\u5b50\u8868\u8ffd\u52a0\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.delete_data","title":"delete_data(start_row, end_row)","text":"<p>\u5220\u9664\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.delete_subtable_data","title":"delete_subtable_data(tbName, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.register_column_generator","title":"register_column_generator(column_name, generator_func)","text":"<p>\u6ce8\u518c\u67d0\u4e2a\u5217\u540d\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u751f\u6210\u51fd\u6570 :param column_name: str, \u5217\u540d :param generator_func: function(row_index: int, timestamp: int) -&gt; str</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.reset_columns","title":"reset_columns()","text":"<p>\u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u5217\u5b9a\u4e49</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setInterval","title":"setInterval(interval)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u95f4\u9694 :param interval: int, \u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u4e3a\u79d2</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setLogOpen","title":"setLogOpen(logOpen)","text":"<p>\u8bbe\u7f6e\u65e5\u5fd7\u5f00\u5173 :param logOpen: bool, \u662f\u5426\u5f00\u542f\u65e5\u5fd7</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setPrecision","title":"setPrecision(precision)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u7cbe\u5ea6 :param precision: str, \u65f6\u95f4\u7cbe\u5ea6\uff0c\u652f\u6301 \"ms\", \"us\", \"ns\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setStart","title":"setStart(start)","text":"<p>\u8bbe\u7f6e\u8d77\u59cb\u65f6\u95f4 :param start: str, \u8d77\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3a \"YYYY-MM-DD HH.MM.SS\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.set_columns","title":"set_columns(column_def)","text":"<p>\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u5217\u5b9a\u4e49 :param column_def: str\uff0c\u4f8b\u5982 \"ts timestamp, val int\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.update_data","title":"update_data(start_row, end_row)","text":"<p>\u66f4\u65b0\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.update_subtable_data","title":"update_subtable_data(tbName, start_row, end_row)","text":"<p>\u66f4\u65b0\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#autogen","title":"<code>autogen</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#rawblock","title":"<code>rawblock</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil","title":"<code>mqttUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil","title":"<code>MqttUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkQos","title":"checkQos(expectedQos, show=False)","text":"<p>Checks if the qos fetched by the last subscription matches the expected qos.</p> <p>Parameters:</p> Name Type Description Default <code>expectedQos</code> <code>int</code> <p>The expected qos.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the qos matches the expected qos, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of qos does not match the expected qos.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last subscription matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last sub.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last sub.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#compatibilityUtil","title":"<code>compatibilityUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#compatibilityUtil.CompatibilityBase","title":"<code>CompatibilityBase</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#compatibilityUtil.CompatibilityBase.alter_string_in_file","title":"alter_string_in_file(file, old_str, new_str)","text":"<p>replace str in file :param file :param old_str :param new_str :return:</p>"}]}