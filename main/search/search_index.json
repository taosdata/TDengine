{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TDengine Cases Docs","text":"<p>You can switch branches on this page. For more information about how to run cases, see README.</p> <p>Case list can be found on the top bar case list docs.</p> <p>For more information about how to write new case docstring format, see Test Case Specification</p>"},{"location":"case_list_docs/Cluster/","title":"70-Cluster","text":""},{"location":"case_list_docs/Cluster/#70-Cluster.test_cluster_arbitrator.TestClusterArbitrator.test_cluster_arbitrator","title":"","text":"Cluster arbitrator basic 1. Create cluster with 3 dnodes 2. Create a database and a stable with 2 replicas 3. Create a child table 4. Stop one dnode which is follower 5. Check the vgroup status to be assigned 6. Insert data into the child table 7. Check inserted data is correct 8. Restart the dnodes 9. Check the vgroup status to be candidate 10. Check \"show arbgroups\" result                      path:                                            cases/70-Cluster/test_cluster_arbitrator.py"},{"location":"case_list_docs/Cluster/#70-Cluster.test_cluster_drop_table_by_uid.TestClusterDropTableByUid.test_drop_table_by_uid","title":"","text":"Verify drop table by uid on cluster 1. Create cluster with 3 dnodes 2. Verify the feature of 'drop table by uid' for TS-5111 on cluster FS: https://taosdata.feishu.cn/wiki/JgeDwZkH3iTNv2ksVkWcHenKnTf TS: https://taosdata.feishu.cn/wiki/DX3FwopwGiXCeRkBNXFcj0MBnnb                      path:                                            cases/70-Cluster/test_cluster_drop_table_by_uid.py"},{"location":"case_list_docs/Cluster/#70-Cluster.test_cluster_inc_snapshot.TestIncSnapshot.test_inc_snapshot","title":"","text":"Check data correct after remove wal 1. Create 3 dnode cluster environment 2. Create database with 2 vgroups and 3 replicas 3. Create stable and child tables 4. Insert initial data and flush 5. Stop one dnode and insert more data 6. Take incremental snapshot 7. Stop all dnodes and remove wal directories 8. Restart all dnodes and check vgroup status 9. Check data correctness and aggregation correctness                      path:                                            cases/70-Cluster/test_cluster_inc_snapshot.py"},{"location":"case_list_docs/Cluster/#70-Cluster.test_cluster_snapshot.TestSnapshot.test_snapshot","title":"","text":"Check data correct after cluster actions 1. Create 3 dnode cluster environment 2. taosBenchmark insert data with full data-type columns 3. Check taosBenchmark insert data correct 4. Save snapshot with snapshot aggregation like avg, min, max, sum, count 5. Do cluster action: split vgroups, trim, balance vgroup leaders, alter replica, compact 6. Check snapshot aggregation result correct 7. Check taosBenchmark insert data correct again 8. Check float double value correct again                      path:                                            cases/70-Cluster/test_cluster_snapshot.py"},{"location":"case_list_docs/Cluster/#70-Cluster.test_cluster_split_vgroup_by_learner.TestClusterSplitVgroupByLearner.test_split_vgroup_by_learner","title":"","text":"Check data correct after cluster actions 1. Create 3 dnode cluster environment 2. taosBenchmark insert data with full data-type columns 3. Check taosBenchmark insert data correct 4. Save snapshot with snapshot aggregation like avg, min, max, sum, count 5. Do cluster action: split vgroups, trim, balance vgroup leaders, alter replica, compact 6. Check snapshot aggregation result correct 7. Check taosBenchmark insert data correct again 8. Check float double value correct again                      path:                                            cases/70-Cluster/test_cluster_split_vgroup_by_learner.py"},{"location":"case_list_docs/Cluster/#70-Cluster.test_cluster_tsdb_snapshot.TestClusterTsdbSnapshot.test_tsdb_snapshot","title":"","text":"Remove wal files to check on cluster 1. Create 3 dnode cluster environment 2. taosBenchmark insert 1 stb 100 child tables with 3 replica 3. flush database 4. stop dnode 3 5. taosBenchmark insert more data into the stb again 6. flush database 7. stop all dnodes 8. remove wal files from dnode1 and dnode2 9. start all dnodes 10. check coredump not happen                      path:                                            cases/70-Cluster/test_cluster_tsdb_snapshot.py"},{"location":"case_list_docs/DataCompression/","title":"08-Data Compression","text":""},{"location":"case_list_docs/DataCompression/#08-DataCompression.test_compress_alter_option.TestCompressAlterOption.test_compress_alter_option","title":"","text":"Compress: alter options 1. Create a table containing data types including BOOL, TINYINT, SMALLINT, INT, BIGINT, FLOAT, DOUBLE, and BINARY; 2. insert records and query the results 3. Modify compression settings (compression option, level, and encoding method), including disabling compression entirely, then query the results 4. Execute FLUSH DATABASE and restart the taosdservice 5. Insert new data again and continue querying the results                      path:                                            cases/08-DataCompression/test_compress_alter_option.py"},{"location":"case_list_docs/DataCompression/#08-DataCompression.test_compress_alter_table.TestCompressBasic.test_compress_basic","title":"","text":"Compress: alter table 1. Insert data 2. Modify table structure 3. Execute FLUSH DATABASE 4. Insert data again and query the results                      path:                                            cases/08-DataCompression/test_compress_alter_table.py"},{"location":"case_list_docs/DataCompression/#08-DataCompression.test_compress_basic.TestCompressBasic.test_compress_basic","title":"","text":"Tool system tables inspect 1. Create 1 stb(17 columns) and 4 child tables 2. Insert each child table 1000 rows data 3. Check default encode/compress/level is correct 4. Alter encode/compress/level for columns and insert data 5. flush database 6. Add columns with encode/compress/level and insert data 7. Check all data is correct 8. Check error create/alter/add column with encode/compress/level                      path:                                            cases/08-DataCompression/test_compress_basic.py"},{"location":"case_list_docs/DataCompression/#08-DataCompression.test_compress_one_stage.TestOneStageComp.test_one_stage_comp","title":"","text":"Check compress data accuracy 1. taosBenchmark create 1 stb 10 ctb 2. Insert each child table 100000 rows with fixed column values 3. Check data accuracy with column value is not equal to fixed value 4. Check data accuracy with column value is equal to fixed value 5. Do snapshot aggregation 6. Check aggregation result correctness 7. Insert null values into all columns except timestamp column 8. Check null values correctness                      path:                                            cases/08-DataCompression/test_compress_one_stage.py"},{"location":"case_list_docs/DataDeletion/","title":"07-Data Deletion","text":""},{"location":"case_list_docs/DataDeletion/#07-DataDeletion.test_delete.TestInsertDelete.test_insert_delete","title":"","text":"Delete data 1. Deleting data from normal tables 2. Deleting data from super tables 3. Deleting data from child tables                      path:                                            cases/07-DataDeletion/test_delete.py"},{"location":"case_list_docs/DataDeletion/#07-DataDeletion.test_delete_childtable.TestDeleteChildtable.test_delete_childtable","title":"","text":"Delete Data in Child Table 1. Create child table 2. Insert data into child table 3. Delete data from child table with one row, all rows, multiple rows  4. Delete data from child table with error sql 5. Check  data in child table                      path:                                            cases/07-DataDeletion/test_delete_childtable.py"},{"location":"case_list_docs/DataDeletion/#07-DataDeletion.test_delete_normaltable.TestDeleteNormaltable.test_delete_normaltable","title":"","text":"Delete Data in Normal Table 1. Create normal table 2. Insert data into normal table 3. Delete data from normal table with one row, all rows, multiple rows 4. Delete data from normal table with error sql 5. Check  data in normal table                      path:                                            cases/07-DataDeletion/test_delete_normaltable.py"},{"location":"case_list_docs/DataDeletion/#07-DataDeletion.test_delete_stable.TestDeleteStable.test_delete_stable","title":"","text":"Delete Data in Super Table 1. Create super table 2. Insert data into super table 3. Delete data from super table with one row, all rows, multiple rows 4. Delete data from super table with error sql 5. Check  data in super table                      path:                                            cases/07-DataDeletion/test_delete_stable.py"},{"location":"case_list_docs/DataSubscription/","title":"17-Data Subscription","text":""},{"location":"case_list_docs/DataTypes/","title":"01-Data Types","text":""},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_column_tag_boundary.TestColumnTagBoundary.test_column_tag_boundary","title":"","text":"Column and tag boundary 1. Create stable with max column and tag length 2. Insert data with max column and tag length 3. Verify data correctness with query 4. Create column/tag with binary 5. Create column/tag with varchar 6. Create column/tag with nchar 7. Create column/tag with varbinary 8. Create tag with json 9. Insert data with chinese sring on nchar                      path:                                            cases/01-DataTypes/test_column_tag_boundary.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_bigint.TestDatatypeBigInt.test_datatype_bigint","title":"","text":"DataTypes: bigint 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_bigint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_blob.TestDatatypeBlob.test_datatype_blob","title":"","text":"DataTypes: blob 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_blob.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_bool.TestDatatypeBool.test_datatype_bool","title":"","text":"DataTypes: bool 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_bool.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_decimal.TestDatatypeDecimal.test_datatype_decimal","title":"","text":"DataTypes: decimal test decimal types filtering with tag conditions crash fix                      path:                                            cases/01-DataTypes/test_datatype_decimal.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_decimal1.TestDecimal.test_decimal","title":"","text":"DataTypes: decimal1 1. check decimal ddl 2. no decimal table test 3. insert decimal values 4. query decimal values                      path:                                            cases/01-DataTypes/test_datatype_decimal1.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_decimal2.TestDecimal2.test_decimal2","title":"","text":"DataTypes: decimal2 1. check decimal ddl 2. insert decimal values 3. query decimal values                      path:                                            cases/01-DataTypes/test_datatype_decimal2.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_decimal3.TestDecimal3.test_decimal3","title":"","text":"DataTypes: decimal3 1. check decimal ddl 2. check insert decimal values 3. check query decimal 4. check decimal and view                      path:                                            cases/01-DataTypes/test_datatype_decimal3.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_double.TestDatatypeDouble.test_datatype_double","title":"","text":"DataTypes: double 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_double.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_float.TestDatatypeFloat.test_datatype_float","title":"","text":"DataTypes: float 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_float.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_geometry.TestDatatypeGeometry.test_datatype_geometry","title":"","text":"DataTypes: geometry 1. Create stable with geometry datatype on column and tag 2. Insert and query data with geometry datatype 3. Automatically create child table with geometry datatype on tag 4. Alter tag value with geometry datatype 5. Test illegal input for geometry datatype 6. Create normal table with geometry datatype on column 7. Insert and query data with geometry datatype 8. Insert geometry column/tag with NULL value 9. Insert geometry format: POINT/LINESTRING/POLYGON,/MULTIPOINT/MULTILINESTRING/MULTIPOLYGON/GEOMETRYCOLLECTION                      path:                                            cases/01-DataTypes/test_datatype_geometry.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_int.TestDatatypeInt.test_datatype_int","title":"","text":"DataTypes: int 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_int.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_json.TestDatatypeJson.test_datatype_json","title":"","text":"DataTypes: json 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_json.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_nchar1.TestDatatypeNchar.test_datatype_nchar","title":"","text":"DataTypes: nchar 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_nchar1.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_nchar2.TestNChar.test_nchar","title":"","text":"DataTypes: nchar (Chinese) 1. Create table 2. Insert data 3. Query data                      path:                                            cases/01-DataTypes/test_datatype_nchar2.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_smallint.TestDatatypeSmallint.test_datatype_smallint","title":"","text":"DataTypes: smallint 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_smallint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_timestamp.TestDatatypeTimestamp.test_datatype_timestamp","title":"","text":"DataTypes: timestamp 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_timestamp.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_tinyint.TestDatatypeTinyint.test_datatype_tinyint","title":"","text":"DataTypes: tinyint 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_tinyint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_uint.TestDatatypeUint.test_datatype_uint","title":"","text":"DataTypes: unsigned int 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_uint.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_unsign.TestDatatypeUnsigned.test_datatype_unsigned","title":"","text":"DataTypes: unsigned numeric 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_unsign.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_varbinary.TestDatatypeVarbinary.test_datatype_varbinary","title":"","text":"DataTypes: varbinary 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_varbinary.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_datatype_varchar.TestDatatypeVarchar.test_datatype_varchar","title":"","text":"DataTypes: varchar 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_varchar.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_null_column.TestNullColumn.test_null_column","title":"","text":"NULL: column 1. Create table 2. Insert data with NULL 3. Query data                      path:                                            cases/01-DataTypes/test_null_column.py"},{"location":"case_list_docs/DataTypes/#01-DataTypes.test_null_tag.TestNullTag.test_null_tag","title":"","text":"NULL: tag 1. Create table with NULL tags 2. Select tags 3. Alter tags                      path:                                            cases/01-DataTypes/test_null_tag.py"},{"location":"case_list_docs/DocTest/","title":"83-DocTest","text":""},{"location":"case_list_docs/Escape/","title":"29-Escape Characters","text":""},{"location":"case_list_docs/Escape/#29-Escape.test_binary_escape_character.TestBinaryEscapeCharacter.test_binary_escape_character","title":"","text":"Escape character 1. Validates escape characters in binary data types 2. Test the insertion and retrieval of strings containing various escape sequences like single quotes ('), double quotes (\"), and backslashes () within binary columns. 3. Ensures that these special characters are correctly stored, processed, and returned in query results without causing parsing errors or data corruption.                      path:                                            cases/29-Escape/test_binary_escape_character.py"},{"location":"case_list_docs/Except/","title":"28-Except","text":""},{"location":"case_list_docs/JoinQueries/","title":"14-Join Queries","text":""},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join.TestJoin.test_join","title":"","text":"Join basic 1. Join with inner/left/right/outer/asof/semi/anti/full 2. Join with tb1.ts = tb2.ts 3. Join with tb1.int = tb2.int limit  4. Join with tb1.int = tb2.int and ts filter 5. Join with multiple tables 6. Join with group by 7. Join with having condition 8. Join error cases 9. Cross database join test 10. Join semantic test 11. Verify bug TS-5863                      path:                                            cases/14-JoinQueries/test_join.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join2.TestJoin2.test_join2","title":"","text":"Join basic2 1. Generate join sql with different join conditions and query conditions 2. Generate error join sql with wrong join conditions and check error status 3. Join with group by and having clause 4. Join with where clause                      path:                                            cases/14-JoinQueries/test_join2.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_compare.TestCompare.test_join_compare","title":"","text":"Join compare from different data types 1. Create normal tables with full data types 2. Insert 6 rows data 3. Check in and not in filter 4. Check &gt;, &lt;, = comparisons between different data types 6. Left join with different data types comparison conditions                      path:                                            cases/14-JoinQueries/test_join_compare.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_const.TestJoinConst.test_join_const","title":"","text":"Join compare from different data types 1. Create stable sta/stb 2. Create child table a1/a2 from sta, b1/b2 from stb 3. Insert 4 rows data into a1/a2, b1/b2 4. Read query sql from .in file and execute 5. Validate the query result with expected .csv file 6. File .in sql include now()/today() and constant timestamps 7. File .in sql include inner/outer/semi/anti join                      path:                                            cases/14-JoinQueries/test_join_const.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_full.TestJoinFull.test_join_full","title":"","text":"Join Test Full 1. test full_join 2. test inner_join 3. test join_boundary 4. test join_explain 5. test join_nested 6. test join_scalar1 7. test join_scalar2 8. test join_timeline 9. test left_anti_join 10. test left_asof_join 11. test left_join 12. test left_semi_join 13. test left_win_join 14. test right_anti_join 15. test right_asof_join 16. test right_join 17. test right_semi_join 18. test right_win_join 19. restart and test again                      path:                                            cases/14-JoinQueries/test_join_full.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_full2.TestJoin.test_join","title":"","text":"Join Test Full2 1. Create necessary databases and tables 2. Insert test data into the tables 3. Join with inner/left/outer/full/semi/anti/asof 4. Join with composite primary key (int32, int64, str) 5. Validate the results of each join query against expected outcomes 6. Join with us/ns/ms precision timestamps 7. Error join checked                      path:                                            cases/14-JoinQueries/test_join_full2.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_interval.TestJoinInterval.test_join_interval","title":"","text":"Join Test 1.                      path:                                            cases/14-JoinQueries/test_join_interval.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_manyblocks.TestJoinManyBlocks.test_join_manyblocks","title":"","text":"Join Test Manyblocks 1.                      path:                                            cases/14-JoinQueries/test_join_manyblocks.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_multitables.TestJoinMultitables.test_join_multitables","title":"","text":"Join Test Multitables 1.                      path:                                            cases/14-JoinQueries/test_join_multitables.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_multivnode.TestJoinMultivnode.test_join_multivnode","title":"","text":"Join Test Multivnode 1.                      path:                                            cases/14-JoinQueries/test_join_multivnode.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_ns_db.TestJoinNsDb.test_join_ns_db","title":"","text":"Join Test 1.                      path:                                            cases/14-JoinQueries/test_join_ns_db.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_order.TestJoinOrder.test_join_order","title":"","text":"Join Test 1.                      path:                                            cases/14-JoinQueries/test_join_order.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_pk.TestJoinPk.test_join_pk","title":"","text":"Join Test 1.                      path:                                            cases/14-JoinQueries/test_join_pk.py"},{"location":"case_list_docs/JoinQueries/#14-JoinQueries.test_join_tbname.TestJoin.test_join","title":"","text":"Join Test 1.                      path:                                            cases/14-JoinQueries/test_join_tbname.py"},{"location":"case_list_docs/MetaData/","title":"21-Meta Data","text":""},{"location":"case_list_docs/MetaData/#21-MetaData.test_meta_bugs.TestMetaBugs.test_meta_bugs","title":"","text":"Meta bugs 1. Verify bug TS-5394                      path:                                            cases/21-MetaData/test_meta_bugs.py"},{"location":"case_list_docs/MetaData/#21-MetaData.test_meta_sysdb.TestDdlInSysdb.test_ddl_in_sysdb","title":"","text":"Meta system db same name check 1. Create/Drop Database with same name as system database 2. Restart taosd service 3. Create/Drop Table with same name as system table                      path:                                            cases/21-MetaData/test_meta_sysdb.py"},{"location":"case_list_docs/MetaData/#21-MetaData.test_meta_sysdb.TestDdlInSysdb.test_func_sys_tbname","title":"","text":"Meta ins_stables 1. Creating databases with super/child/normal tables for metadata testing 2. Executing comprehensive queries on information_schema tables (ins_databases/ins_stables/ins_tables) 3. Testing large-scale stable table creation (70+ stables per database) 4. Verifying partition and limit operations on system tables 5. Checking table counting and distinct value operations                      path:                                            cases/21-MetaData/test_meta_sysdb.py"},{"location":"case_list_docs/MetaData/#21-MetaData.test_meta_sysdb.TestDdlInSysdb.test_table_count","title":"","text":"Meta ins_tables 1. Tests various grouping queries on information_schema.ins_tables 2. Verifies accurate row counts for different table categories                      path:                                            cases/21-MetaData/test_meta_sysdb.py"},{"location":"case_list_docs/MetaData/#23-ShowCommands.test_show_tables.TestShowDbTableKind.test_show_db_table_kind","title":"","text":"Show Databases and Tables 1. Testing various show commands for database/table classification 2. Verifying filtering capabilities with like clauses 3. Checking metadata consistency across different database contexts                      path:                                            cases/23-ShowCommands/test_show_tables.py"},{"location":"case_list_docs/Mount/","title":"27-Mount","text":""},{"location":"case_list_docs/NameLimits/","title":"30-Name &amp; Limits","text":""},{"location":"case_list_docs/NameLimits/#30-NameLimits.test_boundary.TestBoundary.test_boundary","title":"","text":"Name Length Boundary Check 1. Database name length boundary check 2. Table name length boundary check 3. Column name length boundary check 4. Tag name length boundary check 5. User name length boundary check 6. Password length boundary check 7. SQL length boundary check 8. Row/Column/Tag max length check                      path:                                            cases/30-NameLimits/test_boundary.py"},{"location":"case_list_docs/NameLimits/#30-NameLimits.test_db_tb_name_check.TestDbTbNameCheck.test_db_tb_name_check","title":"","text":"Check Database/Table Name validation 1. Database name validation 2. Table name validation                      path:                                            cases/30-NameLimits/test_db_tb_name_check.py"},{"location":"case_list_docs/NameLimits/#30-NameLimits.test_dbtbname_validate.TestDbTbNameValidate.test_dbtbname_validate","title":"","text":"Database and table name 1. Validates naming conventions and boundary checks for databases and tables. 2. Verifies both valid and invalid identifiers across operations like CREATE, USE, DROP, and DESCRIBE, including handling of quoted identifiers and case sensitivity. 3. Ensures compliance with naming rules, which allow only English letters, numbers, and underscores, and prohibit names starting with numbers or containing spaces.                      path:                                            cases/30-NameLimits/test_dbtbname_validate.py"},{"location":"case_list_docs/NodeManager/","title":"26-Node Manager","text":""},{"location":"case_list_docs/Operators/","title":"10-Operators","text":""},{"location":"case_list_docs/PerformanceData/","title":"22-Performance Data","text":""},{"location":"case_list_docs/Privileges/","title":"25-Privileges","text":""},{"location":"case_list_docs/Privileges/#25-Privileges.test_priv_basic.TestPrivBasic.test_priv_basic","title":"","text":"Privileges basic 1. Test common user privileges 2. Test common user with create database privilege                      path:                                            cases/25-Privileges/test_priv_basic.py"},{"location":"case_list_docs/Privileges/#25-Privileges.test_priv_bugs.TestGrantBugs.test_grant_bugs","title":"","text":"Privileges bugs 1. Verify bug TD-3064                      path:                                            cases/25-Privileges/test_priv_bugs.py"},{"location":"case_list_docs/RSMAs/","title":"20-RSMAs","text":""},{"location":"case_list_docs/RSMAs/#20-RSMAs.test_rsma.TestCase.test_rsma","title":"","text":"Test case for rsma. 1. Exceptional cases. 2. Retention task monitor. 3. Rollup automatically when execute: trim database &lt;db_name&gt;. 4. Rollup manually when execute: rollup database &lt;db_name&gt;.                      path:                                            cases/20-RSMAs/test_rsma.py"},{"location":"case_list_docs/ShowCommands/","title":"23-Show Commands","text":""},{"location":"case_list_docs/ShowCommands/#23-ShowCommands.test_show_alive.TestShowAlive.test_show_alive","title":"","text":"Show Alive Continuously start and stop multiple dnodes to verify the returned results of show alive.                      path:                                            cases/23-ShowCommands/test_show_alive.py"},{"location":"case_list_docs/ShowCommands/#23-ShowCommands.test_show_basic.TestShowBasic.test_show_basic","title":"","text":"Show Command Basic Test Case 1. Verify show commands result with information_schema database 2. Verify show commands result after dnode restarts 3. Checking error handling for invalid operations 4. Check show command include:    show dnodes/modes/qnodes/databases/functions/stables/tables/vgroups    show apps/connections/consumers/queries/transactions/views/tags    show variables/local variables/cluster variables/compacts/cluster    show licences/grants/users    show create database/stable/table                      path:                                            cases/23-ShowCommands/test_show_basic.py"},{"location":"case_list_docs/ShowCommands/#23-ShowCommands.test_show_create_db.TestShowCreateDb.test_show_create_db","title":"","text":"Show Create Database 1. Create three databases with different options 2. Check \"show create database dbname\" output correctness 3. Restart taosd and recheck the output correctness 4. Drop and recreate the databases, recheck the output correctness                      path:                                            cases/23-ShowCommands/test_show_create_db.py"},{"location":"case_list_docs/ShowCommands/#23-ShowCommands.test_show_diskinfo.TestShowDiskInfo.test_show_disk_info","title":"","text":"Show DiskInfo 1. Create super tables and child tables, then write data 2. Perform a FLUSH operation on the database 3. Execute the show disk_info statement                      path:                                            cases/23-ShowCommands/test_show_diskinfo.py"},{"location":"case_list_docs/ShowCommands/#23-ShowCommands.test_show_table_distributed.TestShowTableDistributed.test_show_table_distributed","title":"","text":"Show Table Distributed 1. Tests basic distributed table display for super/normal/temporary tables 2. Verifies error handling for system/internal tables 3. Includes block distribution validation with data insertion 4. Checks metadata consistency after operations 5. Covers edge cases from TD-5998/TD-22140/T                      path:                                            cases/23-ShowCommands/test_show_table_distributed.py"},{"location":"case_list_docs/ShowCommands/#23-ShowCommands.test_show_tables.TestShowDbTableKind.test_show_db_table_kind","title":"","text":"Show Databases and Tables 1. Testing various show commands for database/table classification 2. Verifying filtering capabilities with like clauses 3. Checking metadata consistency across different database contexts                      path:                                            cases/23-ShowCommands/test_show_tables.py"},{"location":"case_list_docs/StreamProcessing/","title":"18-Stream Processing","text":""},{"location":"case_list_docs/TSMAs/","title":"19-TSMAs","text":""},{"location":"case_list_docs/TSMAs/#19-TSMAs.test_tsma.TestTsma.test_tsma","title":"","text":"tsma test tsma                      path:                                            cases/19-TSMAs/test_tsma.py"},{"location":"case_list_docs/TagIndices/","title":"15-Tag Indices","text":""},{"location":"case_list_docs/TagIndices/#15-TagIndices.test_index_create_drop.TestIndexCreateDrop.test_index_create_drop","title":"","text":"Tagindex: create and drop 1. Create a super table 2. Create an index on a specific tag column 3. Query using the indexed tag 4. Drop the existing index 5. Query using the tag whose index was just dropped                      path:                                            cases/15-TagIndices/test_index_create_drop.py"},{"location":"case_list_docs/TagIndices/#15-TagIndices.test_index_overflow.TestIndexOverflow.test_index_overflow","title":"","text":"Tagindex: overflow 1. Create a super table 2. Set a wide value range for a specific tag column 3. Create an index on that tag column 4. Query using the indexed tag                      path:                                            cases/15-TagIndices/test_index_overflow.py"},{"location":"case_list_docs/TagIndices/#15-TagIndices.test_index_perf.TestIndexPerf.test_index_perf","title":"","text":"Tagindex: perf 1. Create a super table 2. Create a large number of child tables (this example uses 10, but should use 100,000 after the data preloading feature is implemented) 3. Insert one record into each child table 4. Create an index 5. Query each child table using tag filtering                      path:                                            cases/15-TagIndices/test_index_perf.py"},{"location":"case_list_docs/UDFs/","title":"12-UDFs","text":""},{"location":"case_list_docs/UDFs/#12-UDFs.test_udf_c.TestUdfC.test_udf_c","title":"","text":"Udf 1.-                      path:                                            cases/12-UDFs/test_udf_c.py"},{"location":"case_list_docs/UDFs/#12-UDFs.test_udf_py.TestUdf.test_udf","title":"","text":"Udf 1.-                      path:                                            cases/12-UDFs/test_udf_py.py"},{"location":"case_list_docs/UDFs/#12-UDFs.test_udf_with_const.TestUdfPy.test_udf_py","title":"","text":"Udf Py 1.-                      path:                                            cases/12-UDFs/test_udf_with_const.py"},{"location":"case_list_docs/UnitTest/","title":"82-UnitTest","text":""},{"location":"case_list_docs/Users/","title":"24-Users","text":""},{"location":"case_list_docs/Users/#24-Users.test_user_basic.TestUserBasic.test_user_basic","title":"","text":"User: basic test 1. Verifies root user default privileges and restrictions on privilege modification attempts 2. Tests creation of users with different SYSINFO privilege levels (0/1) 3. Validates privilege alteration for enable/createdb/SYSINFO flags 4. Checks system persistence after dnode restart 5. Ensures proper error handling for invalid privilege values                      path:                                            cases/24-Users/test_user_basic.py"},{"location":"case_list_docs/Users/#24-Users.test_user_crypted_pass.TestUserPassword.test_user_password","title":"","text":"Password: crypted password Create encrypt_key and test to create user and login with crypted password                      path:                                            cases/24-Users/test_user_crypted_pass.py"},{"location":"case_list_docs/Users/#24-Users.test_user_passwd.TestPasswd.test_passwd","title":"","text":"Password call c unit test 1. Compile script/api/passwdTest.c to passwdTest 2. Run passwdTest and check retcode is 0                      path:                                            cases/24-Users/test_user_passwd.py"},{"location":"case_list_docs/Users/#24-Users.test_user_password.TestUserPassword.test_user_password","title":"","text":"Password: basic 1. Creation and modification of users with various password formats (valid/invalid patterns) 2. Verification of password complexity requirements (length/special characters) 3. Testing cross-user permission restrictions during password changes 4. Validation of system behavior with maximum password length boundaries 5. Special character handling in passwords and error case verification 6. Login with strong password                      path:                                            cases/24-Users/test_user_password.py"},{"location":"case_list_docs/Users/#24-Users.test_user_privilege_create_db.TestUserPrivilegeCreateDb.test_user_privilege_create_db","title":"","text":"Privilege: create db Verify user privileges for database creation, including grant, revoke, and query operations.                      path:                                            cases/24-Users/test_user_privilege_create_db.py"},{"location":"case_list_docs/Users/#24-Users.test_user_privilege_db.TestUserPrivilegeDb.test_user_privilege_db","title":"","text":"Privilege: db Verify user privileges related to database operations, including grant, revoke, and query privileges.                      path:                                            cases/24-Users/test_user_privilege_db.py"},{"location":"case_list_docs/Users/#24-Users.test_user_privilege_sysinfo.TestUserPrivilegeSysinfo.test_user_privilege_sysinfo","title":"","text":"Privilege: sysinfo Verify user privileges related to sysinfo operation, including grant, revoke, and query privileges.                      path:                                            cases/24-Users/test_user_privilege_sysinfo.py"},{"location":"case_list_docs/Users/#24-Users.test_user_privilege_table.TestUserPrivilegeTable.test_user_privilege_table","title":"","text":"Privilege:  table Verify user privileges related to table operations, including grant, revoke, and query privileges.                      path:                                            cases/24-Users/test_user_privilege_table.py"},{"location":"case_list_docs/Users/#24-Users.test_user_privilege_topic.TestUserPrivilegeTopic.test_user_privilege_topic","title":"","text":"Privilege: topic Verify user privileges related to topic operations, including grant, revoke, and query privileges.                      path:                                            cases/24-Users/test_user_privilege_topic.py"},{"location":"case_list_docs/Users/#24-Users.test_user_whitelist.TestUserWhiteList.test_user_whitelist","title":"","text":"Whitelist: basic test Verify basic usage of whitelist functionality, including creation and display operations.                      path:                                            cases/24-Users/test_user_whitelist.py"},{"location":"case_list_docs/Views/","title":"16-Views","text":""},{"location":"case_list_docs/Views/#16-Views.test_view_mgmt.TestViewMgmt.test_view_mgmt","title":"","text":"\u89c6\u56fe\u7ba1\u7406 1. \u521b\u5efa\u4e09\u4e2a\u8d85\u7ea7\u8868 2. \u521b\u5efa\u5b50\u8868\u5e76\u5199\u5165\u6570\u636e 3. \u6743\u9650\u6d4b\u8bd5 4. \u521b\u5efa\u3001\u5220\u9664\u6d4b\u8bd5 5. \u5199\u5165\u6d4b\u8bd5 6. \u6d41\u8ba1\u7b97\u6d4b\u8bd5\uff08\u5f85\u6d41\u8ba1\u7b97\u91cd\u6784\u540e\u518d\u8fc1\u79fb\uff09 7. Show/Desc \u6d4b\u8bd5 8. \u540c\u540d\u8868\u6d4b\u8bd5 9. \u91cd\u542f\u670d\u52a1\u7aef 10. \u91cd\u590d\u4ee5\u4e0a\u6d4b\u8bd5 11. \u4fee\u6539\u53c2\u6570 keepColumnName \u4e3a 1 12. \u91cd\u590d\u4ee5\u4e0a\u6d4b\u8bd5                      path:                                            cases/16-Views/test_view_mgmt.py"},{"location":"case_list_docs/Views/#16-Views.test_view_nested_join.TestViewNestedJoin.test_view_nested_join","title":"","text":"\u5e26\u5d4c\u5957\u67e5\u8be2\u7684\u590d\u6742\u89c6\u56fe 1. \u521b\u5efa\u666e\u901a\u8868\u3001\u5b50\u8868 2. \u521b\u5efa\u5305\u542b\u5d4c\u5957\u67e5\u8be2\u7684\u590d\u6742\u89c6\u56fe 3. \u67e5\u8be2\u89c6\u56fe                      path:                                            cases/16-Views/test_view_nested_join.py"},{"location":"case_list_docs/VirtualTables/","title":"05-Virtual Tables","text":""},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_normal_table","title":"","text":"Alter: virtual normal table 1. add column 2. drop column 3. change column reference 4. change column type length 5. change column name                      path:                                            cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_child_table","title":"","text":"Alter: virtual child table 1. change column reference 2. change tag value                      path:                                            cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_super_table","title":"","text":"Alter: virtual super table 1. add column 2. drop column 3. change column type length 4. add tag 5. drop tag 6. change tag name 7. change tag length                      path:                                            cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_alter_virtual_super_table_and_create_child","title":"","text":"Alter: virtual super table then create child table 1. add column 2. drop column                      path:                                            cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_alter.TestVtableAlter.test_error_cases","title":"","text":"Alter: virtual table errors 1. normal table 2. child table 3. super table                      path:                                            cases/05-VirtualTables/test_vtable_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_alter_normaltable.TestVtableAuthAlterDrop.test_alter_drop_virtual_normal_table","title":"","text":"Auth: alter virtual normal table test \"write\", \"read\", \"none\", \"all\" each auth user alter opration                      path:                                            cases/05-VirtualTables/test_vtable_auth_alter_normaltable.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_alter_subtable.TestVtableAuthAlterDropChild.test_alter_drop_virtual_child_table","title":"","text":"Auth: alter virtual child table test \"write\", \"read\", \"none\", \"all\" each auth user alter opration                      path:                                            cases/05-VirtualTables/test_vtable_auth_alter_subtable.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_create.TestVtableAuthCreate.test_create_virtual_normal_table","title":"","text":"Auth: create virtual normal table test \"write\", \"read\", \"none\", \"all\" each auth user create opration                      path:                                            cases/05-VirtualTables/test_vtable_auth_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_create.TestVtableAuthCreate.test_create_virtual_child_table","title":"","text":"Auth: create virtual child table test \"write\", \"read\", \"none\", \"all\" each auth user create opration                      path:                                            cases/05-VirtualTables/test_vtable_auth_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_select.TestVtableAuthSelect.test_select_virtual_normal_table","title":"","text":"Auth: select virtual normal table test \"write\", \"read\", \"none\", \"all\" each auth user select opration                      path:                                            cases/05-VirtualTables/test_vtable_auth_select.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_auth_select.TestVtableAuthSelect.test_select_virtual_child_table","title":"","text":"Auth: select virtual child table test \"write\", \"read\", \"none\", \"all\" each auth user select opration                      path:                                            cases/05-VirtualTables/test_vtable_auth_select.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_create_virtual_super_table","title":"","text":"Create: virtual super table test create virtual super tables                      path:                                            cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_create_virtual_child_table","title":"","text":"Create: virtual child table 1.create virtual child table and don't use 'FROM' to specify the origin table 2.create virtual child table and use 'FROM' to specify the origin table                      path:                                            cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_create_virtual_normal_table","title":"","text":"Create: virtual normal table test create virtual normal tables                      path:                                            cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_create.TestVtableCreate.test_error_cases","title":"","text":"Create: virtual table errors 1. create virtual child table using non-virtual super table 2. create child table using virtual super table 3. create virtual child table using non-exist super table 4. column definition different from referenced column 5. set data source for primary timestamp column 6. data source column does not exist 7. data source table does not exist 8. data source table has composite primary key 9. data source is tag 10. create virtual child table using from to specify some columns and do not use from for other columns 11. create virtual table using decimal                      path:                                            cases/05-VirtualTables/test_vtable_create.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_child_table","title":"","text":"Drop: virtual child table test drop virtual child tables                      path:                                            cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_normal_table","title":"","text":"Drop: virtual normal table test drop virtual normal tables                      path:                                            cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_super_table","title":"","text":"Drop: virtual super table test drop virtual super table                      path:                                            cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_drop.TestVtableDrop.test_drop_virtual_not_exists","title":"","text":"Drop: virtual table errors test drop virtual not exists                      path:                                            cases/05-VirtualTables/test_vtable_drop.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_insert.TestVtableInsert.test_vtable_insert","title":"","text":"Insert: virtual table 1. Create db 2. Create supper table and sub table 3. Create virtual supper table and sub table 4. Create normal virtual table and normal table 5. Insert data into virtual super table or virtual sub table or virtual normal table, it should be return error                      path:                                            cases/05-VirtualTables/test_vtable_insert.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_join.TestVtableJoin.test_vtable_join","title":"","text":"Query: join test query virtual tables join                      path:                                            cases/05-VirtualTables/test_vtable_join.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_meta.TestVtableMeta.test_normal_query_new","title":"","text":"Query: meta test virtual table normal query                      path:                                            cases/05-VirtualTables/test_vtable_meta.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_after_alter.TestVtableQueryAfterAlter.test_virtual_stable_and_child_table","title":"","text":"Query: after alter super and child table test virtual table select after alter stable                      path:                                            cases/05-VirtualTables/test_vtable_query_after_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_after_alter.TestVtableQueryAfterAlter.test_virtual_normal_table","title":"","text":"Query: after alter normal table test virtual table select after alter normal table                      path:                                            cases/05-VirtualTables/test_vtable_query_after_alter.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_after_drop_origin_table.TestVtableQueryAfterDropOriginTable.test_query_after_drop","title":"","text":"Query: after drop test query after drop tables                      path:                                            cases/05-VirtualTables/test_vtable_query_after_drop_origin_table.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db.TestVtableQueryCrossDB.test_select_virtual_normal_table","title":"","text":"Query: v-ntable crossdb query 1. test vstable select normal table cross db projection 2. test vstable select normal table cross db projection filter 3. test vstable select normal table cross db projection timerange filter 4. test vstable select normal table cross db function 5. test vstable select normal table cross db interval 6. test vstable select normal table cross db state 7. test vstable select normal table cross db session 8. test vstable select normal table cross db event 9. test vstable select normal table cross db count 10. test vstable select normal table cross db partition 11. test vstable select normal table cross db group 12. test vstable select normal table cross db orderby                      path:                                            cases/05-VirtualTables/test_vtable_query_cross_db.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db.TestVtableQueryCrossDB.test_select_virtual_child_table","title":"","text":"Query: v-ctable crossdb query 1. test vstable select child table cross db projection 2. test vstable select child table cross db projection filter 3. test vstable select child table cross db projection timerange filter 4. test vstable select child table cross db function 5. test vstable select child table cross db interval 6. test vstable select child table cross db state 7. test vstable select child table cross db session 8. test vstable select child table cross db event 9. test vstable select child table cross db count 10. test vstable select child table cross db partition 11. test vstable select child table cross db group 12. test vstable select child table cross db orderby                      path:                                            cases/05-VirtualTables/test_vtable_query_cross_db.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db_stb_function.TestVtableQueryCrossDbStbFunction.test_select_virtual_super_table","title":"","text":"Query: v-stable crossdb function query 1. test vstable select super table cross db projection function                      path:                                            cases/05-VirtualTables/test_vtable_query_cross_db_stb_function.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db_stb_group.TestVtableQueryCrossDbStbGroup.test_select_virtual_super_table","title":"","text":"Query: v-stable crossdb group query 1. test vstable select super table cross db partition 2. test vstable select super table cross db group 3. test vstable select super table cross db orderby                      path:                                            cases/05-VirtualTables/test_vtable_query_cross_db_stb_group.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db_stb_project.TestVtableQueryCrossDbStb.test_select_virtual_super_table","title":"","text":"Query: v-stable crossdb porject query 1. test vstable select super table cross db projection 2. test vstable select super table cross db projection filter 3. test vstable select super table cross db projection timerange filter                      path:                                            cases/05-VirtualTables/test_vtable_query_cross_db_stb_project.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_cross_db_stb_window.TestVtableQueryCrossDbStbWindow.test_select_virtual_super_table","title":"","text":"Query: v-stable crossdb window query 1. test vstable select super table cross db interval 2. test vstable select super table cross db state 3. test vstable select super table cross db session 4. test vstable select super table cross db event 5. test vstable select super table cross db count                      path:                                            cases/05-VirtualTables/test_vtable_query_cross_db_stb_window.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_same_db.TestVTableQuerySameDB.test_select_virtual_normal_table","title":"","text":"Query: virtual normal table 1. test vstable select normal table projection 2. test vstable select normal table projection filter 3. test vstable select normal table projection timerange filter 4. test vstable select normal table interval 5. test vstable select normal table state 6. test vstable select normal table session 7. test vstable select normal table event 8. test vstable select normal table count 9. test vstable select normal table partition 10. test vstable select normal table group 11. test vstable select normal table orderby                      path:                                            cases/05-VirtualTables/test_vtable_query_same_db.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_same_db.TestVTableQuerySameDB.test_select_virtual_child_table","title":"","text":"Query: virtual child table 1. test vstable select child table projection 2. test vstable select child table projection filter 3. test vstable select child table projection timerange filter 4. test vstable select child table interval 5. test vstable select child table state 6. test vstable select child table session 7. test vstable select child table event 8. test vstable select child table count 9. test vstable select child table partition 10. test vstable select child table group 11. test vstable select child table orderby                      path:                                            cases/05-VirtualTables/test_vtable_query_same_db.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_same_db_stb_group.TestVTableQuerySameDBStbGroup.test_select_virtual_super_table","title":"","text":"Query: virtual super table from same db group query 1. test vstable select super table partition 2. test vstable select super table group 3. test vstable select super table orderby                      path:                                            cases/05-VirtualTables/test_vtable_query_same_db_stb_group.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_same_db_stb_project.TestVTableQuerySameDBStbProject.test_select_virtual_super_table","title":"","text":"Query: virtual super table from same db projection query 1. test vstable select super table projection 2. test vstable select super table projection filter 3. test vstable select super table projection timerange filter 4. test vstable select super table function                      path:                                            cases/05-VirtualTables/test_vtable_query_same_db_stb_project.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_same_db_stb_window.TestVTableQuerySameDBStbWindow.test_select_virtual_super_table","title":"","text":"Query: virtual super table from same db window query 1. test vstable select super table same db interval 2. test vstable select super table same db state 3. test vstable select super table same db session 4. test vstable select super table same db event 5. test vstable select super table same db count                      path:                                            cases/05-VirtualTables/test_vtable_query_same_db_stb_window.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_query_with_null_value.TestVTableQuery.test_select_virtualtable_with_null_value","title":"","text":"Query: virtual table with null value 1. test vtable select normal table projection with null value 2. test vtable select child table projection with null value 3. test vtable select super table projection with null value                      path:                                            cases/05-VirtualTables/test_vtable_query_with_null_value.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_schema_is_old.TestVTableSchemaIsOld.test_vtable_schema_is_old","title":"","text":"Query: old schema (bugfix) schema is old when origin table's column has same prefix during virtual supertable query                      path:                                            cases/05-VirtualTables/test_vtable_schema_is_old.py"},{"location":"case_list_docs/VirtualTables/#05-VirtualTables.test_vtable_show_tag.TestVtableShowTag.test_vtable_show_tag","title":"","text":"Query: show tag (bugfix) 1. Create db 2. Create supper table and sub table 3. Create virtual supper table and sub table 4. Show tag of virtual table and check the result                      path:                                            cases/05-VirtualTables/test_vtable_show_tag.py"},{"location":"case_list_docs/Components/TDgpt/","title":"10-TDgpt","text":""},{"location":"case_list_docs/Components/TDgpt/#80-Components.10-TDgpt.test_tdgpt.TestTDgptBasic.test_not_exists_anode","title":"","text":"anode \u8282\u70b9\u6d4b\u8bd5 1. \u521b\u5efa\u4e0d\u5b58\u5728\u7684anode                      path:                                            cases/80-Components/10-TDgpt/test_tdgpt.py"},{"location":"case_list_docs/Components/TDgpt/#80-Components.10-TDgpt.test_tdgpt.TestTDgptBasic.test_analysis","title":"","text":"\u8fdb\u884c\u5206\u6790\u8fc7\u7a0b 1. insert data and query, use tdgpt to analyze data                      path:                                            cases/80-Components/10-TDgpt/test_tdgpt.py"},{"location":"case_list_docs/Components/TDgpt/#80-Components.10-TDgpt.test_tdgpt.TestTDgptBasic.test_corr_table","title":"","text":"\u6d4b\u8bd5\u5355\u8868\u4e2d\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u67e5\u8be2 1. corr function query test cases on normal tables or child tables                      path:                                            cases/80-Components/10-TDgpt/test_tdgpt.py"},{"location":"case_list_docs/Components/TDgpt/#80-Components.10-TDgpt.test_tdgpt.TestTDgptBasic.test_corr_stable","title":"","text":"\u6d4b\u8bd5\u8d85\u7ea7\u8868\u4e2d\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u67e5\u8be2 1. corr function query test cases on super table                      path:                                            cases/80-Components/10-TDgpt/test_tdgpt.py"},{"location":"case_list_docs/Components/Taosc/","title":"02-Taosc","text":""},{"location":"case_list_docs/Components/Taosd/","title":"01-Taosd","text":""},{"location":"case_list_docs/Components/Taosd/#80-Components.01-Taosd.test_com_config.TestAlterConfig.test_alter_config","title":"","text":"Configuration basic 1. Verify alter support vnodes config 2. Verify alter ttl config 3. Verify alter bypass flag config 4. Verify alter audit config 5. Verify alter config on dnode 1 6. Verify alter timezone config 7. Verify alter memPoolReservedSizeMB config                      path:                                            cases/80-Components/01-Taosd/test_com_config.py"},{"location":"case_list_docs/Components/Taosd/#80-Components.01-Taosd.test_com_config_refresh.TestComTaosdConfigRefresh.test_com_taosd_config_refresh","title":"","text":"Configuration item hot refresh 1. Alter taos.cfg item by \"alter\" sql 2. Verify the altered item value take effect 3. Stop and restart taosd 4. Verify the altered item value take effect after restart 5. Config item include server and client side                      path:                                            cases/80-Components/01-Taosd/test_com_config_refresh.py"},{"location":"case_list_docs/Components/Taosd/#81-Tools.02-Taos.test_tool_cmdline.TestFullopt.test_tools_cmdline_taosd","title":"","text":"taosd command line test 1. Insert data with taosBenchmark json format 2. Check taosd all command lines                      path:                                            cases/81-Tools/02-Taos/test_tool_cmdline.py"},{"location":"case_list_docs/DataIngestion/Import/","title":"04-Import","text":""},{"location":"case_list_docs/DataIngestion/Import/#06-DataIngestion.04-Import.test_write_import_csv.TestInsertFromCsv.test_write_import_csv","title":"","text":"From CSV File 1. Create table and import data from csv file 2. Check the imported data                      path:                                            cases/06-DataIngestion/04-Import/test_write_import_csv.py"},{"location":"case_list_docs/DataIngestion/SML/","title":"03-SML","text":""},{"location":"case_list_docs/DataIngestion/SML/#06-DataIngestion.03-SML.test_write_sml_influxdb_line.TestInfluxdbLineTaoscInsert.test_write_sml_influxdb_line","title":"","text":"InfluxDB Line Protocol 1. Basic InfluxDB line protocol parsing 2. Automatic table schema creation   3. Data type inference and conversion 4. Dynamic schema evolution support 5. Batch insertion functionality 6. Multi-threading concurrent insertion 7. Column and tag limit validation 8. String length boundary testing 9. Error handling and validation 10. Timestamp format compatibility                      path:                                            cases/06-DataIngestion/03-SML/test_write_sml_influxdb_line.py"},{"location":"case_list_docs/DataIngestion/SML/#06-DataIngestion.03-SML.test_write_sml_opentsdb_json.TestOpentsdbJsonTaoscInsert.test_write_sml_opentsdb_json","title":"","text":"OpenTSDB Json Protocol 1. Basic OpenTSDB JSON protocol parsing 2. Automatic schema creation and evolution 3. Data type validation and conversion 4. Timestamp format compatibility testing 5. Multi-threading concurrent insertion safety 6. Table and column naming restrictions 7. Batch insertion functionality validation 8. String length and encoding boundaries 9. Error handling and exception management 10. Performance and memory usage optimization                      path:                                            cases/06-DataIngestion/03-SML/test_write_sml_opentsdb_json.py"},{"location":"case_list_docs/DataIngestion/SML/#06-DataIngestion.03-SML.test_write_sml_opentsdb_telnet.TestOpentsdbTelnetLineTaoscInsert.test_write_sml_opentsdb_telnet","title":"","text":"OpenTSDB Telnet Protocol 1. Basic OpenTSDB Telnet protocol parsing 2. Automatic table schema creation and evolution 3. Data type validation with overflow detection 4. Multi-threading concurrent insertion safety 5. TCP telnet protocol network insertion 6. String length and encoding boundaries 7. Table naming restrictions and validation 8. Batch insertion performance testing 9. Error handling and exception management 10. Tag and column limit enforcement                      path:                                            cases/06-DataIngestion/03-SML/test_write_sml_opentsdb_telnet.py"},{"location":"case_list_docs/DataIngestion/SQL/","title":"01-SQL","text":""},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write.TestInsertDouble.test_write","title":"","text":"Write Data Basic 1. Write data with timestamp 2. Write data with double 3. Insert and drop database concurrently 4. Write data with future timestamp 5. Write data with wide column                      path:                                            cases/06-DataIngestion/01-SQL/test_write.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_basic.TestWriteBasic.test_write_basic","title":"","text":"Write: basic test 1. Write data to a nanosecond-precision database 2. Write data to regular tables and child tables 3. Write data to specified columns 4. Batch write multiple records to different child tables in a single operation                      path:                                            cases/06-DataIngestion/01-SQL/test_write_basic.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_blob.TestInsertBasic.test_insert_basic","title":"","text":"insert use ns precision 1. create table 2. insert data 3. query data                      path:                                            cases/06-DataIngestion/01-SQL/test_write_blob.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_bug.TestWriteBug.test_write_bug","title":"","text":"Data Ingestion Bug 1. TD-27388 2. TD-29157 3. TD-29793 4. TS-4219 5. TS-4272 6. TS-4295 7. TS-4479                      path:                                            cases/06-DataIngestion/01-SQL/test_write_bug.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_column_value.TestInsertColumnValue.test_write_column_value","title":"","text":"Write Data with Special Columns 1. Write data with different data types  2. Write data to super table with special column 3. Write data to child table with special column 4. Write data to normal table with special column 5. JIRA TS-5184                      path:                                            cases/06-DataIngestion/01-SQL/test_write_column_value.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_commit.TestWriteCommit.test_write_commit","title":"","text":"Write: commit scenarios 1. Data exists across multiple files 2. Data distributed across multiple blocks 3. Data coexists in both memory and files 4. Restart the dnode (force kill) 5. Verify data integrity through queries                      path:                                            cases/06-DataIngestion/01-SQL/test_write_commit.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_datatypes.TestWriteDatatypes.test_write_datatypes","title":"","text":"Write: datatypes 1. Write data with NULL values 2. Write data using different floating-point representations 3. Write Chinese character data 4. Write data with different timestamp representations 5. Write data with backquote                      path:                                            cases/06-DataIngestion/01-SQL/test_write_datatypes.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_delete.TestWriteDelete.test_write_delete","title":"","text":"Write: delete data 1. Insert data 2. Flush the database 3.Delete data by specific timestamp 4. Delete data by timestamp range 5. Delete data using timestamp condition comparisons 6. Restart the dnode 7. Check data integrity                      path:                                            cases/06-DataIngestion/01-SQL/test_write_delete.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_insert_select.TestWriteInsertSelect.test_write_insert_select","title":"","text":"Write: insert into select 1. Insert into select from child table 2. Insert into select from normal table 3. Insert into select from super table                      path:                                            cases/06-DataIngestion/01-SQL/test_write_insert_select.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_morevgroup.TestInsertwithmorevgroup.test_write_morevgroup","title":"","text":"Write Data with More Vgroups 1. Write data with taosBenchmark with 5 threads 2. Write data with taosBenchmark with 8 threads                      path:                                            cases/06-DataIngestion/01-SQL/test_write_morevgroup.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_out_of_order_data.TestWriteOutOfOrderData.test_write_out_of_order_data","title":"","text":"Write: out of order data 1. Write out-of-order and expired data, including:     Data distributed across multiple files     Data existing in multiple blocks     Data present in both memory and files 2. Restart the dnode 3. Query data integrity                      path:                                            cases/06-DataIngestion/01-SQL/test_write_out_of_order_data.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_stb.TestInsertStb.test_insert_stb","title":"","text":"Insert Super Table 1. Create a super table containing multiple tag types 2. Insert super table with multiple data types 3. Insert super table with consecutive data 4. Insert super table data with stmt                      path:                                            cases/06-DataIngestion/01-SQL/test_write_stb.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_update.TestWriteUpdate.test_write_update","title":"","text":"Write: update data 1. Update data in memory 2. Update data in files 3. Write to update multiple records at once 4. Update data using NULL values 5. Restart the dnode 6. Check data integrity                      path:                                            cases/06-DataIngestion/01-SQL/test_write_update.py"},{"location":"case_list_docs/DataIngestion/SQL/#06-DataIngestion.01-SQL.test_write_update_multi_rows.TestUpdateDataMutiRows.test_update_data_muti_rows","title":"","text":"Data Ingestion Update With Multi-Rows 1. Write data with multi rows 2. Update multi rows with 10000 times 3. Update normal table 4. Update child  table                      path:                                            cases/06-DataIngestion/01-SQL/test_write_update_multi_rows.py"},{"location":"case_list_docs/DataIngestion/STMT/","title":"02-STMT","text":""},{"location":"case_list_docs/DataIngestion/STMT/#06-DataIngestion.02-STMT.test_stmt_basic.TestStmtBasic.test_stmt_basic","title":"","text":"STMT Write Basic Case 1. stmt insert multi rows order by asc/desc 2. stmt set tbname and tags, and query with different functions 3. verify result is ok                      path:                                            cases/06-DataIngestion/02-STMT/test_stmt_basic.py"},{"location":"case_list_docs/DataIngestion/STMT/#06-DataIngestion.02-STMT.test_write_stmt_error.TestStmtError.test_stmt_error","title":"","text":"Write STMT Error 1. Write data with STMT 2. Query data with STMT 3. Write to virtual table with STMT expect error 4. Write to super table with null timestamp expect error 5. Write to super table with normal value expect error                      path:                                            cases/06-DataIngestion/02-STMT/test_write_stmt_error.py"},{"location":"case_list_docs/DataQuerying/BiMode/","title":"17-BiMode","text":""},{"location":"case_list_docs/DataQuerying/BiMode/#09-DataQuerying.17-BiMode.test_bimode.TestBiStarTable.test_bi_star_table","title":"","text":"Bi Mode 1. In BI mode, querying a supertable with SELECT *, LAST(*), or FIRST(*) will return an additional tbname column 2. In BI mode, querying only tag columns (without data columns) returns a number of records equal to the number of subtables 3. In BI mode, backticks can be added to tbname                      path:                                            cases/09-DataQuerying/17-BiMode/test_bimode.py"},{"location":"case_list_docs/DataQuerying/CaseWhen/","title":"13-CaseWhen","text":""},{"location":"case_list_docs/DataQuerying/CaseWhen/#09-DataQuerying.13-CaseWhen.test_query_case_when.TestQueryCaseWhen.test_query_case_when","title":"","text":"Query case when basic 1. Using in data columns and scalar functions within SELECT statements 2. Using in data columns within WHERE conditions 3. Using in data columns within GROUP BY statements 4. Using in data columns within STATE WINDOW 5. Using in aggregate functions while including the IS NULL operator                      path:                                            cases/09-DataQuerying/13-CaseWhen/test_query_case_when.py"},{"location":"case_list_docs/DataQuerying/Distinct/","title":"10-Distinct","text":""},{"location":"case_list_docs/DataQuerying/Distinct/#09-DataQuerying.10-Distinct.test_distinct.TestDistinct.test_distinct","title":"","text":"Distinct 1. Using on data columns and tag columns 2. Using on super tables                      path:                                            cases/09-DataQuerying/10-Distinct/test_distinct.py"},{"location":"case_list_docs/DataQuerying/Explain/","title":"15-Explain","text":""},{"location":"case_list_docs/DataQuerying/Explain/#09-DataQuerying.15-Explain.test_explain.TestExplain.test_explain_basic","title":"","text":"Explain Performing EXPLAIN on queries involving various functions, windows, subqueries, and sorting operations                      path:                                            cases/09-DataQuerying/15-Explain/test_explain.py"},{"location":"case_list_docs/DataQuerying/Filter/","title":"02-Filter","text":""},{"location":"case_list_docs/DataQuerying/Filter/#09-DataQuerying.02-Filter.test_filter_column.TestFilterColumn.test_filter_column","title":"","text":"Column 1. Filtering super tables and regular tables by regular data columns 2. Applying mathematical operators in combination                      path:                                            cases/09-DataQuerying/02-Filter/test_filter_column.py"},{"location":"case_list_docs/DataQuerying/Filter/#09-DataQuerying.02-Filter.test_filter_operator.TestFilterOperator.test_operator","title":"","text":"Operator Based 1. Filtering with logical operators 2. Filtering with comparison operators 3. Combined with GROUP BY, ORDER BY, and LIMIT OFFSET clauses 4. Including IS NULL operations                      path:                                            cases/09-DataQuerying/02-Filter/test_filter_operator.py"},{"location":"case_list_docs/DataQuerying/Filter/#09-DataQuerying.02-Filter.test_filter_sma.TestFilterSma.test_filter_sma","title":"","text":"Sma Based 1. Create db with STT_TRIGGER option and set value to 1, will flush data to disk easily 2. Create supper table and sub table 3. Insert some data into sub table 4. Flush database, the action will trigger the data to be written to disk 5. Query the sub table with filter condition on flag column 6. Check the number of rows returned by the query                      path:                                            cases/09-DataQuerying/02-Filter/test_filter_sma.py"},{"location":"case_list_docs/DataQuerying/Filter/#09-DataQuerying.02-Filter.test_filter_tag.TestFilterTag.test_filter_tag","title":"","text":"Tag 1. Projection queries with arithmetic operations and tag column filtering conditions                      path:                                            cases/09-DataQuerying/02-Filter/test_filter_tag.py"},{"location":"case_list_docs/DataQuerying/Filter/#09-DataQuerying.02-Filter.test_filter_timestamp.TestFilterTimestamp.test_filter_timestamp","title":"","text":"Timestamp 1. Projection queries with arithmetic operations and timestamp filtering conditions                      path:                                            cases/09-DataQuerying/02-Filter/test_filter_timestamp.py"},{"location":"case_list_docs/DataQuerying/GroupBy/","title":"03-GroupBy","text":""},{"location":"case_list_docs/DataQuerying/GroupBy/#09-DataQuerying.03-GroupBy.test_groupby_basic.TestGroupByBasic.test_groupby_basic","title":"","text":"Group By Basic 1. Including multiple data types 2. Including data columns and tag columns 3. With ORDER BY clause 4. With Limit offset clause 5. With filtering conditions 6. With various functions 7. With different windows                      path:                                            cases/09-DataQuerying/03-GroupBy/test_groupby_basic.py"},{"location":"case_list_docs/DataQuerying/Having/","title":"09-Having","text":""},{"location":"case_list_docs/DataQuerying/Having/#09-DataQuerying.09-Having.test_query_having.TestHaving.test_query_having","title":"","text":"Having Keyword 1. Using HAVING with GROUP BY and aggregate functions (AVG, SUM, COUNT, STDDEV, APERCENTILE, SPREAD, LAST) 2. Performing TOP, BOTTOM, and LAST operations on results 3. Applying ORDER BY and LIMIT OFFSET to results 4. Performing calculations and comparisons in the HAVING clause 5. Using HAVING with JOIN operations 6. Using HAVING with different types of window functions (sliding, session, event, count, state)                      path:                                            cases/09-DataQuerying/09-Having/test_query_having.py"},{"location":"case_list_docs/DataQuerying/Having/#09-DataQuerying.09-Having.test_query_having_bugs.TestHavingBugs.test_ts4806","title":"","text":"BugFix: TS-4806 test event_windows + case when + having query fix                      path:                                            cases/09-DataQuerying/09-Having/test_query_having_bugs.py"},{"location":"case_list_docs/DataQuerying/Having/#09-DataQuerying.09-Having.test_query_having_bugs.TestHavingBugs.test_td31880","title":"","text":"BugFix: TD-31880 test last_row(ts) query fix                      path:                                            cases/09-DataQuerying/09-Having/test_query_having_bugs.py"},{"location":"case_list_docs/DataQuerying/Having/#09-DataQuerying.09-Having.test_query_having_bugs.TestHavingBugs.test_td31966","title":"","text":"BugFix: TD-31966 test percentile() from window query fix                      path:                                            cases/09-DataQuerying/09-Having/test_query_having_bugs.py"},{"location":"case_list_docs/DataQuerying/Having/#09-DataQuerying.09-Having.test_query_having_bugs.TestHavingBugs.test_td32059","title":"","text":"BugFix: TD-32059 test having with interval and fill                      path:                                            cases/09-DataQuerying/09-Having/test_query_having_bugs.py"},{"location":"case_list_docs/DataQuerying/Interp/","title":"12-Interp","text":""},{"location":"case_list_docs/DataQuerying/Interp/#09-DataQuerying.12-Interp.test_interp_fill.TestInterp2.test_normal_query_new","title":"","text":"Interp fill and psedo column 1. Used with PARTITION BY 2. Used with _isfilled and _irowts in both the select list and as ORDER BY columns 3. Testing more comprehensive fill modes                      path:                                            cases/09-DataQuerying/12-Interp/test_interp_fill.py"},{"location":"case_list_docs/DataQuerying/Interp/#09-DataQuerying.12-Interp.test_interp_fill.TestInterp2.test_abnormal_query","title":"","text":"Interp abnormal query 1. Testing abnormal query                      path:                                            cases/09-DataQuerying/12-Interp/test_interp_fill.py"},{"location":"case_list_docs/DataQuerying/Limit/","title":"06-Limit","text":""},{"location":"case_list_docs/DataQuerying/Limit/#09-DataQuerying.06-Limit.test_limit.TestLimit.test_limit","title":"","text":"Limit 1. Including multiple data types 2. With ORDER BY clause 3. With GROUP BY clause 4. With PARTITION BY clause 5. With filtering conditions 6. With various functions 7. With different windows                      path:                                            cases/09-DataQuerying/06-Limit/test_limit.py"},{"location":"case_list_docs/DataQuerying/OrderBy/","title":"04-OrderBy","text":""},{"location":"case_list_docs/DataQuerying/OrderBy/#09-DataQuerying.04-OrderBy.test_orderby_double.TestOrderByDouble.test_orderby_double","title":"","text":"Sort double 1. Create a database and table 2. Insert double values into the table 3. Query the table with order by double values; without the fix for TS-6772, it should be failed                      path:                                            cases/09-DataQuerying/04-OrderBy/test_orderby_double.py"},{"location":"case_list_docs/DataQuerying/OrderBy/#09-DataQuerying.04-OrderBy.test_orderby_subquery.TestOrderByBasic.test_orderby_basic","title":"","text":"Sort subquery results 1. Sort the results of subqueries 2. Sort time data after applying the to_charfunction                      path:                                            cases/09-DataQuerying/04-OrderBy/test_orderby_subquery.py"},{"location":"case_list_docs/DataQuerying/PseudoColumn/","title":"11-PseudoColumn","text":""},{"location":"case_list_docs/DataQuerying/SLimit/","title":"07-SLimit","text":""},{"location":"case_list_docs/DataQuerying/SLimit/#09-DataQuerying.07-SLimit.test_slimit.TestSLimit.test_slimit","title":"","text":"SLimit 1. SLIMIT with PARTITION BY 2. SLIMIT with GROUP BY 3. SLIMIT with PARTITION BY + INTERVAL 4. Combined use of SLIMIT and SOFFSET 5. Verify SLIMIT results after modifying tags                      path:                                            cases/09-DataQuerying/07-SLimit/test_slimit.py"},{"location":"case_list_docs/DataQuerying/Select/","title":"01-Select","text":""},{"location":"case_list_docs/DataQuerying/Select/#09-DataQuerying.01-Select.test_query_select_basic.TestSelectListBasic.test_selectlist","title":"","text":"SelectList 1. Projection queries 2. Aggregation queries 3. Scalar functions 4. Combining GROUP BY, ORDER BY, Limit, and WHERE clauses                      path:                                            cases/09-DataQuerying/01-Select/test_query_select_basic.py"},{"location":"case_list_docs/DataQuerying/Select/#09-DataQuerying.01-Select.test_query_select_bugs.TestQueryBugs.test_query_bugs","title":"","text":"Query select bugs 1. Verify jira TS-5946 2. Verify jira TD-30686 3. Verify jira TS-5105 4. Verify jira TS-5143 5. Verify jira TS-5239 6. Verify jira TD-31684 7. Verify jira TS-5984 8. Verify jira TS-6058                      path:                                            cases/09-DataQuerying/01-Select/test_query_select_bugs.py"},{"location":"case_list_docs/DataQuerying/Select/#09-DataQuerying.01-Select.test_query_select_exact.TestQueryBasic.test_query_basic","title":"","text":"Query select exact test 1. Insert data with taosBenchmark 1 stable 6 child tables 2. Insert each child table 10w rows with step 30s, total 60w rows 3. Insert each child with 5w rows disorder with step 60s  4. Flush database 5. Check correctness: csum/tail/top/bottom/statecount/stateduration/histogram/first/last/sample/spread/percent 6. Check correctness: count/sum/min/max/avg/stddev/leastsquares/derivative/irate/diff/twa/mavg/ 7. Window query with various condition combinations 8. Check function behavior with null input: abs/unique/concat_ws/timetruncate/timediff/to_timestamp 9. Check substr from 0 start 10. Check cast behavior 11. Check iso8601 behavior 12. Check null behavior                      path:                                            cases/09-DataQuerying/01-Select/test_query_select_exact.py"},{"location":"case_list_docs/DataQuerying/SubQuery/","title":"08-SubQuery","text":""},{"location":"case_list_docs/DataQuerying/SubQuery/#09-DataQuerying.08-SubQuery.test_query_sub.TestQuerySub.test_query_sub","title":"","text":"Subquery basic 1. Perform projection queries on subquery results 2. Perform aggregate queries on subquery results 3. Perform window queries on subquery results 4. Perform DIFF function queries on subquery results                      path:                                            cases/09-DataQuerying/08-SubQuery/test_query_sub.py"},{"location":"case_list_docs/DataQuerying/SubQuery/#09-DataQuerying.08-SubQuery.test_query_sub_bugs.TestSubqueryBugs.test_query_sub_bugs","title":"","text":"Subquery bugs 1. Verify bug TS-30189 2. Verify bug TS-5443 3. Verify bug TS-5878                      path:                                            cases/09-DataQuerying/08-SubQuery/test_query_sub_bugs.py"},{"location":"case_list_docs/DataQuerying/SubQuery/#09-DataQuerying.08-SubQuery.test_query_sub_lastrow.TestSubQueryLastRow.test_subquery_lastrow","title":"","text":"Subquery with lastrow 1. Create db 2. Create supper table and sub table 3. Insert data into sub table 4. Query last row from sub table as a sub query, it should return the last row data                      path:                                            cases/09-DataQuerying/08-SubQuery/test_query_sub_lastrow.py"},{"location":"case_list_docs/DataQuerying/Tags/","title":"14-Tags","text":""},{"location":"case_list_docs/DataQuerying/Tags/#09-DataQuerying.14-Tags.test_tag_basic.TestTagBasic.test_tag_basic","title":"","text":"Tag query 1. Projection queries combining data columns and the tbname pseudocolumn 2. Projection queries with the DISTINCT keyword 3. Queries combining tags and selection functions like LAST\u3001FITST\u3001MAX\u3001MIN 4. Grouping, sorting, and filtering by tags                      path:                                            cases/09-DataQuerying/14-Tags/test_tag_basic.py"},{"location":"case_list_docs/DataQuerying/Tags/#09-DataQuerying.14-Tags.test_tag_json.TestSelectWithJsonTags.test_select_with_json_tags","title":"","text":"Json tag 1. Create db 2. Create supper table 3. Inset data with json tags 3. Select data and check the result                      path:                                            cases/09-DataQuerying/14-Tags/test_tag_json.py"},{"location":"case_list_docs/Databases/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_database.TestAlterDatabase.test_db_alter_database","title":"","text":"Alter Database 1. Alter database buffer 2. Alter database pages 3. Alter database encrypt_algorithm 4. Alter database with same options 5. Alter database keep_time_offset                      path:                                            cases/02-Databases/03-Alter/test_db_alter_database.py"},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_option.TestDatabaseAlterOption.test_db_alter_option","title":"","text":"Alter all options 1. Create database and inspect all option values. 2. Attempt to alter database with invalid options (expect failure). 3. Alter database with valid options and verify the changes. 4. Check alter buffer size 5. Check alter cache model 6. Check alter cache size 7. Check alter min rows 8. Check alter pages 9. Check alter wal_level 10. Check alter wal_fsync_period 11. Check alter stt_trigger 12. Check alter wal_retention_period 13. Check alter wal_retention_size 14. Check alter ss_keeplocal 15. Check alter ss_compact 16. Check alter keep_time_offset 17. Check alter compact_interval 18. Check alter compact_time_offset 19. Check alter unsupport option                      path:                                            cases/02-Databases/03-Alter/test_db_alter_option.py"},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_option_keep.TestDatabaseAlterOptionKeep.test_database_alter_option_keep","title":"","text":"Alter keep 1. Use invalid input to alter the KEEP option 2. Verify results after changing KEEP 3. Add or drop columns on the super table 4. Insert data 5. Check results 6. Repeat steps 3-5 several times                      path:                                            cases/02-Databases/03-Alter/test_db_alter_option_keep.py"},{"location":"case_list_docs/Databases/Alter/#02-Databases.03-Alter.test_db_alter_replica.TestAlterReplica.test_alter_replica","title":"","text":"Alter Database Replica 1. Alter replica basic operations 2. Alter replica count from 1 to 3 3. Alter replica count from 3 to 1                      path:                                            cases/02-Databases/03-Alter/test_db_alter_replica.py"},{"location":"case_list_docs/Databases/Create/","title":"01-Create","text":""},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic1.TestDatabaseBasic1.test_database_basic1","title":"","text":"Database: basic 1 1. Create database with vgroup option 2. Show vgroups 3. Show vnodes                      path:                                            cases/02-Databases/01-Create/test_db_basic1.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic2.TestDatabaseBasic2.test_database_basic2","title":"","text":"Database: basic 2 1. Create database 2. Create supertable 3. Create subtable 4. Create regular table 5. Show tables 6. Drop database                      path:                                            cases/02-Databases/01-Create/test_db_basic2.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic3.TestDatabaseBasic3.test_database_basic3","title":"","text":"Database: basic 3 1. Create database 2. Create normal table with the 'db.' prefix 3. Show tables using the 'db.' prefix                      path:                                            cases/02-Databases/01-Create/test_db_basic3.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic4.TestDatabaseBasic4.test_database_basic4","title":"","text":"Database: basic 4 1. Create database 2. Create normal table 3. Show tables 4. Drop table 5. Show tables 6. Drop database                      path:                                            cases/02-Databases/01-Create/test_db_basic4.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic5.TestDatabaseBasic5.test_database_basic5","title":"","text":"Database: basic 5 1. Create database 2. Create super table 3. Create child table 4. Show super tables 5. Show tables 6. Drop database and retest                      path:                                            cases/02-Databases/01-Create/test_db_basic5.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_basic6.TestDatabaseBasic6.test_database_basic6","title":"","text":"Database: basic 6 1. Create database with options (replica, duration, keep, minrows) 2. Query information_schema.ins_databases and verify results 3. Repeatedly execute create database, drop database, create table, and write data                      path:                                            cases/02-Databases/01-Create/test_db_basic6.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_commit.TestDatabaseCommit.test_database_commit","title":"","text":"Database: commit 1. Write data 2. Restart taosd 3. Append data to the same file 4. Verify row count                      path:                                            cases/02-Databases/01-Create/test_db_commit.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_create_encrypt.TestBasic.test_db_create_encrypt","title":"","text":"Option: encrypt_algorithm 1. Create encrypt key '1234567890' 2. Create database with encrypt_algorithm 'sm4' 3. Create stable and child tables 4. Insert data and query data 5. Recreate dnode encrypt key 6. Query data again 7. Create database with wrong encrypt key and expect error                      path:                                            cases/02-Databases/01-Create/test_db_create_encrypt.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_db_tables.TestDatabaseTables.test_database_tables","title":"","text":"Database: cache 1. Create database and table 2. Write and query data 3. Drop both 4. Reset query cache 5. Retest                      path:                                            cases/02-Databases/01-Create/test_db_tables.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_name_all.TestDatabaseCreate.test_database_create","title":"","text":"Name: basic 1. Case sensitivity 2. Illegal names 3. Chinese names                      path:                                            cases/02-Databases/01-Create/test_name_all.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_name_len.TestDatabaseLen.test_database_len","title":"","text":"Name: length 1. Create database with an excessively long name 2. Test with invalid values                      path:                                            cases/02-Databases/01-Create/test_name_len.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_all.TestDatabaseCreateAllOptions.test_database_create_all_options","title":"","text":"Options: basic 1. Create database using all available options 2. Query information_schema.ins_databases to verify correct display 3. Test the valid ranges of each option                      path:                                            cases/02-Databases/01-Create/test_op_all.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_dnodelist.TestDatabaseDnodeList.test_database_dnode_list","title":"","text":"Options: dnodelist 1. Create database with DNODE list option 2. Test creation with varying replica counts and vgroup numbers 3. Alter database DNODE list option                      path:                                            cases/02-Databases/01-Create/test_op_dnodelist.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_keep.TestDatabaseKeep.test_database_Keep","title":"","text":"Options: keep     1. Create database with the KEEP option     2. Write and query data\u2014including data outside the KEEP range     3. ALTER database KEEP option     4. Write and query data again                      path:                                            cases/02-Databases/01-Create/test_op_keep.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_table_hash.TestDatabaseTableHash.test_database_table_hash","title":"","text":"Options: table hash 1. Create a database with 2 vgroups and explicitly set table_prefix / table_suffix 2. Create one super table and 5 child tables; query information_schema.ins_tables to confirm their vgroup distribution 3. Create 5 normal tables; query information_schema.ins_tables again to verify their vgroup placement                      path:                                            cases/02-Databases/01-Create/test_op_table_hash.py"},{"location":"case_list_docs/Databases/Create/#02-Databases.01-Create.test_op_table_prefix_suffix.TestDatabaseTablePrefixSuffix.test_database_table_prefix_suffix","title":"","text":"Options: table prefix and suffix 1. Create database with TABLE_PREFIX and TABLE_SUFFIX options 2. Create tables 3. Verify that tables are distributed across vgroups as expected                      path:                                            cases/02-Databases/01-Create/test_op_table_prefix_suffix.py"},{"location":"case_list_docs/Databases/Drop/","title":"02-Drop","text":""},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_catalog.TestDatabaseCatalog.test_database_catalog","title":"","text":"Check catalog 1. Create database 2. Create normal table 3. Insert data 4. Alter data column 5. Insert data 6. Drop database 7. Repeat three times                      path:                                            cases/02-Databases/02-Drop/test_db_catalog.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_delete_reuse1.TestDatabaseDeleteReuse1.test_database_delete_reuse1","title":"","text":"Repeatedly drop 2 1. Create database 2. Drop database 3. Attempt to write data to its tables (expected to fail) 4. Create normal table 5. Insert data 6. Query data 7. Repeat the entire sequence 20 times using the same database and table names                      path:                                            cases/02-Databases/02-Drop/test_db_delete_reuse1.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_delete_reuse2.TestDatabaseDeleteReuse2.test_database_delete_reuse2","title":"","text":"Repeatedly drop 3 1. Create database 2. Drop database 3. Attempt to write data to its tables (expected to fail) 4. Create normal table 5. Insert data 6. Query data 7. Repeat the entire sequence 20 times using the different database and table names                      path:                                            cases/02-Databases/02-Drop/test_db_delete_reuse2.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_delete_reuse_vnode.TestDatabaseDeleteReuseVnode.test_database_delete_reuse_vnode","title":"","text":"Repeatedly drop 1 1. Create a database and a normal table, insert data, and repeat the above 30 times using the same names 2. Restart the dnode 3. Create a database and a super table, create child tables, insert data, and repeat the above 10 times using the same names                      path:                                            cases/02-Databases/02-Drop/test_db_delete_reuse_vnode.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_repeat.TestDatabaseRepeat.test_database_repeat","title":"","text":"Repeatedly drop 4 1. Create database 2. Create table 3. Drop both 4. Repeat several times                      path:                                            cases/02-Databases/02-Drop/test_db_repeat.py"},{"location":"case_list_docs/Databases/Drop/#02-Databases.02-Drop.test_db_writing.TestDatabaseDeleteWriting.test_database_delete_writing","title":"","text":"Drop while writing 1. Create database 2. Create normal table 3. Insert data 4. Sleep 1s 5. Repeat 10 times with the same names 6. Meanwhile, start a thread that keeps inserting into that table regardless of success                      path:                                            cases/02-Databases/02-Drop/test_db_writing.py"},{"location":"case_list_docs/Databases/Flush/","title":"07-Flush","text":""},{"location":"case_list_docs/Databases/Flush/#02-Databases.07-Flush.test_db_flush.TestDbFlush.test_db_flush","title":"","text":"Flush database 1. Create a database with sst_trigger = 1. 2. Insert string-typed data. 3. Flush the database. 4. Continue inserting data (including duplicates). 5. Verify the query results for correctness.                      path:                                            cases/02-Databases/07-Flush/test_db_flush.py"},{"location":"case_list_docs/Databases/Precision/","title":"06-Precision","text":""},{"location":"case_list_docs/Databases/Precision/#02-Databases.06-Precision.test_db_precision_ns.TestDatabasePrecisionNs.test_database_precision_ns","title":"","text":"Precision: ns 1. Create a nanosecond-precision database. 2. Insert data using numeric timestamps. 3. Verify the row count. 4. Insert data using now(). 5. Filter data by timestamp. 6. Validate INTERVAL \u2026 SLIDING queries. 7. Validate time macro functions. 8. Validate where clause with timestamp comparisons.                      path:                                            cases/02-Databases/06-Precision/test_db_precision_ns.py"},{"location":"case_list_docs/Databases/Precision/#02-Databases.06-Precision.test_db_precision_us.TestDatabasePrecisionUs.test_database_precision_us","title":"","text":"Precision: ms and us 1. Millisecond-precision test 2. Create a millisecond-precision database 3. Insert both valid and invalid timestamps 4. Query the data 5. Microsecond-precision test 6. Create a microsecond-precision database 7. Repeat the same insert and query steps as above 8. Validate time macro functions. 9. Validate where clause with timestamp comparisons.                      path:                                            cases/02-Databases/06-Precision/test_db_precision_us.py"},{"location":"case_list_docs/Databases/Query/","title":"04-Query","text":""},{"location":"case_list_docs/Databases/Query/#02-Databases.04-Query.test_db_show_create_db.TestDatabaseShowCreateDb.test_database_show_create_db","title":"","text":"Show create db 1. Create database 2. Run SHOW CREATE DATABASE 3. Verify the result                      path:                                            cases/02-Databases/04-Query/test_db_show_create_db.py"},{"location":"case_list_docs/Databases/Query/#02-Databases.04-Query.test_db_show_create_table.TestDatabaseShowCreateTable.test_database_show_create_table","title":"","text":"Show create table 1. Create a normal table 2. Create a super table 3. Create child tables 4. Execute SHOW CREATE TABLE and verify the output 5. Change the showFullCreateTableColumn parameter 6. Execute SHOW CREATE TABLE again and verify the new output                      path:                                            cases/02-Databases/04-Query/test_db_show_create_table.py"},{"location":"case_list_docs/Databases/Query/#02-Databases.04-Query.test_db_show_create_table.TestDatabaseShowCreateTable.test_empty_nchar_tag","title":"","text":"show create table with empty nchar tag 1. when nchar-type tag is empty, show create table should output an empty string                      path:                                            cases/02-Databases/04-Query/test_db_show_create_table.py"},{"location":"case_list_docs/Databases/Query/#02-Databases.04-Query.test_db_show_vgroup.TestDatabaseShowVgroup.test_database_show_vgroup","title":"","text":"Show vgroups 1. Create multiple databases 2. Repeatedly create and drop tables 3. Run SHOW VGROUPS after each cycle to confirm the expected vgroup count                      path:                                            cases/02-Databases/04-Query/test_db_show_vgroup.py"},{"location":"case_list_docs/Databases/Sync/","title":"05-Sync","text":""},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance1.TestBalance1.test_balance_1","title":"","text":"Scale-up: repica-1 (mnode) 1. Create a 1-dnode cluster 2. Create database d1 (1 vgroup, replica 1) and insert data 3. Start dnode2, join it to the cluster, run BALANCE VGROUP; verify vnode distribution and data integrity 4. Create database d2 (1 vgroup, replica 1) and insert data; check distribution &amp; integrity 5. Remove dnode2; verify vnode distribution and data integrity 6. Start dnode3, join it to the cluster, run BALANCE VGROUP; verify distribution &amp; integrity 7. Create database d3 (1 vgroup, replica 1) and insert data; check distribution &amp; integrity 8. Remove dnode3; verify vnode distribution and data integrity 9. Create database d4 (1 vgroup, replica 1) and insert data; check distribution &amp; integrity                      path:                                            cases/02-Databases/05-Sync/test_balance1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance2.TestBalance2.test_balance_2","title":"","text":"Scale-up: repica-3 db-1 1. Create a 3-dnode cluster 2. Create four 1-vgroup, 3-replica databases and insert data; verify vnode distribution and data integrity 3. Start dnode4 and dnode5, then add them to the cluster 4. Drop dnode2; verify vnode re-distribution and data integrity 5. Drop dnode3; verify vnode re-distribution and data integrity                      path:                                            cases/02-Databases/05-Sync/test_balance2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance3.TestBalance3.test_balance_3","title":"","text":"Scale-up: repica-1 db-2 1. Start a 4-dnode cluster 2. Create two 1-vgroup, 3-replica databases d1 and d2; insert data and verify vnode distribution &amp; data integrity 3. Remove dnode2; verify vnode re-distribution &amp; data integrity 4. Start dnode5 and join it to the cluster; run BALANCE VGROUP; verify distribution &amp; integrity 5. Create one more 1-vgroup, 3-replica database d3; insert data and verify 6. Start dnode6 and join the cluster; run BALANCE VGROUP; verify distribution &amp; integrity 7. Remove dnode3; verify final vnode distribution &amp; data integrity                      path:                                            cases/02-Databases/05-Sync/test_balance3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance_leader.TestBalanceLeader.test_balance_leader","title":"","text":"balance leader 1. -                      path:                                            cases/02-Databases/05-Sync/test_balance_leader.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance_replica_1.TestBalanceReplica1.test_balance_replica_1","title":"","text":"Balance: replica-1 1. Create a single-replica database with 2 vgroups and insert data 2. Start a new dnode and add it to the cluster 3. Execute BALANCE VGROUP 4. Verify vnode distribution and data integrity                      path:                                            cases/02-Databases/05-Sync/test_balance_replica_1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance_replica_3.TestBalanceReplica3.test_balance_replica_3","title":"","text":"Balance: replica-3 1. Create a 3-replica database with 4 vgroups and insert data 2. Start a new dnode and add it to the cluster 3. Execute BALANCE VGROUP 4. Verify vnode distribution and data integrity                      path:                                            cases/02-Databases/05-Sync/test_balance_replica_3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balance_vnode_clean.TestVnodeClean.test_vnode_clean","title":"","text":"Scale-up: repica-1 1. Start a 1-node cluster 2. Create database d1 (1 vgroup, 1 replica); create table, insert data, verify 3. Add dnode2 \u2192 run BALANCE VGROUP 4. Create database d2 (1 vgroup, 1 replica); create table, insert data, verify 5. Remove dnode2 6. Add dnode3 \u2192 run BALANCE VGROUP 7. Create database d3 (1 vgroup, 1 replica); create table, insert data, verify 8. Add dnode4 \u2192 run BALANCE VGROUP 9. Create database d4 (4 vgroups, 1 replica); create tables, insert data, verify 10. Remove dnode3 11. Check data integrity for all databases d1, d2, d3, and d4                      path:                                            cases/02-Databases/05-Sync/test_balance_vnode_clean.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_balancex.TestBalancex.test_balance_x","title":"","text":"Scale-up: repica mixed 1. Start a 1-dnode cluster 2. Create databases d1 and d2 (each 1 vgroup, replica 1) and insert data 3. Start dnode2 and dnode3, add them to the cluster 4. Create database d3 (3 vgroups, replica 3) and insert data; verify vnode distribution &amp; data integrity 5. Start dnode4 and join the cluster; run BALANCE VGROUP; verify distribution &amp; integrity 6. Drop dnode2; verify vnode re-distribution &amp; data integrity                      path:                                            cases/02-Databases/05-Sync/test_balancex.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica1.TestRedistributeVgroupReplica1.test_redistribute_vgroup_replica1","title":"","text":"RDST: replica-1 1. Start a 2-dnode cluster with supportVnodes=0 on dnode1 2. Create database d1 (1 vgroup, replica 1) and insert data 3. Add dnode3 and dnode4 to the cluster 4. Execute REDISTRIBUTE VGROUP to move the vnode to dnode3; verify distribution &amp; data integrity 5. Execute REDISTRIBUTE VGROUP to move the vnode to dnode4; verify 6. Execute REDISTRIBUTE VGROUP to move the vnode to dnode2; verify 7. Repeat steps 4-6 three more times, cycling the vnode among dnode3 \u2192 dnode4 \u2192 dnode2 \u2192 dnode3 \u2192 dnode2 \u2192 dnode3 \u2192 dnode2, verifying distribution &amp; data integrity after each move                      path:                                            cases/02-Databases/05-Sync/test_redistribute_vgroup_replica1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica2.TestRedistributeVgroupReplica2.test_redistribute_vgroup_replica2","title":"","text":"RDST: replica-2 1. Start a 3-dnode cluster with supportVnodes=0 on dnode1 2. Create database d1 (1 vgroup, replica 2) and insert data 3. Add dnode3 and dnode4 to the cluster 4. Execute REDISTRIBUTE VGROUP to move the vnode to dnode4 dnode5; verify distribution &amp; data integrity 5. Execute REDISTRIBUTE VGROUP to move the vnode to dnode2 dnode3; verify distribution &amp; data integrity                      path:                                            cases/02-Databases/05-Sync/test_redistribute_vgroup_replica2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v1_follower.TestRedistributeVgroupReplica3V1Follower.test_redistribute_vgroup_replica3_v1_follower","title":"","text":"RDST: repica-3 follower 1. Start a 4-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and insert data 3. Execute illegal REDISTRIBUTE VGROUP commands (expected to fail because no eligible dnodes are available) 4. Add dnode5 to the cluster 5. Identify the vnode whose role is leader; keep this leader fixed 6. For the two follower vnodes, perform five round-trip moves among the remaining three dnodes. After each move, verify vnode distribution and data integrity                      path:                                            cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v1_follower.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v1_leader.TestRedistributeVgroupReplica3V1Leader.test_redistribute_vgroup_replica3_v1_leader","title":"","text":"RDST: replica-3 leader 1. Start a 4-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and write data 3. Execute illegal REDISTRIBUTE VGROUP commands (expected to fail due to insufficient eligible dnodes) 4. Add dnode5 to the cluster 5. Identify the follower vnode and keep it unchanged 6. Move the leader vnode among the remaining three dnodes five times; after each move, check vnode distribution and data integrity                      path:                                            cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v1_leader.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v2.TestRedistributeVgroupReplica3V2.test_redistribute_vgroup_replica3_v2","title":"","text":"RDST: replica-3 move-2 1. Start a 4-node cluster with dnode1 set to supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and write data 3. Add dnode5 and dnode6 to the cluster 4. In parallel, move two vnodes to the new nodes 5. After each move, verify vnode distribution and data integrity 6. Repeat steps 4-5 three times                      path:                                            cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_redistribute_vgroup_replica3_v3.TestRedistributeVgroupReplica3V3.test_redistribute_vgroup_replica3_v3","title":"","text":"RDST: replica-3 move-3 1. Start a 4-node cluster with dnode1 set to supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and write data 3. Add dnode5 and dnode6 to the cluster 4. In parallel, move three vnodes to the new nodes 5. After each move, verify vnode distribution and data integrity 6. Repeat steps 4-5 three times                      path:                                            cases/02-Databases/05-Sync/test_redistribute_vgroup_replica3_v3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_split_vgroup_replica1.TestSplitVgroupReplica1.test_split_vgroup_replica1","title":"","text":"Split: replica-1 1. Start a 2-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 1 replica) and insert data 3. Add a new dnode2 to the cluster 4. Run SPLIT VGROUP to split the vnode; verify the new vnode distribution and data integrity                      path:                                            cases/02-Databases/05-Sync/test_split_vgroup_replica1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_split_vgroup_replica2.TestSplitVgroupReplica2.test_split_vgroup_replica2","title":"","text":"Split: replica-2 1. Start a 4-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 2 replicas) and insert data 3. Execute SPLIT VGROUP to split the vnode                      path:                                            cases/02-Databases/05-Sync/test_split_vgroup_replica2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_split_vgroup_replica3.TestSplitVgroupReplica3.test_split_vgroup_replica3","title":"","text":"Split: replica-3 1. Start a 4-node cluster with dnode1 configured as supportVnodes=0 2. Create database d1 (1 vgroup, 3 replicas) and insert data 3. Execute SPLIT VGROUP to split the vnode                      path:                                            cases/02-Databases/05-Sync/test_split_vgroup_replica3.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_stable_balance_replica1.TestStableBalanceReplica1.test_stable_balance_replica1","title":"","text":"Query: after balance 1. Launch a single-node cluster 2. Create a 1-replica database with 4 vgroups 3. Create one super table and 13 child tables; insert 200 rows into each 4. Add dnode2 to the cluster 5. Execute BALANCE VGROUP 6. Verify data integrity in all tables                      path:                                            cases/02-Databases/05-Sync/test_stable_balance_replica1.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_stable_dnode2.TestStableDnode.test_stable_dnode","title":"","text":"Query: after restart 1. Start a 2-node cluster 2. Create a 1-replica database with 3 vgroups 3. Create one super table and 10 child tables; insert 20 rows into each 4. Stop dnode2 \u2192 expect queries to fail 5. Restart dnode2 \u2192 queries succeed and all data are present                      path:                                            cases/02-Databases/05-Sync/test_stable_dnode2.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_stable_replica3_dnode6.TestStableReplica3Vnode3.test_stable_replica3_vnode3","title":"","text":"Query: repica-3 1. Start a 6-node cluster 2. Create a 3-replica database with 3 vgroups 3. Create one super table and 10 child tables; insert 20 rows into each 4. Run COUNT and INTERVAL queries; verify the results                      path:                                            cases/02-Databases/05-Sync/test_stable_replica3_dnode6.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_sync_3Replica1VgElect.TestSync3Replica5VgElect.test_sync_3Replica5VgElect","title":"","text":"Query: replica-3 restart 1. Start a 4-node cluster with dnode1 set to supportVnodes=0 2. Create a 3-replica database with 1 vgroup 3. Create one super table and 10 child tables; insert 20 rows into each 4. Restart each dnode multiple times 5. Verify data integrity                      path:                                            cases/02-Databases/05-Sync/test_sync_3Replica1VgElect.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_sync_vnodesnapshot_rsma.TestSyncVnodeSnapshotRsma.test_sync_vnode_snapshot_rsma","title":"","text":"Query: replica-3 rsma 1. Start a 4-node cluster with dnode1 supportVnodes=0 2. Create a 3-replica database with 1 vgroup 3. Create one RSMA-enabled super table and one child table 4. Stop dnode4 5. Insert data and flush database 6. Repeat steps 4-5 twice 7. Restart all dnodes 8. Query and verify results                      path:                                            cases/02-Databases/05-Sync/test_sync_vnodesnapshot_rsma.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_basic.TestVnodeReplica3Basic.test_vnode_replica3_basic","title":"","text":"Write: replica-3 mnode-3 1. Start a 3-node cluster with 3 mnodes. 2. Create a 1-replica, 1-vgroup database; create table, insert data, and verify. 3. Stop dnode2 \u2192 insert data \u2192 start dnode2 \u2192 insert data. 4. Stop dnode3 \u2192 insert data \u2192 start dnode3 \u2192 insert data. 5. Stop dnode1 \u2192 insert data \u2192 start dnode1 \u2192 insert data. 6. Verify data integrity across all nodes.                      path:                                            cases/02-Databases/05-Sync/test_vnode_replica3_basic.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_import.TestVnodeReplica3Import.test_vnode_replica3_import","title":"","text":"Write: replica-3 import data 1. Start a 4-node cluster. 2. Create a 3-replica, 1-vgroup database; create table, insert out-of-order data, and verify. 3. Restart dnode2 \u2192 insert out-of-order data \u2192 verify. 4. Restart dnode3 \u2192 insert out-of-order data \u2192 verify. 5. Restart dnode4 \u2192 insert out-of-order data \u2192 verify. 6. Restart dnode3 again \u2192 insert out-of-order data \u2192 verify.                      path:                                            cases/02-Databases/05-Sync/test_vnode_replica3_import.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_many.TestVnodeReplica3Many.test_vnode_replica3_many","title":"","text":"Write: replica-3 restart 1. Start a 4-node cluster. 2. Create four 1-vgroup, 3-replica databases and a normal table in each. 3. In a background thread, insert one record into every table every 0.1 s (ignore any failures). 4. Sequentially restart dnode1 \u2192 dnode2 \u2192 dnode3 \u2192 dnode4; repeat this full cycle 8 times. 5. After every restart, confirm that row counts never decrease.                      path:                                            cases/02-Databases/05-Sync/test_vnode_replica3_many.py"},{"location":"case_list_docs/Databases/Sync/#02-Databases.05-Sync.test_vnode_replica3_vgroup.TestVnodeReplica3Vgroup.test_vnode_replica3_vgroup","title":"","text":"Write: repica-3 vgroup-2 1. Start a 4-node cluster. 2. Create a 3-replica database with 2 vgroups and create a super table. 3. Create 300 child tables and insert one record into each. 4. Insert one earlier-timestamp record into each child table. 5. Verify the query results are correct.                      path:                                            cases/02-Databases/05-Sync/test_vnode_replica3_vgroup.py"},{"location":"case_list_docs/Functions/Aggregate/","title":"02-Aggregate","text":""},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_all.TestAggFunction.test_agg_function","title":"","text":"Agg: all test aggregate function stddev_pop, varpop, avg, sum, leastsquares, statecount                      path:                                            cases/11-Functions/02-Aggregate/test_agg_all.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_gconcat.TestFuncGconcat.test_func_gconcat","title":"","text":"Agg-basic: group_concat Test the GROUP_CONCAT function                      path:                                            cases/11-Functions/02-Aggregate/test_agg_gconcat.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_last.Test_Last.test_last","title":"","text":"Agg-basic: last Test the LAST function                      path:                                            cases/11-Functions/02-Aggregate/test_agg_last.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_last.Test_Last.test_last_tag","title":"","text":"summary: test last/last_row with tag column description: verify the behavior of selecting last/last_row with tag column outside.             For example: select last(ts), tag1, tag2 from stable group by tbname.             In this case, we should read cache data to get the tag column value.                      path:                                            cases/11-Functions/02-Aggregate/test_agg_last.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_last.Test_Last.test_last_pk","title":"","text":"Agg-basic: last with pk Test the LAST function with composite key outside. For example: select last(ts), pk from stb group by tbname.                      path:                                            cases/11-Functions/02-Aggregate/test_agg_last.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_leastsquares.TestFuncLeastsquares.test_func_leastsquares","title":"","text":"Agg-basic: Leastsquares Test the LeastSquares function, including time windows, filtering on ordinary data columns, filtering on tag columns.                      path:                                            cases/11-Functions/02-Aggregate/test_agg_leastsquares.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_smoking.TestFuncAggSmoking.test_func_agg_smoking","title":"","text":"Agg-basic: smoking cases Smoking the aggregate functions                      path:                                            cases/11-Functions/02-Aggregate/test_agg_smoking.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_smoking.TestFuncAggSmoking.test_fun_agg_stddev_samp","title":"","text":"Fun: stddev_samp() 1. create normal table with timestamp,int columns 2. insert 5 rows with int values 1,2,3,4,5 3. query stddev_samp(int column) and check the result                      path:                                            cases/11-Functions/02-Aggregate/test_agg_smoking.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_smoking.TestFuncAggSmoking.test_fun_agg_variance","title":"","text":"Fun: variance() 1. create normal table with timestamp,int columns 2. insert 5 rows with int values 1,2,3,4,5 3. query variance(int column) and check the result                      path:                                            cases/11-Functions/02-Aggregate/test_agg_smoking.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_smoking.TestFuncAggSmoking.test_func_agg_var_pop","title":"","text":"Fun: var_pop() same with variance()                      path:                                            cases/11-Functions/02-Aggregate/test_agg_smoking.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_smoking.TestFuncAggSmoking.test_fun_agg_var_samp","title":"","text":"Fun: var_samp() 1. create normal table with timestamp,int columns 2. insert 5 rows with int values 1,2,3,4,5 3. query var_samp(int column) and check the result                      path:                                            cases/11-Functions/02-Aggregate/test_agg_smoking.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_agg_smoking.TestFuncAggSmoking.test_fun_agg_group_concat","title":"","text":"Fun: group_concat() 1. create normal table with timestamp,int columns 2. insert 10 rows with int values 1,2,3,4,5,6,7,8,9,10 3. query group_concat(int column) and check the result                      path:                                            cases/11-Functions/02-Aggregate/test_agg_smoking.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_apercentile.TestFunApercentile.test_func_agg_apercentile","title":"","text":"Fun: apercentile() 1. Sim case including time windows, t-digest input, null value 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query on distribute                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_apercentile.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_avg.TestFunAvg.test_func_agg_avg","title":"","text":"Fun: avg() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Support types 3. Error cases 4. Boundary values 5. Basic query 6. AVG with filter conditions 7. AVG with unsigned types                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_avg.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_count.TestFunCount.test_func_agg_count","title":"","text":"Fun: count() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Basic query 3. Error check 4. Query on stable/normal table 5. Query with interval clause 6. Query after restart taosd 7. Query on null data 8. Query on partition by clause 9. Query on distributed                       path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_count.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_elapsed.TestFunElapsed.test_func_agg_elapsed","title":"","text":"Fun: elapsed() 1. Query on super/child/normal table 2. Query with nested 3. Query with join 4. Query with union 5. Query with other function 6. Query with filter 7. Query with tags 8. Error cases                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_elapsed.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_histogram.TestFunHistogram.test_fun_agg_histogram","title":"","text":"Fun: histogram() 1. Query on super/child/normal table 2. Query with bin_type parameter as user_input/linear_bin/log_bin 3. Query with bin_description parameter  4. Query with different data type 5. Query with filter 6. Error cases 7. Check again after flush database                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_histogram.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_hyperloglog.TestFunHyperloglog.test_fun_agg_hyperloglog","title":"","text":"Fun: hyperloglog() 1. Query on super/child/normal table 2. Query with group by  3. Query with having 4. Query with different data type 5. Query with filter 6. Query with join 7. Error cases 8. Check again after flush database                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_hyperloglog.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_leastsquares.TestFunLeastsquares.test_fun_agg_leastsquares","title":"","text":"Fun: leastsquares() 1. Query on different data types 2. Query on super/child/normal table 3. Error cases 4. Query with partition by 5. Query with group by and having 6. Query with union                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_leastsquares.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_percentile.TestFunPercentile.test_func_agg_percentile","title":"","text":"Fun: percentile() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Check tags                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_percentile.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_spread.TestFunSpread.test_func_agg_spread","title":"","text":"Fun: spread() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group by 7. Query with distribute aggregate 8. Check function work status                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_spread.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_stddev.TestFunStddev.test_func_agg_stddev","title":"","text":"Fun: stddev() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group by 7. Query with distribute aggregate                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_stddev.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_stddev.TestFunStddev.test_func_agg_std","title":"","text":"Fun: std() same with stddev()                       path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_stddev.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_stddev.TestFunStddev.test_func_agg_stddev_pop","title":"","text":"Fun: stddev_pop() same with stddev()                       path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_stddev.py"},{"location":"case_list_docs/Functions/Aggregate/#11-Functions.02-Aggregate.test_fun_agg_sum.TestFunSum.test_func_agg_sum","title":"","text":"Fun: sum() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group by 7. Query with distribute aggregate                      path:                                            cases/11-Functions/02-Aggregate/test_fun_agg_sum.py"},{"location":"case_list_docs/Functions/Compare/","title":"05-Compare","text":""},{"location":"case_list_docs/Functions/Compare/#11-Functions.05-Compare.test_fun_cmp_if.TestFunIf.test_fun_cmp_if","title":"","text":"Fun: If 1. Using in data columns and scalar functions within SELECT statements 2. Using in data columns within WHERE conditions 3. Using in data columns within GROUP BY statements 4. Using in data columns within STATE WINDOW 5. Using in aggregate functions while including the IS NULL operator                      path:                                            cases/11-Functions/05-Compare/test_fun_cmp_if.py"},{"location":"case_list_docs/Functions/Compare/#11-Functions.05-Compare.test_fun_cmp_if.TestFunIf.test_fun_cmp_ifnull","title":"","text":"Fun: ifnull() 1. Check \"select ifnull(1, 0)\"; 2. Check \"select ifnull(null, 10)\"; 3. Check \"select ifnull(1/0, 10)\"; 4. Check \"select ifnull(1/0, 'yes')\";                      path:                                            cases/11-Functions/05-Compare/test_fun_cmp_if.py"},{"location":"case_list_docs/Functions/Compare/#11-Functions.05-Compare.test_fun_cmp_if.TestFunIf.test_fun_cmp_nvl","title":"","text":"Fun: nvl() same with ifnull()                       path:                                            cases/11-Functions/05-Compare/test_fun_cmp_if.py"},{"location":"case_list_docs/Functions/Compare/#11-Functions.05-Compare.test_fun_cmp_if.TestFunIf.test_fun_cmp_nullif","title":"","text":"Fun: nullif() 1. Check \"select nullif(1, 1)\"; 2. Check \"select nullif(1, 2)\";                      path:                                            cases/11-Functions/05-Compare/test_fun_cmp_if.py"},{"location":"case_list_docs/Functions/Compare/#11-Functions.05-Compare.test_fun_cmp_if.TestFunIf.test_fun_cmp_nvl2","title":"","text":"Fun: nvl2() 1. Check \"select nvl2(null, 1, 2)\"; 2. Check \"select nvl2('x', 1, 2)\";                      path:                                            cases/11-Functions/05-Compare/test_fun_cmp_if.py"},{"location":"case_list_docs/Functions/Geometry/","title":"07-Geometry","text":""},{"location":"case_list_docs/Functions/Geometry/#11-Functions.07-Geometry.test_fun_geo_basic.TestGeometry.test_fun_geo_basic","title":"","text":"Geometry Basic Test 1. Create super/child/normal tables and insert geometry data 2. Query with ST_GeomFromText() and check results 3. Query with ST_AsText() and check results 4. Verify TD-28365 Bug                      path:                                            cases/11-Functions/07-Geometry/test_fun_geo_basic.py"},{"location":"case_list_docs/Functions/Geometry/#11-Functions.07-Geometry.test_fun_geo_basic.TestGeometry.test_fun_geo_st_geomfromtext","title":"","text":"Fun: st_geomfromtext() 1. Create 1 super table 2 child tables and 1 normal table 2. Insert geometry data and null into above tables  3. Insert invalid geometry data into child/normal table and expect error 4. Use st_geomfromtext() to query geometry data from above tables and check the results 5. Query with invalid parameter \"POIN(1.0 1.5)\" 6. Query with invalid parameter \"LINESTRING(1.0 1.0, 2.0 2.0, 5.0 5.0,)\" 7. Query with invalid parameter \"POLYGON((3.0 6.0, 5.0 6.0, 5.0 8.0, 3.0 8.0))\" 8. Query with invalid parameter \"XXX\"                      path:                                            cases/11-Functions/07-Geometry/test_fun_geo_basic.py"},{"location":"case_list_docs/Functions/Geometry/#11-Functions.07-Geometry.test_fun_geo_basic.TestGeometry.test_fun_geo_st_astext","title":"","text":"Fun: st_astext() 1. Create 1 super table 2 child tables and 1 normal table 2. Insert geometry data and null into above tables  3. Insert invalid geometry data into child/normal table and expect error 4. Query with st_astext() on super/child/normal tables and check the results 5. Query with parameter \"NULL\" 6. Query with invalid parameter \"XXX\" 7. Query with no parameter  8. Query on not geometry datatype column                      path:                                            cases/11-Functions/07-Geometry/test_fun_geo_basic.py"},{"location":"case_list_docs/Functions/Scalar/","title":"01-Scalar","text":""},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_abs.TestFunAbs.test_fun_sca_abs","title":"","text":"Fun: abs() 1. Support types 2. Basic query 3. Boundary values 4. Filter query 5. Tag compute for scalar function 6. Check result of query 7. Check abs result of stable query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_abs.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_abs.TestFunAbs.test_fun_sca_now","title":"","text":"Fun: now() 1. Insert with now +/- and d/s/a 2. Query with where now +/- d/m/h                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_abs.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_acos.TestFunAcos.test_fun_sca_acos","title":"","text":"Fun: acos() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_acos.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_asin.TestFunAsin.test_fun_sca_asin","title":"","text":"Fun: asin() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_asin.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_atan.TestFunAtan.test_fun_sca_atan","title":"","text":"Fun: atan() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_atan.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_cast.TestFunCast.test_fun_sca_cast","title":"","text":"Fun: cast() 1. CAST on super table and normal table 2. CAST between all data types 3. CAST with null values 4. CAST constant operation 5. CAST with aggregation functions 6. CAST with union all 7. CAST with function embedded 8. CAST without from table 9. verify JIRA TS-5972                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_cast.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_ceil.TestFunCeil.test_fun_sca_ceil","title":"","text":"Fun: ceil() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_ceil.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_concat.TestFunConcat.test_fun_sca_concat","title":"","text":"Fun: concat() 1. CONCAT on super/child/normal table 2. CONCAT between all data types 3. CONCAT with null values 4. CONCAT with different number of columns 5. CONCAT with negative test cases 6. CONCAT with chinese language                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_concat.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_concat2.TestConcat2.test_fun_sca_concat2","title":"","text":"Fun: concat() extend test 1. Create super table and child tables 2. Insert data with null/chinese/single char values 3. Query with different concat conditions 4. Check the query result 5. Flush database and re-check the result 6. Clean up the environment                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_concat2.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_concat_ws.TestFunConcatWs.test_fun_sca_concat_ws","title":"","text":"Fun: concat_ws() 1. CONCAT_WS on super/child/normal table 2. CONCAT_WS between all data types 3. CONCAT_WS with null values 4. CONCAT_WS with different number of columns 5. CONCAT_WS with negative test cases                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_concat_ws.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_cos.TestFunCos.test_fun_sca_cos","title":"","text":"Fun: cos() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_cos.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_floor.TestFunFloor.test_fun_sca_floor","title":"","text":"Fun: floor() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_floor.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_length.TestFunLength.test_fun_sca_length","title":"","text":"Fun: length() 1. LENGTH on super/child/normal table 2. LENGTH between all data types 3. LENGTH with null values 4. LENGTH constant operation 5. LENGTH with invalid parameters                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_length.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_log.TestFunLog.test_fun_sca_log","title":"","text":"Fun: log() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_log.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_lower.TestFunLower.test_fun_sca_lower","title":"","text":"Fun: lower() 1. LOWER on super/child/normal table 2. LOWER between all data types 3. LOWER with null values 4. LOWER constant operation 5. LOWER with invalid parameters                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_lower.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_ltrim.TestFunLtrim.test_fun_sca_ltrim","title":"","text":"Fun: ltrim() 1. LTRIM on super/child/normal table 2. LTRIM between all data types 3. LTRIM with null values 4. LTRIM constant operation 5. LTRIM with invalid parameters                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_ltrim.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_pow.TestPow.test_pow","title":"","text":"Fun: pow() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Super/child/normal table query 7. Query with partition by 8. Nest query 9. Mix with other functions 10. Input invalid parameter                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_pow.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_round.TestFunRound.test_fun_sca_round","title":"","text":"Fun: round() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_round.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_rtrim.TestFunRtrim.test_fun_sca_rtrim","title":"","text":"Fun: rtrim() 1. RTRIM on super/child/normal table 2. RTRIM between all data types 3. RTRIM with null values 4. RTRIM constant operation 5. RTRIM with invalid parameters                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_rtrim.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_sin.TestFunSin.test_fun_sca_sin","title":"","text":"Fun: sin() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_sin.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_sqrt.TestFunSqrt.test_fun_sca_sqrt","title":"","text":"Fun: sqrt() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_sqrt.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_substr.TestFunSubstr.test_fun_sca_substr","title":"","text":"Fun: substr() 1. SUBSTR on super/child/normal table 2. SUBSTR between all data types 3. SUBSTR with null values 4. SUBSTR constant operation 5. SUBSTR with invalid parameters                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_substr.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_tan.TestFunTan.test_fun_sca_tan","title":"","text":"Fun: tan() 1. Support types 2. Basic query 3. Big number query 4. Boundary query 5. Filter query 6. Stable table query 7. Error query                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_tan.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_timediff.TestFunTimediff.test_fun_sca_timediff","title":"","text":"Fun: timediff() 1. Constant timestamp test 2. Normal table test 3. Super table test 4. Without unit test 5. Multi-res parameters test                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_timediff.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_timetruncate.TestFunTimetruncate.test_fun_sca_timetruncate","title":"","text":"Fun: timetruncate() 1. Query from normal/child/super/without table 2. Query from ns/us/ms precision database 3. Query from different unit time character 4. Consider the influence of timezone 5. Query from different timestamp format, such as string/unix timestamp 6. Query Error unit time character                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_timetruncate.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_timezone.TestFunTimezone.test_fun_sca_timezone","title":"","text":"Fun: timezone() 1. Check show local/dnode variables timezone 2. Check timezone() function on normal table/stable/child table 3. Check timezone format when insert data                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_timezone.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_to_iso8601.TestFunToIso8601.test_fun_sca_to_iso8601","title":"","text":"Fun: to_iso8601() 1. Query from child/normal/super/without table 2. Query from ns/us/ms precision database 3. Query with different time format string 4. Query with different timezone string 5. Query with null value 6. Query with wrong parameter 7. Input parameter with now()/today()/null/constant/timestamp field                           path:                                            cases/11-Functions/01-Scalar/test_fun_sca_to_iso8601.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_to_iso8601.TestFunToIso8601.test_fun_sca_today","title":"","text":"Fun: today() 1. Insert normal/child table with now and today values 2. Query with input parameter of to_iso8601 function 3. Query in select/ where clause                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_to_iso8601.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_to_json.TestJsonTag.test_fun_sca_to_json","title":"","text":"Fun: to_json() 1. Create json tag on super table 2. Insert json tag with different data type 3. Query using to_json function with null/{\"abc\":123}/{\"key\"} parameter 4. Check query result right                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_to_json.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_to_timestamp.TestFuncToTimestamp.test_func_sca_to_timestamp","title":"","text":"Fun: to_timestamp() 1. Query from child/super/without table 2. Query from ns/us/ms precision database 3. Query from different timestamp format 4. Query Error timestamp format string                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_to_timestamp.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_to_timestamp.TestFuncToTimestamp.test_fun_sca_to_char","title":"","text":"Fun: to_char() 1. Support data types 2. Query with 'yyyy-mm-dd hh:mi:ss.ns' 3. Query with 'yyyy-mm-dd' 4. Query with 'yyyy-mm-dd hh:mi:ss.ns' 5. Query with 'yy-mon-dd hh24:mi:ss.msa.m.TZH Day' 6. Query on super/no table                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_to_timestamp.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_to_unixtimestamp.TestFunToUnixtimestamp.test_fun_sca_to_unixtimestamp","title":"","text":"Fun: to_unixtimestamp() 1. Query from normal/super/without table 2. Query from boundary timestamp 3. Query from different time zone string 4. Query Error timestamp format string                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_to_unixtimestamp.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_today.TestFunToday.test_fun_sca_today","title":"","text":"Fun: today() 1. Query from normal/super table 2. Query from ms/us/ns precision database 3. Query from where condition 4. Query Error parameter                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_today.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_fun_sca_upper.TestUpper.test_fun_sca_upper","title":"","text":"Fun: upper() 1. Query from super/child/normal table 2. Query from cast covert result 3. Query from group condition 4. Query Error parameter 5. Query after flush database                      path:                                            cases/11-Functions/01-Scalar/test_fun_sca_upper.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_salar_function","title":"","text":"Scalar: All test math function pi, round, exp, truncate, ln, mod, sign, degrees, radians, rand, greatest, least test char function char_length, char, ascii, position, replace, repeat, substr, substr_idx, trim test time function timediff, week, weekday, weekofyear, dayofweek                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_degrees","title":"","text":"Fun: degrees() 1. Support datatype types 2. Query with constant parameter 3. Query with function parameter (abs/sin/cos) 4. Query with limit 5. Query with order by 6. Query with null value 7. Error query with no parameter 8. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_exp","title":"","text":"Fun: exp() 1. Support datatype types 2. Query with constant/boundary/null/expr parameter 3. Query with function parameter (abs/log/round) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_greatest","title":"","text":"Fun: greatest() 1. Support data types 2. Query with constant/boundary/null/chinese/now parameter 3. Query with function parameter (cast) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_least","title":"","text":"Fun: least() 1. Support data types 2. Query with constant/boundary/null/chinese/now parameter 3. Query with function parameter (cast) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_ln","title":"","text":"Fun: ln() 1. Support data types 2. Query with constant/boundary/null/chinese/now parameter 3. Query with function parameter (cast) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_mod","title":"","text":"Fun: mod() 1. Support data types 2. Query with constant/boundary/null/chinese/now parameter 3. Query with function parameter (cast) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_pi","title":"","text":"Fun: pi() 1. Support data types 2. Query with constant/boundary/null/chinese/now parameter 3. Query with function parameter (cast) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_radians","title":"","text":"Fun: radians() 1. Support data types 2. Query with constant/boundary/null parameter 3. Query with function parameter (sqrt/degrees) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_rand","title":"","text":"Fun: rand() 1. Support data types 2. Query with constant/boundary/null/big parameter 3. Query with limit 4. Query with order by 5. Query on stable/notable 6. Query on where clause                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_sign","title":"","text":"Fun: sign() 1. Support data types 2. Query with constant/boundary/null parameter 3. Query with function parameter (sqrt/abs/round/log) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with string parameter 9. Error query with two parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_truncate","title":"","text":"Fun: truncate() 1. Support data types 2. Query with constant/boundary/null parameter 3. Query with function parameter (exp/abs/log) 4. Query with limit 5. Query with order by 6. Query on stable/notable 7. Query like TRUNCATE(TRUNCATE(TRUNCATE(... 8. Error query with no parameter 9. Error query with string parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_crc32","title":"","text":"Fun: crc32() 1. Support data types 2. Query with constant/null/blank/chinese parameter 3. Query with function parameter (to_timestamp/to_char) 4. Query with float/int/expr parameter 5. Error query with no parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_base64","title":"","text":"Fun: base64() 1. Support data types 2. Query with constant/boundary/null/blank/chinese parameter 3. Query with function parameter (trim/repeat/concat/lower) 4. Error query with no parameter 5. Error query with number parameter 6. Error query with cast as integer parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_ascii","title":"","text":"Fun: ascii() 1. Support data types 2. Query with constant/null/blank/special char/chinese parameter 3. Query with input parameter cast/concat/substring 4. Query with output parameter pow/sqrt/cast 5. Query with limit/order by 6. Query on super/no table 7. Error query with no parameter 8. Error query with number parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_char","title":"","text":"Fun: char() 1. Support data types 2. Query with constant/null/string/float/int/expr parameter 3. Query with output parameter concat/cast 4. Query with 1 ~ 5 parameter 5. Query with limit/order by 6. Query on super/no table 7. Error query with no parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_char_length","title":"","text":"Fun: char_length() 1. Support data types 2. Query with constant/null/blank/chinese/japanese parameter 3. Query with input parameter concat/cast 4. Query with output parameter sqrt/cast/min/max/avg 5. Query with limit/order by/group by/ 6. Query on super/child/no table 7. Error query with no parameter 8. Error query with number parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_position","title":"","text":"Fun: position() 1. Support datatype varchar/nchar 2. Query with constant/null/blank/expr parameter 3. Call in function abs/pow 4. Call with function input substring/trim/upper/concat  5. Query with limit/order by 6. Query on stable/notable 7. Error query with no parameter 8. Error query with 1 parameter 9. Error query with number parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_repeat","title":"","text":"Fun: repeat() 1. Support datatype varchar/nchar 2. Query with first parameter null or second parameter null 3. Call in function concat/concat_ws/position 4. Call with function input trim/concat/length 5. Query with limit/order by/where 6. Query on stable/notable 7. Query on column/tag 8. Error query with no parameter 9. Error query with 1 and 3 parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_replace","title":"","text":"Fun: replace() 1. Support datatype varchar/nchar 2. Query with first and second parameter null 3. Call with function input lower/substr/concat/upper/trim 4. Query with limit/order by/where 5. Query on stable/notable 6. Query on column/tag/constant 7. Error query with no parameter 8. Error query with invalid datatype parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_substr","title":"","text":"Fun: substr() 1. Support datatype varchar/nchar 2. Query with 1 ~ 3 parameter null 3. Query with from/for keyword 4. Call with function input concat/upper/trim/sign 5. Query with limit/order by/where 6. Query on stable/notable 7. Query on column/tag/constant 8. Query with alias name substring 9. Error query with no parameter 10. Error query with invalid datatype parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_substring_index","title":"","text":"Fun: substring_index() 1. Support datatype varchar/nchar 2. Query with 1 ~ 3 parameter null 3. Call with function input concat/upper/trim/length 4. Query with limit/order by/where 5. Query on stable/child/notable 6. Error query with no parameter 7. Error query with first parameter number 8. Error query with second parameter string                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_trim","title":"","text":"Fun: trim() 1. Support data types varchar/nchar 2. Query with keyword both/leading/trailing/from 3. Query with constant/null/chinese parameter 4. Query with input function parameter concat/upper/substring/replace 5. Query with limit/order by asc/where 6. Query on super/child/no table 7. Error query with no parameter 8. Error query with number parameter 9. Error query with both from with number parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_date","title":"","text":"Fun: date() 1. Support data type timestamp/bigint/float 2. Query with group by 3. Query with null/boundary/0/-1000 parameter 4. Query with parameter \"9999-12-31\"/\"01-JAN-25\"/\"#$@!+-*/\"/\"abcd\" 5. Query with limit/order by asc/where 6. Query on super/no table 7. Error query with no parameter 8. Error query with invalid parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_dayofweek","title":"","text":"Fun: dayofweek() 1. Support data types timestamp/varchar/bigint 2. Query with null/'9999-12-31'/'01-JAN-20'/'abc' parameter 3. Query with input parameter timediff 4. Query with output parameter sum 5. Query with limit/order by/group by 6. Query on super/child/no table 7. Error query with no parameter 8. Error query with 2 parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_week","title":"","text":"Fun: week() 1. Support data types timestamp/varchar/bigint 2. Query with null/'abc'/'01-JAN-20'/'9999-12-31' parameter 3. Query with second parameter mode 0/1/2/3/4/5/6/7 4. Query with input parameter timediff 5. Query with output parameter sum 6. Query with limit/order by/group by 7. Query on super/child/no table 8. Error query with no parameter 9. Error query with no input first parameter 10. Error query with input second float parameter                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_weekday","title":"","text":"Fun: weekday() 1. Support data types timestamp/varchar/bigint 2. Query with null/'abc'/'01-JAN-20'/'9999-12-31' parameter 3. Query with input parameter timediff 4. Query with output parameter sum 5. Query with limit/order by/group by 6. Query on super/child/no table 7. Error query with no parameter 8. Error query with 2 parameters                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_all.TestScalarFunction.test_fun_sca_weekofyear","title":"","text":"Fun: weekofyear() 1. Support data types timestamp/varchar/bigint 2. Query with null/'abc'/'11/01/31'/'01-JAN-20'/'9999-12-31' parameter 3. Query with input parameter timediff 4. Query with output parameter sum 5. Query with limit/order by/group by/where 6. Query on super/child/no table 7. Error query with no parameter 8. Error query with 2 parameters                      path:                                            cases/11-Functions/01-Scalar/test_scalar_all.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_math.TestMath.test_math","title":"","text":"Scalar: Math Test mathematical functions, including abs, log, pow, sqrt, sin, cos, tan, asin, acos, atan, ceil, floor, round.                      path:                                            cases/11-Functions/01-Scalar/test_scalar_math.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_string.TestString.test_string","title":"","text":"Scalar: String Test string functions, including Char_length, lower, upper, ltrim, rtrim, concat, and concat_ws.                      path:                                            cases/11-Functions/01-Scalar/test_scalar_string.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_string.TestString.test_fun_sca_find_in_set","title":"","text":"Fun: find_in_set() 1. Support data types varchar/nchar 2. Query with constant/null/single char/chinese parameter 3. Query with different separator 4. Query from normal/no table 5. Query with 2 ~ 3 parameters                      path:                                            cases/11-Functions/01-Scalar/test_scalar_string.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_string.TestString.test_fun_sca_like_in_set","title":"","text":"Fun: like_in_set() 1. Support data types varchar/nchar 2. Query with constant/null/single char/special char/chinese parameter 3. Query with different separator 4. Query from normal/no table 5. Query with 2 ~ 3 parameters                      path:                                            cases/11-Functions/01-Scalar/test_scalar_string.py"},{"location":"case_list_docs/Functions/Scalar/#11-Functions.01-Scalar.test_scalar_time.TestTime.test_time","title":"","text":"Scalar: Time Test time functions, including TIMETRUNCATE, TIMEDIFF, and their combined usage.                      path:                                            cases/11-Functions/01-Scalar/test_scalar_time.py"},{"location":"case_list_docs/Functions/Scalar/#80-Components.10-TDgpt.test_tdgpt.TestTDgptBasic.test_fun_sca_corr","title":"","text":"Fun: corr() 1. Query with int and float data type parameter 2. Query with constant/null/bool parameter 3. Query with corr(cast(... 4. Query on super/child/no table                      path:                                            cases/80-Components/10-TDgpt/test_tdgpt.py"},{"location":"case_list_docs/Functions/Selection/","title":"03-Selection","text":""},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_bottom.TestBottom.test_func_select_bottom","title":"","text":"Fun: bottom() 1. Sim case 2. Query on all data types 3. Input parameter with different values 4. Query on stable/normal table 5. Query on null data 6. Query on where clause 7. Query with filter 8. Error check                      path:                                            cases/11-Functions/03-Selection/test_fun_select_bottom.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_cols.TestFunCols.test_func_select_cols","title":"","text":"Fun: cols() 1. Basic query for input different params 2. Query on super/child/normal/empty table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group/partition by/having/order by 7. Query with tags 8. Query with join/union/nest/interval/window 9. Check null value 10. Check single/multi output                      path:                                            cases/11-Functions/03-Selection/test_fun_select_cols.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_first.TestFunFirst.test_func_select_first","title":"","text":"Fun: first() 1. Sim case 2. Query on all data types 3. Input parameter with different values 4. Query on stable/normal table 5. Query on null data 6. Query on where clause 7. Query with filter 8. Error check                      path:                                            cases/11-Functions/03-Selection/test_fun_select_first.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_first_last.TestFunSelectFirstLast.test_first_last_window","title":"","text":"First Last with All Windows 1. select list only contains first, last and     _select_value functions with **INTERVAL** window 2. select list only contains first, last and     _select_value functions with **STATE** window 3. select list only contains first, last and     _select_value functions with **SESSION** window 4. select list only contains first, last and     _select_value functions with **EVENT** window 5. select list only contains first, last and     _select_value functions with **COUNT** window                      path:                                            cases/11-Functions/03-Selection/test_fun_select_first_last.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_last.TestFunLast.test_func_select_last","title":"","text":"Fun: last() 1. Perform Last queries on child tables and supertables. 2. Test time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 3. Test Last LRU (insufficient memory, multiple VGroups, complex queries). 4. Test scenarios where LAST() return multiple rows of data. 5. Test last_row, last function support 520 parameters.                      path:                                            cases/11-Functions/03-Selection/test_fun_select_last.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_last_row.TestFunLastRow.test_func_select_last_row","title":"","text":"Fun: last_row() 1. Including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Set cacheModel = both and retest. 3. Query on super/child/normal table 4. Support types 5. Error cases 6. Query with filter conditions 7. Query with group by 8. Query with empty table 9. Query with subquery 10. Query with 512 parameters 11. Check boundary values                      path:                                            cases/11-Functions/03-Selection/test_fun_select_last_row.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_max.TestFunMax.test_func_agg_max","title":"","text":"Fun: max() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group by 7. Query with distribute aggregate 8. Check function status                      path:                                            cases/11-Functions/03-Selection/test_fun_select_max.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_min.TestFunMin.test_func_agg_min","title":"","text":"Fun: min() 1. Sim case including time windows, filtering on ordinary data columns, filtering on tag columns, GROUP BY, and PARTITION BY. 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group by 7. Query with distribute aggregate 8. Check function status                      path:                                            cases/11-Functions/03-Selection/test_fun_select_min.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_mode.TestMode.test_func_select_mode","title":"","text":"Fun: mode() 1. Query with basic params 2. Query on super/child/normal table 3. Support types 4. Check null value                      path:                                            cases/11-Functions/03-Selection/test_fun_select_mode.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_tail.TestFunTail.test_func_select_tail","title":"","text":"Fun: tail() 1. Basic query for input different params 2. Query on super/child/normal/empty table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group/partition by 7. Query with tags 8. Query with join/union/nest 9. Boundary values                      path:                                            cases/11-Functions/03-Selection/test_fun_select_tail.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_top.TestSelectTop.test_func_select_top","title":"","text":"Fun: top() 1. Sim case 2. Query on all data types 3. Input parameter with different values 4. Query on stable/normal table 5. Query on null data 6. Query on where clause 7. Query with filter 8. Error check                      path:                                            cases/11-Functions/03-Selection/test_fun_select_top.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_fun_select_unique.TestUnique.test_func_select_unique","title":"","text":"Fun: unique() 1. Basic query for input different params 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query with filter conditions 6. Query with group/partition/order by 7. Query with tags 8. Query with join/union/nest/interval/window 9. Check null value 10. Check boundary values                      path:                                            cases/11-Functions/03-Selection/test_fun_select_unique.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_select_all.TestSelectFunction.test_select_function","title":"","text":"Select: all test select function max, min                      path:                                            cases/11-Functions/03-Selection/test_select_all.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_select_last_as_param.TestFuncLastAsParam.test_last_as_operator_param","title":"","text":"Last keepColumnName Test that 'last(col) - first(col)' is not equal to zero when keepColumnName is 1. Steps: 1. Create a database and a stable table. 2. Create sub-tables and insert data where the first and last values are different. 3. Set 'alter local 'keepColumnName' '1''. 4. Execute 'select last(tbcol) - first(tbcol) from stable_table group by tgcol'. 5. Verify that the result is the difference between the last and first value, which is not zero.                      path:                                            cases/11-Functions/03-Selection/test_select_last_as_param.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_select_last_as_param.TestFuncLastAsParam.test_last_as_func_param","title":"","text":"Test that 'timediff(last(col), first(col))' is not equal to zero when keepColumnName is 1. Steps: 1. Create a database and a stable table. 2. Create sub-tables and insert data where the first and last timestamps are different. 3. Set 'alter local 'keepColumnName' '1''. 4. Execute 'select timediff(last(ts), first(ts)) from stable_table group by tgcol'. 5. Verify that the result is the difference between the last and first timestamp, which is not zero.                      path:                                            cases/11-Functions/03-Selection/test_select_last_as_param.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_select_with_520_cols.TestSelect520Paras.test_select_520_cols","title":"","text":"Select: with 520 columns test last_row, first, last function support 520 parameters                      path:                                            cases/11-Functions/03-Selection/test_select_with_520_cols.py"},{"location":"case_list_docs/Functions/Selection/#11-Functions.03-Selection.test_select_with_json.TestSelectWithJson.test_select_with_json","title":"","text":"Select: with json params test select function with json params                      path:                                            cases/11-Functions/03-Selection/test_select_with_json.py"},{"location":"case_list_docs/Functions/System/","title":"06-System","text":""},{"location":"case_list_docs/Functions/System/#11-Functions.06-System.test_fun_sys_info.TestSysinfo.test_fun_sys_client_version","title":"","text":"Fun: client_version() 1. Get td_version value from version.c 2. Compare with the result of client_version()                      path:                                            cases/11-Functions/06-System/test_fun_sys_info.py"},{"location":"case_list_docs/Functions/System/#11-Functions.06-System.test_fun_sys_info.TestSysinfo.test_fun_sys_server_version","title":"","text":"Fun: server_version() 1. Get td_version value from version.c 2. Compare with the result of server_version()                      path:                                            cases/11-Functions/06-System/test_fun_sys_info.py"},{"location":"case_list_docs/Functions/System/#11-Functions.06-System.test_fun_sys_info.TestSysinfo.test_fun_sys_current_user","title":"","text":"Fun: current_user() 1. Query \"select current_user()\" 2. Check the result is \"root\"                      path:                                            cases/11-Functions/06-System/test_fun_sys_info.py"},{"location":"case_list_docs/Functions/System/#11-Functions.06-System.test_fun_sys_info.TestSysinfo.test_fun_sys_database","title":"","text":"Fun: database() 1. Create database test 2. Use database test 3. Query \"select database()\" 4. Check the result is \"test\"                      path:                                            cases/11-Functions/06-System/test_fun_sys_info.py"},{"location":"case_list_docs/Functions/System/#11-Functions.06-System.test_fun_sys_info.TestSysinfo.test_fun_sys_server_status","title":"","text":"Fun: server_status() 1. taosd server is running 2. Query server status expect 1 3. Stop taosd server 4. Sleep 15 seconds 5. Query server status throw error                      path:                                            cases/11-Functions/06-System/test_fun_sys_info.py"},{"location":"case_list_docs/Functions/Timeseries/","title":"04-Timeseries","text":""},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_csum.TestCsum.test_func_ts_csum","title":"","text":"Fun: csum() 1. Basic query for input different params 2. Query on super/child/normal table 3. Support types 4. Error cases 5. Query with where condition 6. Query with group/partition/order by 7. Query with tags 8. Query with join/union/nest/interval 9. Query with limit/slimit/offset/soffset 10. Check null value 11. Check boundary values                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_csum.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_derivative.TestFunDerivative.test_func_ts_derivative","title":"","text":"Fun: derivative() 1. Basic query for different params 2. Query on super/child/normal table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/group/order by 7. Query with sub query 8. Query with function nested 9. Query with limit/slimit/offset/soffset 10. Check null value                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_derivative.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_diff.TestFunDiff.test_func_ts_diff","title":"","text":"Fun: diff() 1. Sim case for LIKE, timestamp comparisons, and ordinary column comparisons. 2. Basic query for input different params 3. Query on super/child/normal table 4. Support types 5. Error cases 6. Query with where condition 7. Query with group/partition/order by 8. Query with tags 9. Query with join/union/nest/interval 10. Query with limit/slimit/offset/soffset 11. Check null value                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_diff.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_interp.TestInterp.test_func_ts_interp","title":"","text":"Fun: interp() 1. Basic query for different params 2. Query on super/child/normal/empty table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/group/order by 7. Query with sub query 8. Query with union/join/fill/every/range/interval 9. Select _irowts, _irowts_origin, _isfilled 10. Check null value 11. Single INTERP query covering multiple columns                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_interp.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_irate.TestFunIrate.test_func_ts_irate","title":"","text":"Fun: irate() 1. Basic query for input different params 2. Query on super/child table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/order by 7. Query with sub query 8. Query with function nested 9. Check null value                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_irate.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_mavg.TestFunMavg.test_func_ts_mavg","title":"","text":"Fun: mavg() 1. Basic query for different params 2. Query on super/child/normal table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/group/order by 7. Query with sub query 8. Query with function nested 9. Query with limit/slimit/offset/soffset 10. Check null value                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_mavg.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_sample.TestFunSample.test_func_ts_sample","title":"","text":"Fun: sample() 1. Basic query for different params 2. Query on super/child/normal table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/group/order by 8. Query with union/join/range/interval 9. Query with null value 10. Query with big data                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_sample.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_statecount.TestFunStatecount.test_func_ts_statedcount","title":"","text":"Fun: statecount() 1. Basic query for different params 2. Query on super/child/normal table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/group/order by 7. Query with sub query 8. Query with union/join 9. Query with unit time 10. Check null value 11. Boundary values                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_statecount.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_stateduration.TestFunStateduration.test_func_ts_stateduration","title":"","text":"Fun: stateduration() 1. Basic query for different params 2. Query on super/child/normal table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/group/order by 7. Query with sub query 8. Query with union/join 9. Query with unit time 10. Check null value 11. Boundary values                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_stateduration.py"},{"location":"case_list_docs/Functions/Timeseries/#11-Functions.04-Timeseries.test_fun_ts_twa.TestTwa.test_func_ts_twa","title":"","text":"Fun: twa() 1. Basic query for different params 2. Query on super/child table 3. Support data types 4. Error cases 5. Query with where condition 6. Query with partition/group by 7. Query with sub query 8. Query with union 9. Check null value                      path:                                            cases/11-Functions/04-Timeseries/test_fun_ts_twa.py"},{"location":"case_list_docs/SuperTables/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/SuperTables/Alter/#04-SuperTables.03-Alter.test_stable_alter_basic.TestStableAlterBasic.test_stable_alter_basic","title":"","text":"Alter Super Table Basic 1. Add Modify Drop Column 2. Add Modify Drop Rename Tag 3. Alter Comment 4. Alter add/modify/drop columns for all datatype 5. Alter modify varchar column to 390001 length 6. Alter add/modify tag/column with multi threads                      path:                                            cases/04-SuperTables/03-Alter/test_stable_alter_basic.py"},{"location":"case_list_docs/SuperTables/Alter/#04-SuperTables.03-Alter.test_stable_alter_overall.TestAlterTable.test_alter_table","title":"","text":"Alter Super/Normal Table Overall 1. Alter super  table add/modify/drop columns and set tags for all datatypes 2. Alter normal table add/modify/drop columns for all datatypes                      path:                                            cases/04-SuperTables/03-Alter/test_stable_alter_overall.py"},{"location":"case_list_docs/SuperTables/Alter/#04-SuperTables.03-Alter.test_stable_alter_tag.TestStableAlterTag.test_stable_alter_tag","title":"","text":"Alter: Tag 1. Create a super table 2. Create a child table and insert data 3. Add a tag column and verify that it takes effect 4. Query using the newly added tag value 5. Repeat the same operations for Drop, Modify, and Rename Tag 6. Restart and verify that all modifications remain effective                      path:                                            cases/04-SuperTables/03-Alter/test_stable_alter_tag.py"},{"location":"case_list_docs/SuperTables/Alter/#04-SuperTables.03-Alter.test_stable_alter_write_data.TestStableAlterThenWriteData.test_stable_alter_then_write_data","title":"","text":"Alter: then write data 1. Create a table and insert data 2. Alter the table and insert data 3. Alter the table and insert expired data 4. Repeat the above operations 5. Restart and verify that all data remains intact                      path:                                            cases/04-SuperTables/03-Alter/test_stable_alter_write_data.py"},{"location":"case_list_docs/SuperTables/Create/","title":"01-Create","text":""},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_create_basic.TestStableCreateMt.test_stable_create_mt","title":"","text":"Name: basic 1. Attempt to create stables with invalid table names, column names, and invalid data types 2. Create a super table containing multiple tag types 3. Create child tables and insert data 4. Query using tags                      path:                                            cases/04-SuperTables/01-Create/test_stable_create_basic.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_create_keep.TestCreateStbKeep.test_create_stb_keep","title":"","text":"Create table keep options 1. prepare database 2. check create stb with keep 3. check create stb with err keep duration 4. check alter stb with keep 5. check alter stb with keep err 6. check child table with keep 7. check normal table with keep 8. check stb keep show create 9. check stb keep ins_stables                      path:                                            cases/04-SuperTables/01-Create/test_stable_create_keep.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_create_presuf.TestDatabasePreSuf.test_stable_create_presuf","title":"","text":"Super Table Create with Random Prefix and Suffix 1. Create Database with random vgroups 2. Create Super Table with random prefix and suffix 3. Create Sub Tables with random prefix and suffix 4. Insert data into Sub Tables 5. Check data in Sub Tables and Super Table                      path:                                            cases/04-SuperTables/01-Create/test_stable_create_presuf.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_create_rowlength64k.TestRowlength64k.test_stable_create_rowlength64k","title":"","text":"Create Table With Max columns 1. Create stable with max columns to test limit 2. Create stable with max tags to test limit 3. Alter stable to test column and tag limit 4. Insert data to test max columns and tags 5. Query data to test max columns and tags                      path:                                            cases/04-SuperTables/01-Create/test_stable_create_rowlength64k.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_create_rowlength64k_benchmark.TestRowlength64kBenchmark.test_rowlength64k_benchmark","title":"","text":"Test Table Max Columns With Benchmark 1. taosBenchmark create table with column 1023 2. taosBenchmark create table with column 4095 3. taosBenchmark create table with column 1021 4. taosBenchmark create table with column 4093 5. taosBenchmark run with rowlength64k.json 6. verify result is ok                      path:                                            cases/04-SuperTables/01-Create/test_stable_create_rowlength64k_benchmark.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_create_rowlength64k_call.TestRowlength64k1.test_stable_create_rowlength64k","title":"","text":"Call Table Max Columns Case With Different Mode 1. Call Table Max Columns Case with Different queryPolicy (-Q 1 to 4) 2. Call Table Max Columns Case with restful                      path:                                            cases/04-SuperTables/01-Create/test_stable_create_rowlength64k_call.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_stable_keep_compact.TestStbKeepCompact.test_super_table_keep_compact","title":"","text":"Verify super table keep parameter 1. Super table keep parameter only takes effect during compaction 2. Before compaction, all historical data is visible regardless of keep settings 3. After compaction, data older than the keep period is removed 4. Different combinations of database keep and super table keep behave as expected                      path:                                            cases/04-SuperTables/01-Create/test_stable_keep_compact.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_table_comment.TestTableComment.test_table_comment","title":"","text":"Table Comment Case 1. Create normal table, stable and child table with/without comment 2. Alter table comment 3. Verify comment info in information_schema.ins_tables and information_schema.ins_stables 4. Verify error when comment length &gt; 1024                      path:                                            cases/04-SuperTables/01-Create/test_table_comment.py"},{"location":"case_list_docs/SuperTables/Create/#04-SuperTables.01-Create.test_table_param_ttl.TestTableParamTtl.test_table_param_ttl","title":"","text":"Table TTL Case 1. Create normal table with ttl param 2. Create stable and child table with ttl param 3. Insert data into child table with ttl param 4. Verify ttl param is ok                      path:                                            cases/04-SuperTables/01-Create/test_table_param_ttl.py"},{"location":"case_list_docs/SuperTables/Drop/","title":"02-Drop","text":""},{"location":"case_list_docs/SuperTables/Drop/#04-SuperTables.02-Drop.test_stable_drop_basic.TestStableDropBasic.test_stable_drop_basic","title":"","text":"Drop: basic 1. Create a super table 2. Create a child table 3. Create a normal table 4. Insert data 5. Drop the super table                      path:                                            cases/04-SuperTables/02-Drop/test_stable_drop_basic.py"},{"location":"case_list_docs/SuperTables/Drop/#04-SuperTables.02-Drop.test_stable_drop_repeat.TestStableDropRepeat.test_stable_drop_repeat","title":"","text":"Drop: repeatedly 1. Create a super table. 2. Create child tables and insert data. 3. Drop the super table. 4. Repeat the above 30 times with the same super-table name.                      path:                                            cases/04-SuperTables/02-Drop/test_stable_drop_repeat.py"},{"location":"case_list_docs/SuperTables/Query/","title":"04-Query","text":""},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_column_datatypes.TestStableQueryColumnDatatypes.test_stable_query_column_datatypes","title":"","text":"Query: column datatypes 1. Create a super table containing 1 data column and 1 tag column 2. With data column data types: bool, smallint, tinyint, int, bigint, unsigned bigint, float, double, binary 3. Create child tables and insert data 4. Execute queries on the super table with filtering conditions based on regular data columns, including: Projection queries, Aggregate queries, Group-by queries                      path:                                            cases/04-SuperTables/04-Query/test_stable_query_column_datatypes.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_column_filter.TestStableQueryColumnFilter.test_stable_query_column_filter","title":"","text":"Query: column filter 1. Create a super table containing multiple data columns and tags (2-6 fields) 2. Create child tables and insert data 3. Execute queries on the super table with filtering conditions based on regular data columns, including:     Projection queries     Aggregate queries     Group-by queries 4.                       path:                                            cases/04-SuperTables/04-Query/test_stable_query_column_filter.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_during_leader_election.TestSelectDuringLeaderElection.test_select_during_leader_election","title":"","text":"Query: during leader election 1. Create 3 dnodes 2. Create db with 10 vgroups 3 replications 2. Create supper table and sub table 3. Stop one of the dnodes with leader vnode on it 4. Select data from super table, it should be success                      path:                                            cases/04-SuperTables/04-Query/test_stable_query_during_leader_election.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_from_dnodes.TestStableQueryFromDnodes.test_stable_query_from_dnodes","title":"","text":"Query: from dnodes 1. Create a super table distributed across multiple dnodes and vnodes 2. Insert data and query the results 3. Perform partitioned queries using PARTITION BY 4. Check query results when data is distributed across different vnodes, memory, and disk 5. Restart all nodes and verify the computation results                      path:                                            cases/04-SuperTables/04-Query/test_stable_query_from_dnodes.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_tag_datatypes.TestStableQueryTagDatatypes.test_stable_query_tag_datatypes","title":"","text":"Query: tag datatypes 1. Create a super table containing 1 data column and 1 tag column 2. With tag column data types: bool, smallint, tinyint, int, bigint, unsigned bigint, float, double, binary 3. Create child tables and insert data 4. Execute queries on the super table with filtering conditions based on regular data columns, including: Projection queries, Aggregate queries, Group-by queries                      path:                                            cases/04-SuperTables/04-Query/test_stable_query_tag_datatypes.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_tag_filter.TestStableQueryTagFilter.test_stable_query_tag_filter","title":"","text":"Query: tag filter 1. Create a super table containing multiple data columns and tags (1-6 fields) 2. Create child tables and insert data 3. Execute queries on the super table with filtering conditions based on regular data columns, including:     Projection queries     Aggregate queries     Group-by queries                      path:                                            cases/04-SuperTables/04-Query/test_stable_query_tag_filter.py"},{"location":"case_list_docs/SuperTables/Query/#04-SuperTables.04-Query.test_stable_query_tbname_filter.TestStableQueryTbnameFilter.test_stable_query_tbname_filter","title":"","text":"Query: tbname filter 1. Create a super table 2. Create child tables and insert data 3. Execute the following query operations on the super table using tbname INconditions:\u2022 Projection queries (column selection)\u2022 Aggregate queries (COUNT/SUM/AVG/MIN/MAX)\u2022 Grouping queries (GROUP BY with HAVING)                      path:                                            cases/04-SuperTables/04-Query/test_stable_query_tbname_filter.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_1.TestNormalTableAlter1.test_normal_table_alter_1","title":"","text":"Alter: then desc 1. ALTER TABLE \u2026 ADD/DROP/MODIFY columns 2. DESCRIBE each change to confirm 3. Restart the database 4. Resume ADD/DROP/MODIFY operations and verify again                      path:                                            cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_1.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_2.TestNormalTableAlter2.test_normal_table_alter_2","title":"","text":"Alter: then insert 1. Execute ADD COLUMN, DROP COLUMN, MODIFY COLUMN operations. 2. Insert data and run SELECT COUNT queries to verify. 3. Restart the database. 4. Continue modifying columns and verify the changes.                      path:                                            cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_2.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_3.TestNormalTableAlter3.test_normal_table_alter_3","title":"","text":"Alter: import old data 1. Add column 2. Insert out-of-order data 3. Query data                      path:                                            cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_3.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_4.TestNormalTableAlter4.test_normal_table_alter_4","title":"","text":"Alter: repeatedly add 1. Add column 2. Insert data 3. Project query 4. Loop for 7 times 5. Kill then restart                      path:                                            cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_4.py"},{"location":"case_list_docs/Tables/NormalTables/Alter/#03-Tables.01-NormalTables.03-Alter.test_normaltable_alter_5.TestNormalTableAlter5.test_normal_table_alter_5","title":"","text":"Alter: repeatedly drop 1. Drop column 2. Insert data 3. Project query 4. Loop for 7 times 5. Kill then restart                      path:                                            cases/03-Tables/01-NormalTables/03-Alter/test_normaltable_alter_5.py"},{"location":"case_list_docs/Tables/NormalTables/Create/","title":"01-Create","text":""},{"location":"case_list_docs/Tables/NormalTables/Create/#03-Tables.01-NormalTables.01-Create.test_normaltable_100w.TestTb100wDataOrder.test_tb_100w_data_order","title":"","text":"Create 100w Normal Tables 1. Create 100w normal tables 2. Query table order by col 3. flush database                      path:                                            cases/03-Tables/01-NormalTables/01-Create/test_normaltable_100w.py"},{"location":"case_list_docs/Tables/NormalTables/Create/#03-Tables.01-NormalTables.01-Create.test_normaltable_column_limit.TestNormalTableColumnNumLimit.test_normal_table_column_num_limit","title":"","text":"Column num limit 1. Create normal table 2. Add or delete columns 3. Check column count, the count should not exceed 4096                      path:                                            cases/03-Tables/01-NormalTables/01-Create/test_normaltable_column_limit.py"},{"location":"case_list_docs/Tables/NormalTables/Create/#03-Tables.01-NormalTables.01-Create.test_normaltable_datatypes.TestNormalTableDatatypes.test_normal_table_datatypes","title":"","text":"Datatypes 1. Create a normal table containing bigint, binary, bool, double, float, int, smallint, tinyint types 2. Write data 3. Perform a projection query, including an order by condition                      path:                                            cases/03-Tables/01-NormalTables/01-Create/test_normaltable_datatypes.py"},{"location":"case_list_docs/Tables/NormalTables/Create/#03-Tables.01-NormalTables.01-Create.test_normaltable_synatx.TestNormalTableSynatx.test_normal_table_synatx","title":"","text":"Synatx 1. Attempt to create tables with invalid table names 2. Attempt to create tables with invalid column names 3. Attempt to create tables with invalid data types 4. Create normal tables with valid and invalid names                      path:                                            cases/03-Tables/01-NormalTables/01-Create/test_normaltable_synatx.py"},{"location":"case_list_docs/Tables/NormalTables/Drop/","title":"02-Drop","text":""},{"location":"case_list_docs/Tables/NormalTables/Drop/#03-Tables.01-NormalTables.02-Drop.test_normaltable_delete_reuse1.TestNormalTableDeleteReuse2.test_normal_table_delete_reuse2","title":"","text":"Repeatedly drop 2 1. Create a normal table (same name) 2. Insert data  3. Query data 4. Repeat 20 timeses                      path:                                            cases/03-Tables/01-NormalTables/02-Drop/test_normaltable_delete_reuse1.py"},{"location":"case_list_docs/Tables/NormalTables/Drop/#03-Tables.01-NormalTables.02-Drop.test_normaltable_delete_reuse2.TestNormalTableDeleteReuse2.test_normal_table_delete_reuse2","title":"","text":"Repeatedly drop 2 1. Create a normal table (new name) 2. Insert data  3. Query data 4. Repeat 20 timeses                      path:                                            cases/03-Tables/01-NormalTables/02-Drop/test_normaltable_delete_reuse2.py"},{"location":"case_list_docs/Tables/NormalTables/Drop/#03-Tables.01-NormalTables.02-Drop.test_normaltable_delete_writing.TestNormalTableDeleteWriting.test_normal_table_delete_writing","title":"","text":"Repeatedly drop 3 1. Create a background process that continuously writes data 2. Create a normal table 3. Insert data  4. Query data 5. Repeat 20 timeses                      path:                                            cases/03-Tables/01-NormalTables/02-Drop/test_normaltable_delete_writing.py"},{"location":"case_list_docs/Tables/NormalTables/Query/","title":"04-Query","text":""},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_after_drop.TestNormalTableDrop.test_normal_table_drop","title":"","text":"Query: after drop 1. Create a table \u2192 insert one record \u2192 query that record \u2192 repeat this sequence 8 times 2. Drop all created tables 3. Repeat 1 times                      path:                                            cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_after_drop.py"},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_aggregate.TestNormalTableAggregate.test_normal_table_aggregate","title":"","text":"Query: aggregate 1. Create a table with 256 columns 2. Insert data 3. Execute projection queries 4. Execute filter queries 5. Execute aggregate queries 6. Kill the process and restart the database                      path:                                            cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_aggregate.py"},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_composite.TestCompositeKeyLoad.test_composite_key_load","title":"","text":"Query: composite key Error Reading Composite Key Data from Memory and STT Files Root Cause: The minKeyused a shallow copy. During backward iteration in STT, this accidentally modified the minKeyvalue. When merging keys from memory and STT, inconsistent key states caused data corruption. Reproduction Steps: 1. Create table with timestamp column and composite key string column. Insert 4 records into STT files and 1 record into memory. 2. Execute query \u2192 Trigger failure                      path:                                            cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_composite.py"},{"location":"case_list_docs/Tables/NormalTables/Query/#03-Tables.01-NormalTables.04-Query.test_normaltable_query_filter.TestNormalTableQuery.test_normal_table_query","title":"","text":"Query: filter 1. Create a normal table 2. Insert data 3. Execute projection queries 4. Execute aggregate queries 5. Execute field filtering queries                      path:                                            cases/03-Tables/01-NormalTables/04-Query/test_normaltable_query_filter.py"},{"location":"case_list_docs/Tables/SubTables/Alter/","title":"03-Alter","text":""},{"location":"case_list_docs/Tables/SubTables/Create/","title":"01-Create","text":""},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_bigint.TestDatatypeBigInt.test_datatype_bigint","title":"","text":"DataTypes: bigint 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_bigint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_blob.TestDatatypeBlob.test_datatype_blob","title":"","text":"DataTypes: blob 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_blob.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_bool.TestDatatypeBool.test_datatype_bool","title":"","text":"DataTypes: bool 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_bool.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_decimal.TestDatatypeDecimal.test_datatype_decimal","title":"","text":"DataTypes: decimal test decimal types filtering with tag conditions crash fix                      path:                                            cases/01-DataTypes/test_datatype_decimal.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_double.TestDatatypeDouble.test_datatype_double","title":"","text":"DataTypes: double 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_double.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_float.TestDatatypeFloat.test_datatype_float","title":"","text":"DataTypes: float 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_float.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_int.TestDatatypeInt.test_datatype_int","title":"","text":"DataTypes: int 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_int.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_json.TestDatatypeJson.test_datatype_json","title":"","text":"DataTypes: json 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_json.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_nchar1.TestDatatypeNchar.test_datatype_nchar","title":"","text":"DataTypes: nchar 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_nchar1.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_nchar2.TestNChar.test_nchar","title":"","text":"DataTypes: nchar (Chinese) 1. Create table 2. Insert data 3. Query data                      path:                                            cases/01-DataTypes/test_datatype_nchar2.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_smallint.TestDatatypeSmallint.test_datatype_smallint","title":"","text":"DataTypes: smallint 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_smallint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_timestamp.TestDatatypeTimestamp.test_datatype_timestamp","title":"","text":"DataTypes: timestamp 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_timestamp.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_tinyint.TestDatatypeTinyint.test_datatype_tinyint","title":"","text":"DataTypes: tinyint 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_tinyint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_uint.TestDatatypeUint.test_datatype_uint","title":"","text":"DataTypes: unsigned int 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_uint.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_unsign.TestDatatypeUnsigned.test_datatype_unsigned","title":"","text":"DataTypes: unsigned numeric 1. Create table 2. Insert data 3. Alter tag value 4. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_unsign.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_varbinary.TestDatatypeVarbinary.test_datatype_varbinary","title":"","text":"DataTypes: varbinary 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_varbinary.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_datatype_varchar.TestDatatypeVarchar.test_datatype_varchar","title":"","text":"DataTypes: varchar 1. Create table 2. Insert data 3. Auto-create table 4. Alter tag value 5. Handle illegal input                      path:                                            cases/01-DataTypes/test_datatype_varchar.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_null_column.TestNullColumn.test_null_column","title":"","text":"NULL: column 1. Create table 2. Insert data with NULL 3. Query data                      path:                                            cases/01-DataTypes/test_null_column.py"},{"location":"case_list_docs/Tables/SubTables/Create/#01-DataTypes.test_null_tag.TestNullTag.test_null_tag","title":"","text":"NULL: tag 1. Create table with NULL tags 2. Select tags 3. Alter tags                      path:                                            cases/01-DataTypes/test_null_tag.py"},{"location":"case_list_docs/Tables/SubTables/Query/","title":"04-Query","text":""},{"location":"case_list_docs/TimeSeriesExt/CountWindow/","title":"07-CountWindow","text":""},{"location":"case_list_docs/TimeSeriesExt/CountWindow/#13-TimeSeriesExt.07-CountWindow.test_count.TestCount.test_count","title":"","text":"Count: basic test 1. Count + sliding window queries 2. Specified column queries 3. Combined use with PARTITION BY and ORDER BY 4. Some illegal value checks                      path:                                            cases/13-TimeSeriesExt/07-CountWindow/test_count.py"},{"location":"case_list_docs/TimeSeriesExt/EventWindow/","title":"05-EventWindow","text":""},{"location":"case_list_docs/TimeSeriesExt/EventWindow/#13-TimeSeriesExt.05-EventWindow.test_event.TestEvent.test_event","title":"","text":"Event: basic test 1. Test the usage of event window, including various start/end conditions, combination with PARTITION BY and GROUP BY, usage as subqueries, etc. 2. Test some illegal statements                      path:                                            cases/13-TimeSeriesExt/05-EventWindow/test_event.py"},{"location":"case_list_docs/TimeSeriesExt/EventWindow/#13-TimeSeriesExt.05-EventWindow.test_ts_event_bugs.TestTsEventBugs.test_ts_event_bugs","title":"","text":"Meta bugs 1. Verify bug TD-31660                      path:                                            cases/13-TimeSeriesExt/05-EventWindow/test_ts_event_bugs.py"},{"location":"case_list_docs/TimeSeriesExt/Fill/","title":"02-Fill","text":""},{"location":"case_list_docs/TimeSeriesExt/Fill/#13-TimeSeriesExt.02-Fill.test_ts_fill.TestFill.test_ts_fill","title":"","text":"Fill: basic test 1. Test fill + value, while generating multiple columns simultaneously 2. Test various methods such as prev, NULL, none, next, linear, null, null_f, and more 3. Test insert two rows and check fill(value, 0, 0) and fill(value, 1000, 10)                      path:                                            cases/13-TimeSeriesExt/02-Fill/test_ts_fill.py"},{"location":"case_list_docs/TimeSeriesExt/Fill/#13-TimeSeriesExt.02-Fill.test_ts_fill.TestFill.test_fill_sliding_duration","title":"","text":"Fill with sliding test case 1. check the correctness of duration when filling null for sliding interval window                      path:                                            cases/13-TimeSeriesExt/02-Fill/test_ts_fill.py"},{"location":"case_list_docs/TimeSeriesExt/PartitionBy/","title":"01-PartitionBy","text":""},{"location":"case_list_docs/TimeSeriesExt/PartitionBy/#13-TimeSeriesExt.01-PartitionBy.test_partitonby.TestPartitonBy.test_partitionby","title":"","text":"PartitionBy: basic test Test the use of PARTITION BY in projection queries, including combinations with SLIMIT, different filtering conditions, and usage as subqueries.                      path:                                            cases/13-TimeSeriesExt/01-PartitionBy/test_partitonby.py"},{"location":"case_list_docs/TimeSeriesExt/SessionWindow/","title":"06-SessionWindow","text":""},{"location":"case_list_docs/TimeSeriesExt/SessionWindow/#13-TimeSeriesExt.06-SessionWindow.test_session.TestSession.test_session","title":"","text":"Session: basic test 1. Test the basic usage of session window 2. Test some illegal statements                      path:                                            cases/13-TimeSeriesExt/06-SessionWindow/test_session.py"},{"location":"case_list_docs/TimeSeriesExt/TimeWindow/","title":"03-TimeWindow","text":""},{"location":"case_list_docs/TimeSeriesExt/TimeWindow/#13-TimeSeriesExt.03-TimeWindow.test_interval_auto.TestIntervalMore.test_query_interval","title":"","text":"Interval: auto 1. Testing the mixed use of interval and auto 2. Combined with LIMIT, ts filtering conditions 3. Combined with sliding                      path:                                            cases/13-TimeSeriesExt/03-TimeWindow/test_interval_auto.py"},{"location":"case_list_docs/TimeSeriesExt/TimeWindow/#13-TimeSeriesExt.03-TimeWindow.test_interval_basic.TestInterval.test_interval","title":"","text":"Interval: basic test 1. Testing the use of interval, offset, and sliding 2. Testing their use with GROUP BY, ORDER BY, and PARTITION BY 3. Testing different fill methods, such as NULL, prev, next 4. Mixed use with functions such as count, sum, max, min, count, stddev, last, spread                      path:                                            cases/13-TimeSeriesExt/03-TimeWindow/test_interval_basic.py"},{"location":"case_list_docs/TimeSeriesExt/TimeWindow/#13-TimeSeriesExt.03-TimeWindow.test_interval_bug_ts5400.TestTs5400.test_ts5400","title":"","text":"Interval: Bug TS-5400 test interval query when ts = 0 error fix                      path:                                            cases/13-TimeSeriesExt/03-TimeWindow/test_interval_bug_ts5400.py"},{"location":"case_list_docs/TimeSeriesExt/TimeWindow/#13-TimeSeriesExt.03-TimeWindow.test_interval_timezone.TestIntervalDiffTz.test_interval_diff_tz","title":"","text":"Interval: timezone test interval with client and server using different timezone                      path:                                            cases/13-TimeSeriesExt/03-TimeWindow/test_interval_timezone.py"},{"location":"case_list_docs/Tools/Check/","title":"01-Check","text":""},{"location":"case_list_docs/Tools/Check/#81-Tools.01-Check.test_check_error_code.TestCheckErrorCode.test_check_error_code","title":"","text":"Check the consistency of error codes between header file and doc files. 1. Read all error codes from include/util/taoserror.h 2. Read all error codes from docs/zh/14-reference/09-error-code.md 3. Read all error codes from docs/en/14-reference/09-error-code.md 4. Check whether all error codes in header file are documented in both doc files 5. Check whether the description, possible cause and suggested actions are provided in both doc files                      path:                                            cases/81-Tools/01-Check/test_check_error_code.py"},{"location":"case_list_docs/Tools/Check/#81-Tools.01-Check.test_check_systb_inspect.TestTaosinspect.test_taosinspect","title":"","text":"Tool system tables inspect 1. Check columns completeness on information_schema tables: 2. information_schema.ins_stables 3. information_schema.ins_dnode_variables 4. information_schema.ins_dnodes 5. information_schema.ins_mnodes 6. information_schema.ins_vnodes 7. information_schema.ins_users 8. information_schema.ins_user_privileges 9. information_schema.ins_grants 10. information_schema.ins_databases 11. information_schema.ins_tables 12. information_schema.ins_streams 13. information_schema.ins_topics 14. information_schema.ins_subscriptions 15. information_schema.ins_vgroups 16. information_schema.ins_stream_tasks                      path:                                            cases/81-Tools/01-Check/test_check_systb_inspect.py"},{"location":"case_list_docs/Tools/Taos/","title":"02-Taos","text":""},{"location":"case_list_docs/Tools/Taos/#81-Tools.02-Taos.test_tool_cmdline.TestFullopt.test_tools_cmdline","title":"","text":"taos-CLI command line test 1. Insert data with taosBenchmark json format 2. Check taos-CLI all command lines                      path:                                            cases/81-Tools/02-Taos/test_tool_cmdline.py"},{"location":"case_list_docs/Tools/Taos/#81-Tools.02-Taos.test_tool_taos_cli.TestTaosCli.test_tool_taos_cli","title":"","text":"taos-CLI basic test 1. Insert data with taosBenchmark json format 2. Check describe show full 3. Check basic command in different conn mode 4. Check version and help 5. Check command options 6. Check data dump in/out 7. Check conn mode priority and except cmd 8. Check max password length                      path:                                            cases/81-Tools/02-Taos/test_tool_taos_cli.py"},{"location":"case_list_docs/Tools/TaosBenchmark/","title":"03-TaosBenchmark","text":""},{"location":"case_list_docs/Tools/Taosdump/","title":"04-Taosdump","text":""},{"location":"case_list_docs/Tools/Valgrind/","title":"05-Valgrind","text":""},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_basic1.TestValgrindBasic1.test_valgrind_basic1","title":"","text":"valgrind basic 1 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_basic1.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_basic2.TestValgrindBasic2.test_valgrind_basic2","title":"","text":"valgrind basic 2 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_basic2.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_basic3.TestValgrindBasic3.test_valgrind_basic3","title":"","text":"valgrind basic 3 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_basic3.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_basic4.TestValgrindBasic4.test_valgrind_basic4","title":"","text":"valgrind basic 4 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_basic4.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror1.TestValgrindCheckError1.test_valgrind_check_error1","title":"","text":"valgrind check error 1 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror1.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror2.TestValgrindCheckError2.test_valgrind_check_error2","title":"","text":"valgrind check error 2 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror2.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror3.TestValgrindCheckError3.test_valgrind_check_error3","title":"","text":"valgrind check error 3 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror3.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror4.TestValgrindCheckError4.test_valgrind_check_error4","title":"","text":"valgrind check error 4 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror4.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror5.TestValgrindCheckError5.test_valgrind_check_error5","title":"","text":"valgrind check error 5 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror5.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror6.TestValgrindCheckError6.test_valgrind_check_error6","title":"","text":"valgrind check error 6 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror6.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror7.TestValgrindCheckError7.test_valgrind_check_error7","title":"","text":"valgrind check error 7 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror7.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_checkerror8.TestValgrindCheckError8.test_valgrind_check_error8","title":"","text":"valgrind check error 8 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_checkerror8.py"},{"location":"case_list_docs/Tools/Valgrind/#81-Tools.05-Valgrind.test_valgrind_udf.TestValgrindUdf.test_valgrind_udf","title":"","text":"valgrind udf 1. -                      path:                                            cases/81-Tools/05-Valgrind/test_valgrind_udf.py"},{"location":"util_funcs_docs/new_test_framework/utils/","title":"utils","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__","title":"<code>__init__</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.BeforeTest","title":"<code>BeforeTest</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.BeforeTest.create_database","title":"create_database(request, db_name, host, port)","text":"<p>\u521b\u5efamodule\u7ea7\u522b\u7684\u6570\u636e\u5e93</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.BeforeTest.deploy_taos","title":"deploy_taos(yaml_file, mnodes_num=1, clean=False)","text":"<p>get env directory from request; use yaml file for taostest run;</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterComCheck","title":"<code>ClusterComCheck</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterComCheck.check_vgroups_status","title":"check_vgroups_status(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>check vgroups status in 10s after db vgroups status is changed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterComCheck.check_vgroups_status_with_offline","title":"check_vgroups_status_with_offline(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>n nodes cluster, 3 replica database return 1, n leaders, stable status return 2, 0 &lt; num of leader &lt; n, stable status return 0, no leader, stable status return -1, Elections not yet completed, unstable status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ClusterDnodes","title":"<code>ClusterDnodes</code>","text":"<p>rewrite TDDnodes and make MyDdnodes as TDDnodes child class</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ColorFormatter","title":"<code>ColorFormatter</code>","text":"<p>\u81ea\u5b9a\u4e49\u5e26\u989c\u8272\u7684\u65e5\u5fd7\u683c\u5f0f\u5316\u5668</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.CompatibilityBase","title":"<code>CompatibilityBase</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.CompatibilityBase.alter_string_in_file","title":"alter_string_in_file(file, old_str, new_str)","text":"<p>replace str in file :param file :param old_str :param new_str :return:</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.CompatibilityBase.version_compare","title":"version_compare(version1, version2)","text":"<p>Compare two version strings. Returns 1 if version1 &gt; version2, -1 if version1 &lt; version2, 0 if equal</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.ConfigureyCluster","title":"<code>ConfigureyCluster</code>","text":"<p>This will create defined number of dnodes and create a cluster. at the same time, it will return TDDnodes list:  dnodes,</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil","title":"<code>MqttUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkQos","title":"checkQos(expectedQos, show=False)","text":"<p>Checks if the qos fetched by the last subscription matches the expected qos.</p> <p>Parameters:</p> Name Type Description Default <code>expectedQos</code> <code>int</code> <p>The expected qos.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the qos matches the expected qos, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of qos does not match the expected qos.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last subscription matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.MqttUtil.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last sub.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last sub.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem","title":"<code>StreamItem</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.addQuerySqlCase","title":"addQuerySqlCase(query_sql_case)","text":"<p>\u6dfb\u52a0\u67e5\u8be2SQL\u7528\u4f8b</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.awaitResultHasRows","title":"awaitResultHasRows(waitSeconds=60)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u5df2\u6709\u7ed3\u679c\uff0c\u4e0d\u786e\u8ba4\u6700\u7ec8\u7ed3\u679c\u884c\u6570\u65f6\u4f7f\u7528</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.awaitRowStability","title":"awaitRowStability(stable_rows, waitSeconds=300)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u7ed3\u679c\u7684\u884c\u6570\u4e0e\u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570\u4e00\u81f4 :param stable_rows: int, \u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.setResultFile","title":"setResultFile(file)","text":"<p>\u8bbe\u7f6e\u7ed3\u679c\u6587\u4ef6\u8def\u5f84</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamItem.set_exp_query_param_mapping","title":"set_exp_query_param_mapping(mapping)","text":"<p>\u8bbe\u7f6e\u53c2\u6570\u540d\u4e0e\u5217\u7d22\u5f15\u7684\u6620\u5c04\uff0c\u4f8b\u5982 {\"_wstart\": 0, \"_wend\": 1}</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable","title":"<code>StreamTable</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.__delete_data","title":"__delete_data(full_table_name, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u8303\u56f4\u5185\u7684\u6570\u636e</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.appendSubTables","title":"appendSubTables(startTbIndex, endTbIndex)","text":"<p>\u5411\u8d85\u7ea7\u8868\u4e2d\u8ffd\u52a0\u5b50\u8868 :param startTbIndex: int, \u8d77\u59cb\u5b50\u8868\u7d22\u5f15 :param endTbIndex: int, \u7ed3\u675f\u5b50\u8868\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.append_data","title":"append_data(start_row, end_row)","text":"<p>\u5411\u8868\u4e2d\u8ffd\u52a0\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.append_subtable_data","title":"append_subtable_data(tbName, start_row, end_row)","text":"<p>\u5411\u6307\u5b9a\u5b50\u8868\u8ffd\u52a0\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.delete_data","title":"delete_data(start_row, end_row)","text":"<p>\u5220\u9664\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.delete_subtable_data","title":"delete_subtable_data(tbName, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.register_column_generator","title":"register_column_generator(column_name, generator_func)","text":"<p>\u6ce8\u518c\u67d0\u4e2a\u5217\u540d\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u751f\u6210\u51fd\u6570 :param column_name: str, \u5217\u540d :param generator_func: function(row_index: int, timestamp: int) -&gt; str</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.reset_columns","title":"reset_columns()","text":"<p>\u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u5217\u5b9a\u4e49</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setInterval","title":"setInterval(interval)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u95f4\u9694 :param interval: int, \u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u4e3a\u79d2</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setLogOpen","title":"setLogOpen(logOpen)","text":"<p>\u8bbe\u7f6e\u65e5\u5fd7\u5f00\u5173 :param logOpen: bool, \u662f\u5426\u5f00\u542f\u65e5\u5fd7</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setPrecision","title":"setPrecision(precision)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u7cbe\u5ea6 :param precision: str, \u65f6\u95f4\u7cbe\u5ea6\uff0c\u652f\u6301 \"ms\", \"us\", \"ns\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.setStart","title":"setStart(start)","text":"<p>\u8bbe\u7f6e\u8d77\u59cb\u65f6\u95f4 :param start: str, \u8d77\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3a \"YYYY-MM-DD HH.MM.SS\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.set_columns","title":"set_columns(column_def)","text":"<p>\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u5217\u5b9a\u4e49 :param column_def: str\uff0c\u4f8b\u5982 \"ts timestamp, val int\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.update_data","title":"update_data(start_row, end_row)","text":"<p>\u66f4\u65b0\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.StreamTable.update_subtable_data","title":"update_subtable_data(tbName, start_row, end_row)","text":"<p>\u66f4\u65b0\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom","title":"<code>TDCom</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cal_watermark_window_close_interval_endts","title":"cal_watermark_window_close_interval_endts(start_ts, interval, watermark=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>interval</code> <code>int</code> <p>[s]</p> required <code>watermark</code> <code>int</code> <p>[s]. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cal_watermark_window_close_session_endts","title":"cal_watermark_window_close_session_endts(start_ts, watermark=None, session=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>watermark</code> <code>int</code> <p>session. Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>as followed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cast_query_data","title":"cast_query_data(query_data)","text":"<p>cast query-result for existed-stb</p> <p>Parameters:</p> Name Type Description Default <code>query_data</code> <code>list</code> <p>query data list</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>new list after cast</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_query_data","title":"check_query_data(sql1, sql2, sorted=False, fill_value=None, tag_value_list=None, defined_tag_count=None, partition=True, use_exist_stb=False, subtable=None, reverse_check=False)","text":"<p>confirm query result</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ....</p> required <code>sql2</code> <code>str</code> <p>select ....</p> required <code>sorted</code> <code>bool</code> <p>if sort result list. Defaults to False.</p> <code>False</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>tag_value_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>defined_tag_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>partition</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>use_exist_stb</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>subtable</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>reverse_check</code> <code>bool</code> <p>not equal. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream","title":"check_stream(sql1, sql2, expected_count, max_delay=None)","text":"<p>confirm stream</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ...</p> required <code>sql2</code> <code>str</code> <p>select ...</p> required <code>expected_count</code> <code>int</code> <p>expected_count</p> required <code>max_delay</code> <code>int</code> <p>max_delay value. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream_field_type","title":"check_stream_field_type(sql, input_function)","text":"<p>confirm stream field</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>input sql</p> required <code>input_function</code> <code>str</code> <p>scalar</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream_res","title":"check_stream_res(sql, expected_res, max_delay)","text":"<p>confirm stream result</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>select ...</p> required <code>expected_res</code> <code>str</code> <p>expected result</p> required <code>max_delay</code> <code>int</code> <p>max_delay value</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.check_stream_task_status","title":"check_stream_task_status(stream_name, vgroups, stream_timeout=0, check_wal_info=True)","text":"<p>check stream status</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>vgroups</code> <code>int</code> <p>vgroups</p> required <p>Returns:     str: status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.cleanTb","title":"cleanTb(type='taosc', dbname='db')","text":"<p>type is taosc or restful</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.clean_env","title":"clean_env()","text":"<p>drop all streams and databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.create_old_stream","title":"create_old_stream(stream_name, des_table, source_sql, trigger_mode=None, watermark=None, max_delay=None, ignore_expired=None, ignore_update=None, subtable_value=None, fill_value=None, fill_history_value=None, stb_field_name_value=None, tag_value=None, use_exist_stb=False, use_except=False)","text":"<p>create_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target stable</p> required <code>source_sql</code> <code>str</code> <p>stream sql</p> required <code>trigger_mode</code> <code>str</code> <p>at_once/window_close/max_delay. Defaults to None.</p> <code>None</code> <code>watermark</code> <code>str</code> <p>watermark time. Defaults to None.</p> <code>None</code> <code>max_delay</code> <code>str</code> <p>max_delay time. Defaults to None.</p> <code>None</code> <code>ignore_expired</code> <code>int</code> <p>ignore expired data. Defaults to None.</p> <code>None</code> <code>ignore_update</code> <code>int</code> <p>ignore update data. Defaults to None.</p> <code>None</code> <code>subtable_value</code> <code>str</code> <p>subtable. Defaults to None.</p> <code>None</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>fill_history_value</code> <code>int</code> <p>0/1. Defaults to None.</p> <code>None</code> <code>stb_field_name_value</code> <code>str</code> <p>existed stb. Defaults to None.</p> <code>None</code> <code>tag_value</code> <code>str</code> <p>custom tag. Defaults to None.</p> <code>None</code> <code>use_exist_stb</code> <code>bool</code> <p>use existed stb tag. Defaults to False.</p> <code>False</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.create_snode_if_not_exists","title":"create_snode_if_not_exists(dnode_id=1)","text":"<p>Create snode if not exists</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode exists or created successfully, False if creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.create_stream","title":"create_stream(stream_name, des_table=None, source_sql=None, trigger_table=None, trigger_type=None, from_table=None, partition_by=None, stream_options=None, notification_definition=None, output_subtable=None, columns=None, tags=None, if_not_exists=True, db_name=None, use_except=False)","text":"<p>create_stream with new syntax</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target table. Defaults to None.</p> <code>None</code> <code>source_sql</code> <code>str</code> <p>subquery. Defaults to None.</p> <code>None</code> <code>trigger_table</code> <code>str</code> <p>trigger table name. Defaults to None.</p> <code>None</code> <code>trigger_type</code> <code>str</code> <p>SESSION/STATE_WINDOW/INTERVAL/EVENT_WINDOW/COUNT_WINDOW/PERIOD. Defaults to None.</p> <code>None</code> <code>from_table</code> <code>str</code> <p>source table name. Defaults to None.</p> <code>None</code> <code>partition_by</code> <code>str</code> <p>partition columns. Defaults to None.</p> <code>None</code> <code>stream_options</code> <code>str</code> <p>stream options. Defaults to None.</p> <code>None</code> <code>notification_definition</code> <code>str</code> <p>notification settings. Defaults to None.</p> <code>None</code> <code>output_subtable</code> <code>str</code> <p>subtable expression. Defaults to None.</p> <code>None</code> <code>columns</code> <code>str</code> <p>column definitions. Defaults to None.</p> <code>None</code> <code>tags</code> <code>str</code> <p>tag definitions. Defaults to None.</p> <code>None</code> <code>if_not_exists</code> <code>bool</code> <p>if not exists flag. Defaults to True.</p> <code>True</code> <code>db_name</code> <code>str</code> <p>database name. Defaults to None.</p> <code>None</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream SQL if use_except=True, None otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_all_db","title":"drop_all_db()","text":"<p>drop all databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_all_streams","title":"drop_all_streams()","text":"<p>drop all streams from all user databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_db","title":"drop_db(dbname='test')","text":"<p>drop a db</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.drop_snode","title":"drop_snode(snode_id=None)","text":"<p>Drop snode</p> <p>Parameters:</p> Name Type Description Default <code>snode_id</code> <code>int</code> <p>Specific snode ID to drop. If None, drops all snodes.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if successful, False otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.ensure_snode_ready","title":"ensure_snode_ready(dnode_id=1, timeout=30)","text":"<p>Ensure snode is created and ready</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>Maximum wait time in seconds. Defaults to 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode is ready, False if timeout or creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.float_handle","title":"float_handle(input_list)","text":"<p>float list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>float list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.genTs","title":"genTs(precision='ms', ts='', protype='taosc', ns_tag=None)","text":"<p>generate ts</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>str</code> <p>db precision. Defaults to \"ms\".</p> <code>'ms'</code> <code>ts</code> <code>str</code> <p>input ts. Defaults to \"\".</p> <code>''</code> <code>protype</code> <code>str</code> <p>\"taosc\" or \"restful\". Defaults to \"taosc\".</p> <code>'taosc'</code> <code>ns_tag</code> <code>_type_</code> <p>use ns. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>timestamp, datetime: timestamp and datetime</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.gen_tag_col_str","title":"gen_tag_col_str(gen_type, data_type, count)","text":"<p>gen multi tags or cols by gen_type</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.getLongName","title":"getLongName(len, mode='mixed')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.get_long_name","title":"get_long_name(length=10, mode='letters')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.get_timestamp_n_days_later","title":"get_timestamp_n_days_later(n=30)","text":"<p>Get the timestamp of a date n days later from the current date.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of days to add to the current date. Default is 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>int</code> <p>Timestamp of the date n days later, in milliseconds.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.pause_stream","title":"pause_stream(stream_name, if_exist=True, if_not_exist=False)","text":"<p>pause_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.prepare_data","title":"prepare_data(interval=None, watermark=None, session=None, state_window=None, state_window_max=127, interation=3, range_count=None, precision='ms', fill_history_value=0, ext_stb=None, custom_col_index=None, col_value_type='random')","text":"<p>prepare stream data</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>watermark</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>state_window</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>state_window_max</code> <code>int</code> <p>Defaults to 127.</p> <code>127</code> <code>interation</code> <code>int</code> <p>Defaults to 3.</p> <code>3</code> <code>range_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>precision</code> <code>str</code> <p>Defaults to \"ms\".</p> <code>'ms'</code> <code>fill_history_value</code> <code>int</code> <p>Defaults to 0.</p> <code>0</code> <code>ext_stb</code> <code>bool</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.resume_stream","title":"resume_stream(stream_name, if_exist=True, if_not_exist=False, ignore_untreated=False)","text":"<p>resume_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>ignore_untreated</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.round_handle","title":"round_handle(input_list)","text":"<p>round list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>round list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screateDb","title":"screateDb(dbname='test', drop_db=True, **kwargs)","text":"<p>create database</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code> <code>drop_db</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screate_ctable","title":"screate_ctable(dbname=None, stbname=None, ctbname='ctb', use_name='table', tag_elm_list=None, ts_value=None, count=1, default_varchar_datatype='letters', default_nchar_datatype='letters', default_ctbname_prefix='ctb', default_ctbname_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>ctbname</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>ctb count, Defaults to 1.</p> <code>1</code> <code>default_varchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_nchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_ctbname_prefix</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>default_ctbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screate_stable","title":"screate_stable(dbname=None, stbname='stb', use_name='table', column_elm_list=None, tag_elm_list=None, need_tagts=False, count=1, default_stbname_prefix='stb', default_stbname_index_start_num=1, default_column_index_start_num=1, default_tag_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>use_name</code> <code>str</code> <p>stable/table, Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>use for sgen_column_type_str(), Defaults to None.</p> <code>None</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>need_tagts</code> <code>bool</code> <p>tag use timestamp, Defaults to False.</p> <code>False</code> <code>count</code> <code>int</code> <p>stable count, Defaults to 1.</p> <code>1</code> <code>default_stbname_prefix</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>default_stbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tag_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.screate_table","title":"screate_table(dbname=None, tbname='tb', use_name='table', column_elm_list=None, count=1, default_tbname_prefix='tb', default_tbname_index_start_num=1, default_column_index_start_num=1, **kwargs)","text":"<p>create ctable</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tbname_prefix</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>default_tbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sdelete_rows","title":"sdelete_rows(dbname=None, tbname=None, start_ts=None, end_ts=None, ts_key=None)","text":"<p>delete rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>start_ts</code> <code>timestamp</code> <p>range start. Defaults to None.</p> <code>None</code> <code>end_ts</code> <code>timestamp</code> <p>range end. Defaults to None.</p> <code>None</code> <code>ts_key</code> <code>str</code> <p>timestamp column name. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_column_type_str","title":"sgen_column_type_str(column_elm_list)","text":"<p>generage column type str</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>column_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_column_value_list","title":"sgen_column_value_list(column_elm_list, need_null, ts_value=None, additional_ts=None, custom_col_index=None, col_value_type=None, force_pk_val=None)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>gen_random_type_value()</p> required <code>need_null</code> <code>bool</code> <p>if insert null</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_tag_type_str","title":"sgen_tag_type_str(tag_elm_list)","text":"<p>generage tag type str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>tag_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sgen_tag_value_list","title":"sgen_tag_value_list(tag_elm_list, ts_value=None)","text":"<p>generage tag value str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>description</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.sinsert_rows","title":"sinsert_rows(dbname=None, tbname=None, column_ele_list=None, ts_value=None, count=1, need_null=False, custom_col_index=None, col_value_type='random')","text":"<p>insert rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>column_ele_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>need_null</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.str_ts_trans_bigint","title":"str_ts_trans_bigint(str_ts)","text":"<p>trans str ts to bigint</p> <p>Parameters:</p> Name Type Description Default <code>str_ts</code> <code>str</code> <p>human-date</p> required <p>Returns:</p> Name Type Description <code>bigint</code> <p>bigint-ts</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.time_cast","title":"time_cast(time_value, split_symbol='+')","text":"<p>cast bigint to timestamp</p> <p>Parameters:</p> Name Type Description Default <code>time_value</code> <code>bigint</code> <p>ts</p> required <code>split_symbol</code> <code>str</code> <p>split sympol. Defaults to \"+\".</p> <code>'+'</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>timestamp</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.trans_time_to_s","title":"trans_time_to_s(runtime)","text":"<p>trans time to s</p> <p>Parameters:</p> Name Type Description Default <code>runtime</code> <code>str</code> <p>1d/1h/1m...</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>second</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.update_delete_history_data","title":"update_delete_history_data(delete)","text":"<p>update and delete history data</p> <p>Parameters:</p> Name Type Description Default <code>delete</code> <code>bool</code> <p>True/False</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDCom.update_json_file_replica","title":"update_json_file_replica(json_file_path, new_replica_value, output_file_path=None)","text":"<p>Read a JSON file, update the 'replica' value, and write the result back to a file.</p> <p>Parameters: json_file_path (str): The path to the original JSON file. new_replica_value (int): The new 'replica' value to be set. output_file_path (str, optional): The path to the output file where the updated JSON will be saved. If not provided, the original file will be overwritten.</p> <p>Returns: None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnode","title":"<code>TDDnode</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnode.dnodeClearData","title":"dnodeClearData()","text":"<p>Clear dnode's data (Remove all data files).</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was cleared successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnodes","title":"<code>TDDnodes</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDDnodes.dnodeClearData","title":"dnodeClearData(index)","text":"<p>Clear dnode's data (Remove all data files).</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to clear.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was cleared successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath","title":"<code>TDFindPath</code>","text":"<p>This class is for finding path within TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath.getTDenginePath","title":"getTDenginePath()","text":"<p>for finding the root path of TDengine</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the root path of TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath.getTaosdemoPath","title":"getTaosdemoPath()","text":"<p>for finding the path of directory containing taosdemo</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the path to directory containing taosdemo</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDFindPath.init","title":"init(file)","text":"<p>[summary]</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>the file location you want to start the query. Generally using file</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql","title":"<code>TDSql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkAffectedRows","title":"checkAffectedRows(expectAffectedRows)","text":"<p>Checks if the number of affected rows from the last executed SQL statement matches the expected number of affected rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectAffectedRows</code> <code>int</code> <p>The expected number of affected rows.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of affected rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkAgg","title":"checkAgg(sql, expectCnt)","text":"<p>Executes an aggregate SQL query and checks if the result matches the expected count.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The aggregate SQL query to be executed.</p> required <code>expectCnt</code> <code>int</code> <p>The expected count from the aggregate query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the result of the aggregate query does not match the expected count.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkAssert","title":"checkAssert(assertVal, show=False)","text":"<p>Checks if the assertVal is true.</p> <p>Parameters:</p> Name Type Description Default <code>assertVal</code> <p>The value to be assert</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkColNameList","title":"checkColNameList(col_name_list, expect_col_name_list)","text":"<p>Checks if the column names from the last query match the expected column names.</p> <p>Parameters:</p> Name Type Description Default <code>col_name_list</code> <code>list</code> <p>The list of column names from the last query.</p> required <code>expect_col_name_list</code> <code>list</code> <p>The list of expected column names.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the column names do not match the expected column names.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkCols","title":"checkCols(expectCols)","text":"<p>Checks if the number of columns fetched by the last query matches the expected number of columns.</p> <p>Parameters:</p> Name Type Description Default <code>expectCols</code> <code>int</code> <p>The expected number of columns.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of columns does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkData","title":"checkData(row, col, data, show=False, exit=True)","text":"<p>Checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataCsv","title":"checkDataCsv(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file, or if the sql result does not match the expected data from CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataCsvByLine","title":"checkDataCsvByLine(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file line by line.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file,         or if the SQL result does not match the expected data from the CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataLoop","title":"checkDataLoop(row, col, data, sql, loopCount=10, waitTime=1)","text":"<p>Executes a SQL query in a loop and checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>loopCount</code> <code>int</code> <p>The number of times to execute the SQL query.</p> <code>10</code> <code>waitTime</code> <code>int</code> <p>The time to wait (in seconds) between each execution.</p> <code>1</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataMem","title":"checkDataMem(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataMemByLine","title":"checkDataMemByLine(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data (Same as checkDataMem).</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataNoExist","title":"checkDataNoExist(row, col, data)","text":"<p>Checks if the data at the specified row and column matches the expected data without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data matches the expected data, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataType","title":"checkDataType(row, col, dataType)","text":"<p>Checks if the data type at the specified row and column matches the expected data type.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>dataType</code> <code>str</code> <p>The expected data type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data type matches the expected data type, otherwise False.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkDataV2","title":"checkDataV2(row, col, data, show=False, operator='==')","text":"<p>Compare the data at the specified row and column with the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to compare against.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <code>operator</code> <code>str</code> <p>The operator to use for comparison. Defaults to \"==\".</p> <code>'=='</code> <p>Returns:     bool: True if the comparison is successful, False otherwise. Usage:     assert self.checkDataV2(row, col, data, show=True, operator=\"==\")     assert self.checkDataV2(row, col, data, show=True, operator=\"&lt;\") # means actual value is less than data</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkFirstValue","title":"checkFirstValue(sql, expect)","text":"<p>Executes a SQL query and checks if the first value in the result matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expect</code> <p>The expected value of the first result.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the first value in the result does not match the expected value.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkGreater","title":"checkGreater(elm, expect_elm)","text":"<p>Verifies that the first element is greater than the second element.</p> <p>This method compares two values and ensures that the first value (elm) is  strictly greater than the second value (expect_elm). It's commonly used for validating query results, performance metrics, or any numeric comparisons in test cases.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The actual value to be compared. Can be any comparable type  (int, float, string, etc.).</p> required <code>expect_elm</code> <p>The expected threshold value that elm should exceed.     Must be the same comparable type as elm.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if elm &gt; expect_elm, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkKeyData","title":"checkKeyData(key, col, data, show=False)","text":"<p>Checks if the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowCol","title":"checkRowCol(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowColNoExist","title":"checkRowColNoExist(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the specified row and column indices are within the range, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last query matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowsNotExited","title":"checkRowsNotExited(expectedRows)","text":"<pre><code>Check if the query rows is equal to the expected rows\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>Returns True if the actual number of rows matches the expected number, otherwise returns False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowsRange","title":"checkRowsRange(excepte_row_list)","text":"<p>Checks if the number of rows fetched by the last query is within the expected range.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>excepte_row_list</code> <code>list</code> <p>A list of expected row counts.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows is within the expected range, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows is not within the expected range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkRowsV2","title":"checkRowsV2(expectedRows, operator='==', show=True)","text":"<p>Verify if the number of rows returned by SQL query meets the expected condition.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows </code> <p>int The expected number of rows to compare against</p> required <code>operator </code> <p>str, optional Comparison operator ('&lt;', '&lt;=', '&gt;', '&gt;=', '==', '!='), defaults to '&lt;'</p> required <code>show </code> <p>bool, optional Whether to print the verification result, defaults to True</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool True if the actual row count meets the expected condition, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If invalid operator is provided</p> Usage <p>assert checker.checkRows(15, operator=\"&lt;\")  # Verify if less than 15 rows</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.checkSameColumn","title":"checkSameColumn(c1, c2)","text":"<p>Checks if the values in two specified columns are the same for all rows in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>c1</code> <code>int</code> <p>The index of the first column to be checked.</p> required <code>c2</code> <code>int</code> <p>The index of the second column to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the values in the specified columns are not the same for any row.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.close","title":"close()","text":"<p>Closes the cursor.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.connect","title":"connect(username='root', passwd='taosdata', **kwargs)","text":"<p>Reconnect</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username used to log in to the cluster.</p> <code>'root'</code> <code>passwd</code> <code>str</code> <p>The password used to log in to the cluster.</p> <code>'taosdata'</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.deleteRows","title":"deleteRows(table, where=None)","text":"<p>Deletes rows from the specified table based on the given condition.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>str</code> <p>The name of the table from which rows are to be deleted.</p> required <code>where</code> <code>str</code> <p>The condition for deleting rows. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the delete operation fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.error","title":"error(sql, expectedErrno=None, expectErrInfo=None, fullMatched=True, show=False)","text":"<p>Executes a SQL statement and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>expectedErrno</code> <code>int</code> <p>The expected error number. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>The expected error information. Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, checks for exact matches of the expected error information. Defaults to True.</p> <code>True</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The error information if an error occurs.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected error does not occur or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.errors","title":"errors(sql_list, expected_error_id_list=None, expected_error_info_list=None)","text":"<p>Executes a list of SQL queries and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expected_error_id_list</code> <code>list</code> <p>The list of expected error numbers corresponding to each SQL query. Defaults to None.</p> <code>None</code> <code>expected_error_info_list</code> <code>list</code> <p>The list of expected error information corresponding to each SQL query. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the SQL list is empty, if the execution of any SQL query fails, if the expected error does not occur, or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.execute","title":"execute(sql, queryTimes=10, show=False)","text":"<p>Executes a SQL statement.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 10.</p> <code>10</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.executeTimes","title":"executeTimes(sql, times)","text":"<p>Executes a SQL statement a specified number of times.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>times</code> <code>int</code> <p>The number of times to execute the SQL statement.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows from the last execution.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.executes","title":"executes(sqls, queryTimes=30, show=False)","text":"<p>Executes a list of SQL statements.</p> <p>Parameters:</p> Name Type Description Default <code>sqls</code> <code>list</code> <p>The list of SQL statements to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 30.</p> <code>30</code> <code>show</code> <code>bool</code> <p>If True, each SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL statement fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.expectKeyData","title":"expectKeyData(key, col, data, show=False)","text":"<p>Whether the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>Bool</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getColData","title":"getColData(col)","text":"<p>Retrieves all data from the specified column in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getColNameList","title":"getColNameList(sql, col_tag=None)","text":"<p>Executes a SQL query and retrieves the column names and optionally the column types.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>col_tag</code> <code>optional</code> <p>If provided, the method will return both column names and column types. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing the column names.</p> <code>tuple</code> <p>A tuple containing two lists - the column names and the column types, if col_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getCols","title":"getCols()","text":"<p>Retrieves the number of cols fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of cols fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getData","title":"getData(row, col)","text":"<p>Retrieves the data at the specified row and column from the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Type Description <p>The data at the specified row and column.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getDataWithOutCheck","title":"getDataWithOutCheck(row, col)","text":"<p>Retrieves the data at the specified row and column from the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Type Description <p>The data at the specified row and column.</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>If the specified row or column is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getFirstValue","title":"getFirstValue(sql)","text":"<p>Executes a SQL query and retrieves the first value in the result.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Type Description <p>The first value in the result.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getResult","title":"getResult(sql, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>The fetched results.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getRowData","title":"getRowData(row)","text":"<p>Retrieves all data from the specified row in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified row.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getTimes","title":"getTimes(time_str, precision='ms')","text":"<p>Converts a time string to a timestamp based on the specified precision.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>time_str</code> <code>str</code> <p>The time string to be converted. The string should end with a character indicating the time unit (e.g., 's' for seconds, 'm' for minutes).</p> required <code>precision</code> <code>str</code> <p>The precision of the timestamp. Can be \"ms\" (milliseconds), \"us\" (microseconds), or \"ns\" (nanoseconds). Defaults to \"ms\".</p> <code>'ms'</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The timestamp in the specified precision.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the time string does not end with a valid time unit character or if the precision is not valid.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getType","title":"getType(col)","text":"<p>Retrieves the data type of the specified column in the last query result.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index for which the data type is to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The data type of the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.getVariable","title":"getVariable(search_attr)","text":"<p>Retrieves the value of a specified variable from the database.</p> <p>Parameters:</p> Name Type Description Default <code>search_attr</code> <code>str</code> <p>The name of the variable to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the value of the specified variable and the list of all variables.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.init","title":"init(cursor, log=False)","text":"<p>Initializes the TDSql instance with a database cursor and optionally enables logging.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>The database cursor to be used for executing SQL queries.</p> required <code>log</code> <code>bool</code> <p>If True, enables logging of SQL statements to a file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.isErrorSql","title":"isErrorSql(sql)","text":"<p>Executes a SQL statement and checks if it results in an error.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the SQL statement results in an error, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.is_err_sql","title":"is_err_sql(sql)","text":"<p>Checks if a SQL statement will result in an error when executed.</p> <p>This method executes the provided SQL statement and determines whether it  causes an exception. It's useful for testing error conditions and validating that certain SQL statements should fail.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be tested for errors.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if the SQL statement executes successfully without errors, True if the SQL statement results in an error/exception.</p> <p>Raises:</p> Type Description <code>None</code> <p>This method catches all exceptions internally and returns a boolean result instead of raising exceptions.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.no_error","title":"no_error(sql)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>_type_</code> <p>description</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.pause","title":"pause()","text":"<p>Pause the execution of the program and wait for enter key. Used for debugging. Args:     None Returns:     None Raises:     None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.prepare","title":"prepare(dbname='db', drop=True, **kwargs)","text":"<p>Prepares the database by optionally dropping it if it exists, creating it, and setting it as the active database.</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>The name of the database to be prepared. Defaults to \"db\".</p> <code>'db'</code> <code>drop</code> <code>bool</code> <p>If True, drops the database if it exists before creating it. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to be included in the database creation statement. If duration is not provided, it defaults to 100.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.query","title":"query(sql, row_tag=None, queryTimes=10, count_expected_res=None, show=False, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the query in case of failure. Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute the query until the first result matches this value or the queryTimes limit is reached. Defaults to None.</p> <code>None</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched if row_tag is not provided.</p> <code>list</code> <p>The fetched results if row_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.queryAndCheckResult","title":"queryAndCheckResult(sql_list, expect_result_list)","text":"<p>Executes a list of SQL queries and checks the results against the expected results.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expect_result_list</code> <code>list</code> <p>The list of expected results corresponding to each SQL query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL query fails or if the results do not match the expected results.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.query_success_failed","title":"query_success_failed(sql, row_tag=None, queryTimes=10, count_expected_res=None, expectErrInfo=None, fullMatched=True)","text":"<p>Executes a SQL query with retry mechanism and handles both successful and failed scenarios.</p> <p>This method attempts to execute a SQL query multiple times, handling both successful executions and expected error conditions. It's particularly useful for testing scenarios where queries might initially fail but eventually succeed, or for validating specific error conditions.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query statement to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results              instead of just the row count. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>Maximum number of retry attempts if the query fails.                     Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute                          the query until the first result matches this value                          or retry limit is reached. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>Expected error message to validate against when                          query fails. If None, any error is acceptable.                          Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, performs exact string matching for error                          messages. If False, performs partial string matching                          (contains). Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <p>Error information string if an expected error occurs and query fails within retry attempts.</p> <code>None</code> <p>If query succeeds or if unexpected error occurs and reaches retry limit.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If query fails after all retry attempts and the error is not expected     or doesn't match the expected error pattern.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.setConnMode","title":"setConnMode(mode=0, value=1)","text":"<p>Set Conn Mode</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>int</code> <p>connect mode options.</p> <code>0</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TDSql.waitedQuery","title":"waitedQuery(sql, expectedRows, timeout)","text":"<p>Executes a SQL query and waits until the expected number of rows is retrieved or the timeout is reached.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expectedRows</code> <code>int</code> <p>The expected number of rows to be retrieved.</p> required <code>timeout</code> <code>int</code> <p>The maximum time to wait (in seconds) for the expected number of rows to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the number of rows retrieved and the time taken (in seconds).</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper","title":"<code>TaosKeeper</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.cfg","title":"cfg(option, value)","text":"<p>add param option and value to cfg file</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <p>str, param name</p> required <code>value</code> <p>str, param value</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.start","title":"start()","text":"<p>start taoskeeper process.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.stop","title":"stop(force_kill=False)","text":"<p>stop taoskeeper process.</p> <p>Parameters:</p> Name Type Description Default <code>force_kill</code> <p>bool, whether to force kill the process default: False if True, use kill -9 if False, use kill -15</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.TaosKeeper.update_cfg","title":"update_cfg(update_dict)","text":"<p>update taoskeeper cfg file</p> <p>Parameters:</p> Name Type Description Default <code>update_dict</code> <code>dict</code> <p>dict, update dict example: {\"log\": {\"path\": \"/var/log/taos\"}}</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#__init__.findTaosdThread","title":"findTaosdThread(threadName)","text":"<p>Find the first process named 'taosd' and count the number of threads  that contain the specified thread name.</p> <p>Parameters:</p> Name Type Description Default <code>threadName</code> <code>str</code> <p>Thread name to search for (supports partial matching)</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Number of matching threads in the first taosd process found,   returns 0 if no taosd process is found or no threads match.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#before_test","title":"<code>before_test</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#before_test.BeforeTest","title":"<code>BeforeTest</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#before_test.BeforeTest.create_database","title":"create_database(request, db_name, host, port)","text":"<p>\u521b\u5efamodule\u7ea7\u522b\u7684\u6570\u636e\u5e93</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#before_test.BeforeTest.deploy_taos","title":"deploy_taos(yaml_file, mnodes_num=1, clean=False)","text":"<p>get env directory from request; use yaml file for taostest run;</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#boundary","title":"<code>boundary</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck","title":"<code>clusterCommonCheck</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck.ClusterComCheck","title":"<code>ClusterComCheck</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck.ClusterComCheck.check_vgroups_status","title":"check_vgroups_status(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>check vgroups status in 10s after db vgroups status is changed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#clusterCommonCheck.ClusterComCheck.check_vgroups_status_with_offline","title":"check_vgroups_status_with_offline(vgroup_numbers=2, db_replica=3, count_number=10, db_name='db')","text":"<p>n nodes cluster, 3 replica database return 1, n leaders, stable status return 2, 0 &lt; num of leader &lt; n, stable status return 0, no leader, stable status return -1, Elections not yet completed, unstable status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common","title":"<code>common</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom","title":"<code>TDCom</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cal_watermark_window_close_interval_endts","title":"cal_watermark_window_close_interval_endts(start_ts, interval, watermark=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>interval</code> <code>int</code> <p>[s]</p> required <code>watermark</code> <code>int</code> <p>[s]. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cal_watermark_window_close_session_endts","title":"cal_watermark_window_close_session_endts(start_ts, watermark=None, session=None)","text":"<p>cal endts for close window</p> <p>Parameters:</p> Name Type Description Default <code>start_ts</code> <code>epoch time</code> <p>self.date_time</p> required <code>watermark</code> <code>int</code> <p>session. Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <p>as followed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cast_query_data","title":"cast_query_data(query_data)","text":"<p>cast query-result for existed-stb</p> <p>Parameters:</p> Name Type Description Default <code>query_data</code> <code>list</code> <p>query data list</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>new list after cast</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_query_data","title":"check_query_data(sql1, sql2, sorted=False, fill_value=None, tag_value_list=None, defined_tag_count=None, partition=True, use_exist_stb=False, subtable=None, reverse_check=False)","text":"<p>confirm query result</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ....</p> required <code>sql2</code> <code>str</code> <p>select ....</p> required <code>sorted</code> <code>bool</code> <p>if sort result list. Defaults to False.</p> <code>False</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>tag_value_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>defined_tag_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>partition</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>use_exist_stb</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>subtable</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>reverse_check</code> <code>bool</code> <p>not equal. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream","title":"check_stream(sql1, sql2, expected_count, max_delay=None)","text":"<p>confirm stream</p> <p>Parameters:</p> Name Type Description Default <code>sql1</code> <code>str</code> <p>select ...</p> required <code>sql2</code> <code>str</code> <p>select ...</p> required <code>expected_count</code> <code>int</code> <p>expected_count</p> required <code>max_delay</code> <code>int</code> <p>max_delay value. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream_field_type","title":"check_stream_field_type(sql, input_function)","text":"<p>confirm stream field</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>input sql</p> required <code>input_function</code> <code>str</code> <p>scalar</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream_res","title":"check_stream_res(sql, expected_res, max_delay)","text":"<p>confirm stream result</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>select ...</p> required <code>expected_res</code> <code>str</code> <p>expected result</p> required <code>max_delay</code> <code>int</code> <p>max_delay value</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.check_stream_task_status","title":"check_stream_task_status(stream_name, vgroups, stream_timeout=0, check_wal_info=True)","text":"<p>check stream status</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>vgroups</code> <code>int</code> <p>vgroups</p> required <p>Returns:     str: status</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.cleanTb","title":"cleanTb(type='taosc', dbname='db')","text":"<p>type is taosc or restful</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.clean_env","title":"clean_env()","text":"<p>drop all streams and databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.create_old_stream","title":"create_old_stream(stream_name, des_table, source_sql, trigger_mode=None, watermark=None, max_delay=None, ignore_expired=None, ignore_update=None, subtable_value=None, fill_value=None, fill_history_value=None, stb_field_name_value=None, tag_value=None, use_exist_stb=False, use_except=False)","text":"<p>create_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target stable</p> required <code>source_sql</code> <code>str</code> <p>stream sql</p> required <code>trigger_mode</code> <code>str</code> <p>at_once/window_close/max_delay. Defaults to None.</p> <code>None</code> <code>watermark</code> <code>str</code> <p>watermark time. Defaults to None.</p> <code>None</code> <code>max_delay</code> <code>str</code> <p>max_delay time. Defaults to None.</p> <code>None</code> <code>ignore_expired</code> <code>int</code> <p>ignore expired data. Defaults to None.</p> <code>None</code> <code>ignore_update</code> <code>int</code> <p>ignore update data. Defaults to None.</p> <code>None</code> <code>subtable_value</code> <code>str</code> <p>subtable. Defaults to None.</p> <code>None</code> <code>fill_value</code> <code>str</code> <p>fill. Defaults to None.</p> <code>None</code> <code>fill_history_value</code> <code>int</code> <p>0/1. Defaults to None.</p> <code>None</code> <code>stb_field_name_value</code> <code>str</code> <p>existed stb. Defaults to None.</p> <code>None</code> <code>tag_value</code> <code>str</code> <p>custom tag. Defaults to None.</p> <code>None</code> <code>use_exist_stb</code> <code>bool</code> <p>use existed stb tag. Defaults to False.</p> <code>False</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.create_snode_if_not_exists","title":"create_snode_if_not_exists(dnode_id=1)","text":"<p>Create snode if not exists</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode exists or created successfully, False if creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.create_stream","title":"create_stream(stream_name, des_table=None, source_sql=None, trigger_table=None, trigger_type=None, from_table=None, partition_by=None, stream_options=None, notification_definition=None, output_subtable=None, columns=None, tags=None, if_not_exists=True, db_name=None, use_except=False)","text":"<p>create_stream with new syntax</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>des_table</code> <code>str</code> <p>target table. Defaults to None.</p> <code>None</code> <code>source_sql</code> <code>str</code> <p>subquery. Defaults to None.</p> <code>None</code> <code>trigger_table</code> <code>str</code> <p>trigger table name. Defaults to None.</p> <code>None</code> <code>trigger_type</code> <code>str</code> <p>SESSION/STATE_WINDOW/INTERVAL/EVENT_WINDOW/COUNT_WINDOW/PERIOD. Defaults to None.</p> <code>None</code> <code>from_table</code> <code>str</code> <p>source table name. Defaults to None.</p> <code>None</code> <code>partition_by</code> <code>str</code> <p>partition columns. Defaults to None.</p> <code>None</code> <code>stream_options</code> <code>str</code> <p>stream options. Defaults to None.</p> <code>None</code> <code>notification_definition</code> <code>str</code> <p>notification settings. Defaults to None.</p> <code>None</code> <code>output_subtable</code> <code>str</code> <p>subtable expression. Defaults to None.</p> <code>None</code> <code>columns</code> <code>str</code> <p>column definitions. Defaults to None.</p> <code>None</code> <code>tags</code> <code>str</code> <p>tag definitions. Defaults to None.</p> <code>None</code> <code>if_not_exists</code> <code>bool</code> <p>if not exists flag. Defaults to True.</p> <code>True</code> <code>db_name</code> <code>str</code> <p>database name. Defaults to None.</p> <code>None</code> <code>use_except</code> <code>bool</code> <p>Exception tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>stream SQL if use_except=True, None otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_all_db","title":"drop_all_db()","text":"<p>drop all databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_all_streams","title":"drop_all_streams()","text":"<p>drop all streams from all user databases</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_db","title":"drop_db(dbname='test')","text":"<p>drop a db</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.drop_snode","title":"drop_snode(snode_id=None)","text":"<p>Drop snode</p> <p>Parameters:</p> Name Type Description Default <code>snode_id</code> <code>int</code> <p>Specific snode ID to drop. If None, drops all snodes.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if successful, False otherwise</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.ensure_snode_ready","title":"ensure_snode_ready(dnode_id=1, timeout=30)","text":"<p>Ensure snode is created and ready</p> <p>Parameters:</p> Name Type Description Default <code>dnode_id</code> <code>int</code> <p>The dnode ID to create snode on. Defaults to 1.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>Maximum wait time in seconds. Defaults to 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if snode is ready, False if timeout or creation failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.float_handle","title":"float_handle(input_list)","text":"<p>float list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>float list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.genTs","title":"genTs(precision='ms', ts='', protype='taosc', ns_tag=None)","text":"<p>generate ts</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>str</code> <p>db precision. Defaults to \"ms\".</p> <code>'ms'</code> <code>ts</code> <code>str</code> <p>input ts. Defaults to \"\".</p> <code>''</code> <code>protype</code> <code>str</code> <p>\"taosc\" or \"restful\". Defaults to \"taosc\".</p> <code>'taosc'</code> <code>ns_tag</code> <code>_type_</code> <p>use ns. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>timestamp, datetime: timestamp and datetime</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.gen_tag_col_str","title":"gen_tag_col_str(gen_type, data_type, count)","text":"<p>gen multi tags or cols by gen_type</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.getLongName","title":"getLongName(len, mode='mixed')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.get_long_name","title":"get_long_name(length=10, mode='letters')","text":"<p>generate long name mode could be numbers/letters/letters_mixed/mixed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.get_timestamp_n_days_later","title":"get_timestamp_n_days_later(n=30)","text":"<p>Get the timestamp of a date n days later from the current date.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of days to add to the current date. Default is 30.</p> <code>30</code> <p>Returns:</p> Name Type Description <code>int</code> <p>Timestamp of the date n days later, in milliseconds.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.pause_stream","title":"pause_stream(stream_name, if_exist=True, if_not_exist=False)","text":"<p>pause_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.prepare_data","title":"prepare_data(interval=None, watermark=None, session=None, state_window=None, state_window_max=127, interation=3, range_count=None, precision='ms', fill_history_value=0, ext_stb=None, custom_col_index=None, col_value_type='random')","text":"<p>prepare stream data</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>watermark</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>session</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>state_window</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>state_window_max</code> <code>int</code> <p>Defaults to 127.</p> <code>127</code> <code>interation</code> <code>int</code> <p>Defaults to 3.</p> <code>3</code> <code>range_count</code> <code>int</code> <p>Defaults to None.</p> <code>None</code> <code>precision</code> <code>str</code> <p>Defaults to \"ms\".</p> <code>'ms'</code> <code>fill_history_value</code> <code>int</code> <p>Defaults to 0.</p> <code>0</code> <code>ext_stb</code> <code>bool</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.resume_stream","title":"resume_stream(stream_name, if_exist=True, if_not_exist=False, ignore_untreated=False)","text":"<p>resume_stream</p> <p>Parameters:</p> Name Type Description Default <code>stream_name</code> <code>str</code> <p>stream_name</p> required <code>if_exist</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code> <code>if_not_exist</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>ignore_untreated</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.round_handle","title":"round_handle(input_list)","text":"<p>round list elem</p> <p>Parameters:</p> Name Type Description Default <code>input_list</code> <code>list</code> <p>input value list</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>round list</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screateDb","title":"screateDb(dbname='test', drop_db=True, **kwargs)","text":"<p>create database</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to \"test\".</p> <code>'test'</code> <code>drop_db</code> <code>bool</code> <p>Defaults to True.</p> <code>True</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screate_ctable","title":"screate_ctable(dbname=None, stbname=None, ctbname='ctb', use_name='table', tag_elm_list=None, ts_value=None, count=1, default_varchar_datatype='letters', default_nchar_datatype='letters', default_ctbname_prefix='ctb', default_ctbname_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>ctbname</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>ctb count, Defaults to 1.</p> <code>1</code> <code>default_varchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_nchar_datatype</code> <code>str</code> <p>Defaults to \"letters\".</p> <code>'letters'</code> <code>default_ctbname_prefix</code> <code>str</code> <p>Defaults to \"ctb\".</p> <code>'ctb'</code> <code>default_ctbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screate_stable","title":"screate_stable(dbname=None, stbname='stb', use_name='table', column_elm_list=None, tag_elm_list=None, need_tagts=False, count=1, default_stbname_prefix='stb', default_stbname_index_start_num=1, default_column_index_start_num=1, default_tag_index_start_num=1, **kwargs)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>stbname</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>use_name</code> <code>str</code> <p>stable/table, Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>use for sgen_column_type_str(), Defaults to None.</p> <code>None</code> <code>tag_elm_list</code> <code>list</code> <p>use for sgen_tag_type_str(), Defaults to None.</p> <code>None</code> <code>need_tagts</code> <code>bool</code> <p>tag use timestamp, Defaults to False.</p> <code>False</code> <code>count</code> <code>int</code> <p>stable count, Defaults to 1.</p> <code>1</code> <code>default_stbname_prefix</code> <code>str</code> <p>Defaults to \"stb\".</p> <code>'stb'</code> <code>default_stbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tag_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.screate_table","title":"screate_table(dbname=None, tbname='tb', use_name='table', column_elm_list=None, count=1, default_tbname_prefix='tb', default_tbname_index_start_num=1, default_column_index_start_num=1, **kwargs)","text":"<p>create ctable</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>use_name</code> <code>str</code> <p>Defaults to \"table\".</p> <code>'table'</code> <code>column_elm_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_tbname_prefix</code> <code>str</code> <p>Defaults to \"tb\".</p> <code>'tb'</code> <code>default_tbname_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>default_column_index_start_num</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sdelete_rows","title":"sdelete_rows(dbname=None, tbname=None, start_ts=None, end_ts=None, ts_key=None)","text":"<p>delete rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>start_ts</code> <code>timestamp</code> <p>range start. Defaults to None.</p> <code>None</code> <code>end_ts</code> <code>timestamp</code> <p>range end. Defaults to None.</p> <code>None</code> <code>ts_key</code> <code>str</code> <p>timestamp column name. Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_column_type_str","title":"sgen_column_type_str(column_elm_list)","text":"<p>generage column type str</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>column_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_column_value_list","title":"sgen_column_value_list(column_elm_list, need_null, ts_value=None, additional_ts=None, custom_col_index=None, col_value_type=None, force_pk_val=None)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>column_elm_list</code> <code>list</code> <p>gen_random_type_value()</p> required <code>need_null</code> <code>bool</code> <p>if insert null</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_tag_type_str","title":"sgen_tag_type_str(tag_elm_list)","text":"<p>generage tag type str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>tag_elm_list</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sgen_tag_value_list","title":"sgen_tag_value_list(tag_elm_list, ts_value=None)","text":"<p>generage tag value str</p> <p>Parameters:</p> Name Type Description Default <code>tag_elm_list</code> <code>list</code> <p>description</p> required <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.sinsert_rows","title":"sinsert_rows(dbname=None, tbname=None, column_ele_list=None, ts_value=None, count=1, need_null=False, custom_col_index=None, col_value_type='random')","text":"<p>insert rows</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>tbname</code> <code>str</code> <p>Defaults to None.</p> <code>None</code> <code>column_ele_list</code> <code>list</code> <p>Defaults to None.</p> <code>None</code> <code>ts_value</code> <code>timestamp</code> <p>Defaults to None.</p> <code>None</code> <code>count</code> <code>int</code> <p>Defaults to 1.</p> <code>1</code> <code>need_null</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.str_ts_trans_bigint","title":"str_ts_trans_bigint(str_ts)","text":"<p>trans str ts to bigint</p> <p>Parameters:</p> Name Type Description Default <code>str_ts</code> <code>str</code> <p>human-date</p> required <p>Returns:</p> Name Type Description <code>bigint</code> <p>bigint-ts</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.time_cast","title":"time_cast(time_value, split_symbol='+')","text":"<p>cast bigint to timestamp</p> <p>Parameters:</p> Name Type Description Default <code>time_value</code> <code>bigint</code> <p>ts</p> required <code>split_symbol</code> <code>str</code> <p>split sympol. Defaults to \"+\".</p> <code>'+'</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>timestamp</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.trans_time_to_s","title":"trans_time_to_s(runtime)","text":"<p>trans time to s</p> <p>Parameters:</p> Name Type Description Default <code>runtime</code> <code>str</code> <p>1d/1h/1m...</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>second</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.update_delete_history_data","title":"update_delete_history_data(delete)","text":"<p>update and delete history data</p> <p>Parameters:</p> Name Type Description Default <code>delete</code> <code>bool</code> <p>True/False</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#common.TDCom.update_json_file_replica","title":"update_json_file_replica(json_file_path, new_replica_value, output_file_path=None)","text":"<p>Read a JSON file, update the 'replica' value, and write the result back to a file.</p> <p>Parameters: json_file_path (str): The path to the original JSON file. new_replica_value (int): The new 'replica' value to be set. output_file_path (str, optional): The path to the output file where the updated JSON will be saved. If not provided, the original file will be overwritten.</p> <p>Returns: None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#constant","title":"<code>constant</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#eos","title":"<code>eos</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#epath","title":"<code>epath</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#etime","title":"<code>etime</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#etool","title":"<code>etool</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#etool.benchMark","title":"benchMark(command='', json='')","text":"<p>Run the <code>taosBenchmark</code> binary with a command or JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command to execute. Defaults to an empty string.</p> <code>''</code> <code>json</code> <code>str</code> <p>The path to a JSON file for execution. Defaults to an empty string.</p> <code>''</code> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the execution of the JSON file fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.benchMarkFile","title":"benchMarkFile()","text":"<p>Get the path to the <code>taosBenchmark</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosBenchmark</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.curFile","title":"curFile(fullPath, filename)","text":"<p>Get the full path to a file in the current directory.</p> <p>Parameters:</p> Name Type Description Default <code>fullPath</code> <code>str</code> <p>The full path to the current directory.</p> required <code>filename</code> <code>str</code> <p>The name of the file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the file in the current directory.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.exeBinFile","title":"exeBinFile(fname, command, wait=True, show=True)","text":"<p>Execute a binary file with the specified command.</p> <p>This method uses <code>utils.army.frame.eos.exe</code> or <code>utils.army.frame.eos.exeNoWait</code>  to execute the binary file. The <code>exe</code> function waits for the command to finish,  while <code>exeNoWait</code> runs the command in the background and returns immediately.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>The name of the binary file.</p> required <code>command</code> <code>str</code> <p>The command to execute.</p> required <code>wait</code> <code>bool</code> <p>Whether to wait for the command to finish. Defaults to True. - If True, uses <code>utils.army.frame.eos.exe</code>. - If False, uses <code>utils.army.frame.eos.exeNoWait</code>.</p> <code>True</code> <code>show</code> <code>bool</code> <p>Whether to log the command. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The exit status of the command execution. A return value of <code>0</code> indicates success,   while a non-zero value indicates failure.  - If <code>wait</code> is False, the return value is the exit status of the <code>nohup</code> or <code>mintty</code> command.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.getFilePath","title":"getFilePath(base_dir, *parts)","text":"<p>Get the full path to a file, ensuring compatibility with Windows paths.</p> <p>Parameters:</p> Name Type Description Default <code>*parts</code> <code>str</code> <p>The parts of the file path.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.runBinFile","title":"runBinFile(fname, command, show=True, checkRun=False, retFail=False)","text":"<p>Run a binary file with the specified command.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>The name of the binary file.</p> required <code>command</code> <code>str</code> <p>The command to execute.</p> required <code>show</code> <code>bool</code> <p>Whether to log the command. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>list</code> <p>The output of the command as a list of strings.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosAdapterFile","title":"taosAdapterFile()","text":"<p>Get the path to the <code>taosAdapter</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosAdapter</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosDumpFile","title":"taosDumpFile()","text":"<p>Get the path to the <code>taosdump</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taosdump</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#etool.taosFile","title":"taosFile()","text":"<p>Get the path to the <code>taos</code> binary file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full path to the <code>taos</code> binary file, with <code>.exe</code> appended if on Windows.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#eutil","title":"<code>eutil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#eutil.findTaosdThread","title":"findTaosdThread(threadName)","text":"<p>Find the first process named 'taosd' and count the number of threads  that contain the specified thread name.</p> <p>Parameters:</p> Name Type Description Default <code>threadName</code> <code>str</code> <p>Thread name to search for (supports partial matching)</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>Number of matching threads in the first taosd process found,   returns 0 if no taosd process is found or no threads match.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#gettime","title":"<code>gettime</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#log","title":"<code>log</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#log.ColorFormatter","title":"<code>ColorFormatter</code>","text":"<p>\u81ea\u5b9a\u4e49\u5e26\u989c\u8272\u7684\u65e5\u5fd7\u683c\u5f0f\u5316\u5668</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding","title":"<code>pathFinding</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath","title":"<code>TDFindPath</code>","text":"<p>This class is for finding path within TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath.getTDenginePath","title":"getTDenginePath()","text":"<p>for finding the root path of TDengine</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the root path of TDengine</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath.getTaosdemoPath","title":"getTaosdemoPath()","text":"<p>for finding the path of directory containing taosdemo</p> <p>Returns:</p> Name Type Description <code>str</code> <p>the path to directory containing taosdemo</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#pathFinding.TDFindPath.init","title":"init(file)","text":"<p>[summary]</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>the file location you want to start the query. Generally using file</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#sql","title":"<code>sql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql","title":"<code>TDSql</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAffectedRows","title":"checkAffectedRows(expectAffectedRows)","text":"<p>Checks if the number of affected rows from the last executed SQL statement matches the expected number of affected rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectAffectedRows</code> <code>int</code> <p>The expected number of affected rows.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of affected rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAgg","title":"checkAgg(sql, expectCnt)","text":"<p>Executes an aggregate SQL query and checks if the result matches the expected count.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The aggregate SQL query to be executed.</p> required <code>expectCnt</code> <code>int</code> <p>The expected count from the aggregate query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the result of the aggregate query does not match the expected count.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkAssert","title":"checkAssert(assertVal, show=False)","text":"<p>Checks if the assertVal is true.</p> <p>Parameters:</p> Name Type Description Default <code>assertVal</code> <p>The value to be assert</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkColNameList","title":"checkColNameList(col_name_list, expect_col_name_list)","text":"<p>Checks if the column names from the last query match the expected column names.</p> <p>Parameters:</p> Name Type Description Default <code>col_name_list</code> <code>list</code> <p>The list of column names from the last query.</p> required <code>expect_col_name_list</code> <code>list</code> <p>The list of expected column names.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the column names do not match the expected column names.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkCols","title":"checkCols(expectCols)","text":"<p>Checks if the number of columns fetched by the last query matches the expected number of columns.</p> <p>Parameters:</p> Name Type Description Default <code>expectCols</code> <code>int</code> <p>The expected number of columns.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of columns does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkData","title":"checkData(row, col, data, show=False, exit=True)","text":"<p>Checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataCsv","title":"checkDataCsv(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file, or if the sql result does not match the expected data from CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataCsvByLine","title":"checkDataCsvByLine(sql, csvfilePath)","text":"<p>Executes a SQL query and checks if the result matches the expected data from a CSV file line by line.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>csvfilePath</code> <code>str</code> <p>The path to the CSV file containing the expected data.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the CSV file path is invalid, the file is not found, there is an error reading the file,         or if the SQL result does not match the expected data from the CSV file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataLoop","title":"checkDataLoop(row, col, data, sql, loopCount=10, waitTime=1)","text":"<p>Executes a SQL query in a loop and checks if the data at the specified row and column matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>loopCount</code> <code>int</code> <p>The number of times to execute the SQL query.</p> <code>10</code> <code>waitTime</code> <code>int</code> <p>The time to wait (in seconds) between each execution.</p> <code>1</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the data at the specified row and column does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataMem","title":"checkDataMem(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataMemByLine","title":"checkDataMemByLine(sql, mem)","text":"<p>Executes a SQL query and checks if the result matches the expected data (Same as checkDataMem).</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>mem</code> <code>list</code> <p>The expected data, represented as a list of lists.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected data is not a list of lists, or if the SQL result does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataNoExist","title":"checkDataNoExist(row, col, data)","text":"<p>Checks if the data at the specified row and column matches the expected data without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data matches the expected data, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataType","title":"checkDataType(row, col, dataType)","text":"<p>Checks if the data type at the specified row and column matches the expected data type.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>dataType</code> <code>str</code> <p>The expected data type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the data type matches the expected data type, otherwise False.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkDataV2","title":"checkDataV2(row, col, data, show=False, operator='==')","text":"<p>Compare the data at the specified row and column with the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be checked.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to compare against.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <code>operator</code> <code>str</code> <p>The operator to use for comparison. Defaults to \"==\".</p> <code>'=='</code> <p>Returns:     bool: True if the comparison is successful, False otherwise. Usage:     assert self.checkDataV2(row, col, data, show=True, operator=\"==\")     assert self.checkDataV2(row, col, data, show=True, operator=\"&lt;\") # means actual value is less than data</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkFirstValue","title":"checkFirstValue(sql, expect)","text":"<p>Executes a SQL query and checks if the first value in the result matches the expected value.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expect</code> <p>The expected value of the first result.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p> <code>SystemExit</code> <p>If the first value in the result does not match the expected value.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkGreater","title":"checkGreater(elm, expect_elm)","text":"<p>Verifies that the first element is greater than the second element.</p> <p>This method compares two values and ensures that the first value (elm) is  strictly greater than the second value (expect_elm). It's commonly used for validating query results, performance metrics, or any numeric comparisons in test cases.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The actual value to be compared. Can be any comparable type  (int, float, string, etc.).</p> required <code>expect_elm</code> <p>The expected threshold value that elm should exceed.     Must be the same comparable type as elm.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if elm &gt; expect_elm, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkKeyData","title":"checkKeyData(key, col, data, show=False)","text":"<p>Checks if the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the data of the specified key does not match the expected data.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowCol","title":"checkRowCol(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column index is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowColNoExist","title":"checkRowColNoExist(row, col)","text":"<p>Checks if the specified row and column indices are within the range of the last query result without exiting the program.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index to be checked.</p> required <code>col</code> <code>int</code> <p>The column index to be checked.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the specified row and column indices are within the range, otherwise False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last query matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowsNotExited","title":"checkRowsNotExited(expectedRows)","text":"<pre><code>Check if the query rows is equal to the expected rows\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>Returns True if the actual number of rows matches the expected number, otherwise returns False.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowsRange","title":"checkRowsRange(excepte_row_list)","text":"<p>Checks if the number of rows fetched by the last query is within the expected range.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>excepte_row_list</code> <code>list</code> <p>A list of expected row counts.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows is within the expected range, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows is not within the expected range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkRowsV2","title":"checkRowsV2(expectedRows, operator='==', show=True)","text":"<p>Verify if the number of rows returned by SQL query meets the expected condition.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows </code> <p>int The expected number of rows to compare against</p> required <code>operator </code> <p>str, optional Comparison operator ('&lt;', '&lt;=', '&gt;', '&gt;=', '==', '!='), defaults to '&lt;'</p> required <code>show </code> <p>bool, optional Whether to print the verification result, defaults to True</p> required <p>Returns:</p> Type Description <code>bool</code> <p>bool True if the actual row count meets the expected condition, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If invalid operator is provided</p> Usage <p>assert checker.checkRows(15, operator=\"&lt;\")  # Verify if less than 15 rows</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.checkSameColumn","title":"checkSameColumn(c1, c2)","text":"<p>Checks if the values in two specified columns are the same for all rows in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>c1</code> <code>int</code> <p>The index of the first column to be checked.</p> required <code>c2</code> <code>int</code> <p>The index of the second column to be checked.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the values in the specified columns are not the same for any row.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.close","title":"close()","text":"<p>Closes the cursor.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.connect","title":"connect(username='root', passwd='taosdata', **kwargs)","text":"<p>Reconnect</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username used to log in to the cluster.</p> <code>'root'</code> <code>passwd</code> <code>str</code> <p>The password used to log in to the cluster.</p> <code>'taosdata'</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.deleteRows","title":"deleteRows(table, where=None)","text":"<p>Deletes rows from the specified table based on the given condition.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>str</code> <p>The name of the table from which rows are to be deleted.</p> required <code>where</code> <code>str</code> <p>The condition for deleting rows. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the delete operation fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.error","title":"error(sql, expectedErrno=None, expectErrInfo=None, fullMatched=True, show=False)","text":"<p>Executes a SQL statement and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>expectedErrno</code> <code>int</code> <p>The expected error number. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>The expected error information. Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, checks for exact matches of the expected error information. Defaults to True.</p> <code>True</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The error information if an error occurs.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the expected error does not occur or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.errors","title":"errors(sql_list, expected_error_id_list=None, expected_error_info_list=None)","text":"<p>Executes a list of SQL queries and checks for expected errors.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expected_error_id_list</code> <code>list</code> <p>The list of expected error numbers corresponding to each SQL query. Defaults to None.</p> <code>None</code> <code>expected_error_info_list</code> <code>list</code> <p>The list of expected error information corresponding to each SQL query. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the SQL list is empty, if the execution of any SQL query fails, if the expected error does not occur, or if the error information does not match the expected information.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.execute","title":"execute(sql, queryTimes=10, show=False)","text":"<p>Executes a SQL statement.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 10.</p> <code>10</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.executeTimes","title":"executeTimes(sql, times)","text":"<p>Executes a SQL statement a specified number of times.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <code>times</code> <code>int</code> <p>The number of times to execute the SQL statement.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The number of affected rows from the last execution.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.executes","title":"executes(sqls, queryTimes=30, show=False)","text":"<p>Executes a list of SQL statements.</p> <p>Parameters:</p> Name Type Description Default <code>sqls</code> <code>list</code> <p>The list of SQL statements to be executed.</p> required <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the execution in case of failure. Defaults to 30.</p> <code>30</code> <code>show</code> <code>bool</code> <p>If True, each SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL statement fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.expectKeyData","title":"expectKeyData(key, col, data, show=False)","text":"<p>Whether the data at the specified key matches the expected data.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The first column to be compared with.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be checked.</p> required <code>data</code> <p>The expected data to be compared with.</p> required <code>show</code> <code>bool</code> <p>If True, logs a message when the check is successful. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>Bool</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getColData","title":"getColData(col)","text":"<p>Retrieves all data from the specified column in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getColNameList","title":"getColNameList(sql, col_tag=None)","text":"<p>Executes a SQL query and retrieves the column names and optionally the column types.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>col_tag</code> <code>optional</code> <p>If provided, the method will return both column names and column types. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing the column names.</p> <code>tuple</code> <p>A tuple containing two lists - the column names and the column types, if col_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getCols","title":"getCols()","text":"<p>Retrieves the number of cols fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of cols fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getData","title":"getData(row, col)","text":"<p>Retrieves the data at the specified row and column from the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Type Description <p>The data at the specified row and column.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row or column is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getDataWithOutCheck","title":"getDataWithOutCheck(row, col)","text":"<p>Retrieves the data at the specified row and column from the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <code>col</code> <code>int</code> <p>The column index of the data to be retrieved.</p> required <p>Returns:</p> Type Description <p>The data at the specified row and column.</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>If the specified row or column is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getFirstValue","title":"getFirstValue(sql)","text":"<p>Executes a SQL query and retrieves the first value in the result.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Type Description <p>The first value in the result.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getResult","title":"getResult(sql, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>The fetched results.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getRowData","title":"getRowData(row)","text":"<p>Retrieves all data from the specified row in the last query result.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>The row index of the data to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list containing all data from the specified row.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the specified row is out of range.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last query.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last query.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getTimes","title":"getTimes(time_str, precision='ms')","text":"<p>Converts a time string to a timestamp based on the specified precision.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>time_str</code> <code>str</code> <p>The time string to be converted. The string should end with a character indicating the time unit (e.g., 's' for seconds, 'm' for minutes).</p> required <code>precision</code> <code>str</code> <p>The precision of the timestamp. Can be \"ms\" (milliseconds), \"us\" (microseconds), or \"ns\" (nanoseconds). Defaults to \"ms\".</p> <code>'ms'</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The timestamp in the specified precision.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the time string does not end with a valid time unit character or if the precision is not valid.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getType","title":"getType(col)","text":"<p>Retrieves the data type of the specified column in the last query result.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>int</code> <p>The column index for which the data type is to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The data type of the specified column.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.getVariable","title":"getVariable(search_attr)","text":"<p>Retrieves the value of a specified variable from the database.</p> <p>Parameters:</p> Name Type Description Default <code>search_attr</code> <code>str</code> <p>The name of the variable to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the value of the specified variable and the list of all variables.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.init","title":"init(cursor, log=False)","text":"<p>Initializes the TDSql instance with a database cursor and optionally enables logging.</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <p>The database cursor to be used for executing SQL queries.</p> required <code>log</code> <code>bool</code> <p>If True, enables logging of SQL statements to a file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.isErrorSql","title":"isErrorSql(sql)","text":"<p>Executes a SQL statement and checks if it results in an error.(Not used)</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be executed.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the SQL statement results in an error, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.is_err_sql","title":"is_err_sql(sql)","text":"<p>Checks if a SQL statement will result in an error when executed.</p> <p>This method executes the provided SQL statement and determines whether it  causes an exception. It's useful for testing error conditions and validating that certain SQL statements should fail.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL statement to be tested for errors.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>False if the SQL statement executes successfully without errors, True if the SQL statement results in an error/exception.</p> <p>Raises:</p> Type Description <code>None</code> <p>This method catches all exceptions internally and returns a boolean result instead of raising exceptions.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.no_error","title":"no_error(sql)","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>_type_</code> <p>description</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.pause","title":"pause()","text":"<p>Pause the execution of the program and wait for enter key. Used for debugging. Args:     None Returns:     None Raises:     None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.prepare","title":"prepare(dbname='db', drop=True, **kwargs)","text":"<p>Prepares the database by optionally dropping it if it exists, creating it, and setting it as the active database.</p> <p>Parameters:</p> Name Type Description Default <code>dbname</code> <code>str</code> <p>The name of the database to be prepared. Defaults to \"db\".</p> <code>'db'</code> <code>drop</code> <code>bool</code> <p>If True, drops the database if it exists before creating it. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments to be included in the database creation statement. If duration is not provided, it defaults to 100.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.query","title":"query(sql, row_tag=None, queryTimes=10, count_expected_res=None, show=False, exit=True)","text":"<p>Executes a SQL query and fetches the results.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>The number of times to attempt the query in case of failure. Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute the query until the first result matches this value or the queryTimes limit is reached. Defaults to None.</p> <code>None</code> <code>show</code> <code>bool</code> <p>If True, the SQL statement will be logged before execution. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched if row_tag is not provided.</p> <code>list</code> <p>The fetched results if row_tag is provided.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query fails after the specified number of attempts.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.queryAndCheckResult","title":"queryAndCheckResult(sql_list, expect_result_list)","text":"<p>Executes a list of SQL queries and checks the results against the expected results.</p> <p>Parameters:</p> Name Type Description Default <code>sql_list</code> <code>list</code> <p>The list of SQL queries to be executed.</p> required <code>expect_result_list</code> <code>list</code> <p>The list of expected results corresponding to each SQL query.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the execution of any SQL query fails or if the results do not match the expected results.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.query_success_failed","title":"query_success_failed(sql, row_tag=None, queryTimes=10, count_expected_res=None, expectErrInfo=None, fullMatched=True)","text":"<p>Executes a SQL query with retry mechanism and handles both successful and failed scenarios.</p> <p>This method attempts to execute a SQL query multiple times, handling both successful executions and expected error conditions. It's particularly useful for testing scenarios where queries might initially fail but eventually succeed, or for validating specific error conditions.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query statement to be executed.</p> required <code>row_tag</code> <code>optional</code> <p>If provided, the method will return the fetched results              instead of just the row count. Defaults to None.</p> <code>None</code> <code>queryTimes</code> <code>int</code> <p>Maximum number of retry attempts if the query fails.                     Defaults to 10.</p> <code>10</code> <code>count_expected_res</code> <code>optional</code> <p>If provided, the method will repeatedly execute                          the query until the first result matches this value                          or retry limit is reached. Defaults to None.</p> <code>None</code> <code>expectErrInfo</code> <code>str</code> <p>Expected error message to validate against when                          query fails. If None, any error is acceptable.                          Defaults to None.</p> <code>None</code> <code>fullMatched</code> <code>bool</code> <p>If True, performs exact string matching for error                          messages. If False, performs partial string matching                          (contains). Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <p>Error information string if an expected error occurs and query fails within retry attempts.</p> <code>None</code> <p>If query succeeds or if unexpected error occurs and reaches retry limit.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If query fails after all retry attempts and the error is not expected     or doesn't match the expected error pattern.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.setConnMode","title":"setConnMode(mode=0, value=1)","text":"<p>Set Conn Mode</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>int</code> <p>connect mode options.</p> <code>0</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sql.TDSql.waitedQuery","title":"waitedQuery(sql, expectedRows, timeout)","text":"<p>Executes a SQL query and waits until the expected number of rows is retrieved or the timeout is reached.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>expectedRows</code> <code>int</code> <p>The expected number of rows to be retrieved.</p> required <code>timeout</code> <code>int</code> <p>The maximum time to wait (in seconds) for the expected number of rows to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the number of rows retrieved and the time taken (in seconds).</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the query execution fails.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sqlset","title":"<code>sqlset</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl","title":"<code>srvCtl</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl","title":"<code>srvCtl</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.addSimExtraCfg","title":"addSimExtraCfg(option, value)","text":"<p>add new option to taos.cfg Args:     option (string): option key     value  (string): option value Returns:     bool: True if add ok, False if failed</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.clusterRootPath","title":"clusterRootPath()","text":"<p>Gets the root path of the cluster.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The root path of the cluster.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeCfgPath","title":"dnodeCfgPath(idx)","text":"<p>Gets the configuration path for a specific dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The configuration path for the dnode.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeClearData","title":"dnodeClearData(idx)","text":"<p>Clear dnode's data (Remove all data files).</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to clear.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was cleared successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeDataFiles","title":"dnodeDataFiles(idx)","text":"<p>Gets the data files for a specific dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of data files for the dnode.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeForceStop","title":"dnodeForceStop(idx)","text":"<p>Force Stops a dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to stop.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was stopped successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeLogPath","title":"dnodeLogPath(idx)","text":"<p>Gets the log path for a specific dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The log path for the dnode.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeRestartAll","title":"dnodeRestartAll()","text":"<p>Restarts all dnodes.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all dnodes were restarted successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStart","title":"dnodeStart(idx)","text":"<p>Starts a dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to start.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was started successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStartAll","title":"dnodeStartAll()","text":"<p>Starts all dnodes.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all dnodes were started successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStop","title":"dnodeStop(idx)","text":"<p>Stops a dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode to stop.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the dnode was stopped successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.dnodeStopAll","title":"dnodeStopAll()","text":"<p>Stops all dnodes.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if all dnodes were stopped successfully, False otherwise.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#srvCtl.srvCtl.taosdFile","title":"taosdFile(idx)","text":"<p>Gets the path to the taosd file for a specific dnode.</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the dnode.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The path to the taosd file.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#sub","title":"<code>sub</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosadapter","title":"<code>taosadapter</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosadapter.TAdapter","title":"<code>TAdapter</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosadapter.TAdapter.start_taosadapter","title":"start_taosadapter()","text":"<p>use this method, must deploy taosadapter</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg","title":"<code>taosdemoCfg</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg","title":"<code>TDTaosdemoCfg</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.append_sql_stb","title":"append_sql_stb(target, value)","text":"<p>for appending sql dict into specific sql list</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the target append list format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required <code>value</code> <code>dict</code> <p>the sql dict going to be appended</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.get_sql","title":"get_sql(target)","text":"<p>general get function for all sql lists</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the sql list want to get format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.get_template","title":"get_template(target)","text":"<p>general get function for the default sql template</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the sql list want to get format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.import_sql","title":"import_sql(Sql_in, mode)","text":"<p>used for importing the sql later used</p> <p>Parameters:</p> Name Type Description Default <code>Sql_in</code> <code>dict</code> <p>the imported sql dict</p> required <code>mode</code> <code>str</code> <p>the sql storing location within TDTaosdemoCfg format: 'fileType_tableType' fileType: query, sub tableType: table, stable</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taosdemoCfg.TDTaosdemoCfg.pop_sql_stb","title":"pop_sql_stb(target, index)","text":"<p>for poping a sql dict from specific sql list</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>str</code> <p>the target append list format: 'fileType_tableType' fileType: query, sub tableType: table, stable unique: 'insert_stbs'</p> required <code>index</code> <code>int</code> <p>the sql dict that is going to be popped</p> required"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper","title":"<code>taoskeeper</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper","title":"<code>TaosKeeper</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.cfg","title":"cfg(option, value)","text":"<p>add param option and value to cfg file</p> <p>Parameters:</p> Name Type Description Default <code>option</code> <p>str, param name</p> required <code>value</code> <p>str, param value</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.start","title":"start()","text":"<p>start taoskeeper process.</p> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.stop","title":"stop(force_kill=False)","text":"<p>stop taoskeeper process.</p> <p>Parameters:</p> Name Type Description Default <code>force_kill</code> <p>bool, whether to force kill the process default: False if True, use kill -9 if False, use kill -15</p> <code>False</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#taoskeeper.TaosKeeper.update_cfg","title":"update_cfg(update_dict)","text":"<p>update taoskeeper cfg file</p> <p>Parameters:</p> Name Type Description Default <code>update_dict</code> <code>dict</code> <p>dict, update dict example: {\"log\": {\"path\": \"/var/log/taos\"}}</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#tserror","title":"<code>tserror</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#types","title":"<code>types</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#types.TDSmlProtocolType","title":"<code>TDSmlProtocolType</code>","text":"<p>Schemaless Protocol types 0 - unknown 1 - InfluxDB Line Protocol 2 - OpenTSDB Telnet Protocl 3 - OpenTSDB JSON Protocol</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil","title":"<code>streamUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem","title":"<code>StreamItem</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.addQuerySqlCase","title":"addQuerySqlCase(query_sql_case)","text":"<p>\u6dfb\u52a0\u67e5\u8be2SQL\u7528\u4f8b</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.awaitResultHasRows","title":"awaitResultHasRows(waitSeconds=60)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u5df2\u6709\u7ed3\u679c\uff0c\u4e0d\u786e\u8ba4\u6700\u7ec8\u7ed3\u679c\u884c\u6570\u65f6\u4f7f\u7528</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.awaitRowStability","title":"awaitRowStability(stable_rows, waitSeconds=300)","text":"<p>\u786e\u4fdd\u6d41\u5904\u7406\u7ed3\u679c\u7684\u884c\u6570\u4e0e\u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570\u4e00\u81f4 :param stable_rows: int, \u9884\u671f\u7684\u7a33\u5b9a\u884c\u6570</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.setResultFile","title":"setResultFile(file)","text":"<p>\u8bbe\u7f6e\u7ed3\u679c\u6587\u4ef6\u8def\u5f84</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamItem.set_exp_query_param_mapping","title":"set_exp_query_param_mapping(mapping)","text":"<p>\u8bbe\u7f6e\u53c2\u6570\u540d\u4e0e\u5217\u7d22\u5f15\u7684\u6620\u5c04\uff0c\u4f8b\u5982 {\"_wstart\": 0, \"_wend\": 1}</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable","title":"<code>StreamTable</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.__delete_data","title":"__delete_data(full_table_name, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u8303\u56f4\u5185\u7684\u6570\u636e</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.appendSubTables","title":"appendSubTables(startTbIndex, endTbIndex)","text":"<p>\u5411\u8d85\u7ea7\u8868\u4e2d\u8ffd\u52a0\u5b50\u8868 :param startTbIndex: int, \u8d77\u59cb\u5b50\u8868\u7d22\u5f15 :param endTbIndex: int, \u7ed3\u675f\u5b50\u8868\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.append_data","title":"append_data(start_row, end_row)","text":"<p>\u5411\u8868\u4e2d\u8ffd\u52a0\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.append_subtable_data","title":"append_subtable_data(tbName, start_row, end_row)","text":"<p>\u5411\u6307\u5b9a\u5b50\u8868\u8ffd\u52a0\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.delete_data","title":"delete_data(start_row, end_row)","text":"<p>\u5220\u9664\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.delete_subtable_data","title":"delete_subtable_data(tbName, start_row, end_row)","text":"<p>\u5220\u9664\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.register_column_generator","title":"register_column_generator(column_name, generator_func)","text":"<p>\u6ce8\u518c\u67d0\u4e2a\u5217\u540d\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u751f\u6210\u51fd\u6570 :param column_name: str, \u5217\u540d :param generator_func: function(row_index: int, timestamp: int) -&gt; str</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.reset_columns","title":"reset_columns()","text":"<p>\u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u5217\u5b9a\u4e49</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setInterval","title":"setInterval(interval)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u95f4\u9694 :param interval: int, \u65f6\u95f4\u95f4\u9694\uff0c\u5355\u4f4d\u4e3a\u79d2</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setLogOpen","title":"setLogOpen(logOpen)","text":"<p>\u8bbe\u7f6e\u65e5\u5fd7\u5f00\u5173 :param logOpen: bool, \u662f\u5426\u5f00\u542f\u65e5\u5fd7</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setPrecision","title":"setPrecision(precision)","text":"<p>\u8bbe\u7f6e\u65f6\u95f4\u7cbe\u5ea6 :param precision: str, \u65f6\u95f4\u7cbe\u5ea6\uff0c\u652f\u6301 \"ms\", \"us\", \"ns\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.setStart","title":"setStart(start)","text":"<p>\u8bbe\u7f6e\u8d77\u59cb\u65f6\u95f4 :param start: str, \u8d77\u59cb\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3a \"YYYY-MM-DD HH.MM.SS\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.set_columns","title":"set_columns(column_def)","text":"<p>\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u5217\u5b9a\u4e49 :param column_def: str\uff0c\u4f8b\u5982 \"ts timestamp, val int\"</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.update_data","title":"update_data(start_row, end_row)","text":"<p>\u66f4\u65b0\u8868\u4e2d\u7684\u6570\u636e :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#streamUtil.StreamTable.update_subtable_data","title":"update_subtable_data(tbName, start_row, end_row)","text":"<p>\u66f4\u65b0\u6307\u5b9a\u5b50\u8868\u4e2d\u7684\u6570\u636e :param tbName: str, \u5b50\u8868\u540d\u79f0 :param start_row: int, \u8d77\u59cb\u884c\u7d22\u5f15 :param end_row: int, \u7ed3\u675f\u884c\u7d22\u5f15</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#autogen","title":"<code>autogen</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#rawblock","title":"<code>rawblock</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil","title":"<code>mqttUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil","title":"<code>MqttUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkEqual","title":"checkEqual(elm, expect_elm, show=False)","text":"<p>Checks if the given element is equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element does not match the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkNotEqual","title":"checkNotEqual(elm, expect_elm)","text":"<p>Checks if the given element is not equal to the expected element.</p> <p>Parameters:</p> Name Type Description Default <code>elm</code> <p>The element to be checked.</p> required <code>expect_elm</code> <p>The expected element to be compared with.</p> required <p>Returns:</p> Type Description <p>None</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the element matches the expected element.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkQos","title":"checkQos(expectedQos, show=False)","text":"<p>Checks if the qos fetched by the last subscription matches the expected qos.</p> <p>Parameters:</p> Name Type Description Default <code>expectedQos</code> <code>int</code> <p>The expected qos.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the qos matches the expected qos, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of qos does not match the expected qos.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.checkRows","title":"checkRows(expectedRows, show=False)","text":"<p>Checks if the number of rows fetched by the last subscription matches the expected number of rows.</p> <p>Parameters:</p> Name Type Description Default <code>expectedRows</code> <code>int</code> <p>The expected number of rows.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the number of rows matches the expected number, otherwise it exits the program.</p> <p>Raises:</p> Type Description <code>SystemExit</code> <p>If the number of rows does not match the expected number.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#mqttUtil.MqttUtil.getRows","title":"getRows()","text":"<p>Retrieves the number of rows fetched by the last sub.</p> <p>Returns:</p> Name Type Description <code>int</code> <p>The number of rows fetched by the last sub.</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#compatibilityUtil","title":"<code>compatibilityUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#compatibilityUtil.CompatibilityBase","title":"<code>CompatibilityBase</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#compatibilityUtil.CompatibilityBase.alter_string_in_file","title":"alter_string_in_file(file, old_str, new_str)","text":"<p>replace str in file :param file :param old_str :param new_str :return:</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#compatibilityUtil.CompatibilityBase.version_compare","title":"version_compare(version1, version2)","text":"<p>Compare two version strings. Returns 1 if version1 &gt; version2, -1 if version1 &lt; version2, 0 if equal</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#tmqUtil","title":"<code>tmqUtil</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2","title":"<code>stmt2</code>","text":""},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2","title":"<code>TDStmt2</code>","text":"<p>TDengine Stmt2 utility class</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.affect_rows","title":"affect_rows()","text":"<p>Get affected rows count</p> <p>Returns:</p> Type Description <p>Number of affected rows</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.bind_batch_params","title":"bind_batch_params(params)","text":"<p>Bind batch parameters to statement</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <p>List of parameter batches (list of lists)     Example: [[ts1, temp1, hum1, loc1], [ts2, temp2, hum2, loc2], ...]</p> required <p>Returns:</p> Type Description <p>self for method chaining</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.bind_params","title":"bind_params(params)","text":"<p>Bind parameters to statement for simple INSERT</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <p>List of parameter values for a single row</p> required <p>Returns:</p> Type Description <p>self for method chaining</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.bind_super_table_data","title":"bind_super_table_data(tbnames, tags, datas)","text":"<p>Bind data for super table operations </p> <p>Parameters:</p> Name Type Description Default <code>tbnames</code> <p>List of sub-table names</p> required <code>tags</code> <p>List of tag values for each table </p> required <code>datas</code> <p>List of row-oriented data for each table</p> required <p>Returns:</p> Type Description <p>self for method chaining</p> Example"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.bind_super_table_data--row-oriented-data-format-easier-to-use","title":"Row-oriented data format (easier to use)","text":"<p>tbnames = [\"d_bind_0\", \"d_bind_1\"] tags = [[0, \"location_0\"], [1, \"location_1\"]] datas = [     # table 0 data: 2 rows, 4 columns each     [         [ts1, curr1, volt1, phase1],  # row 1         [ts2, curr2, volt2, phase2]   # row 2     ],     # table 1 data: 2 rows, 4 columns each     [         [ts3, curr3, volt3, phase3],  # row 1         [ts4, curr4, volt4, phase4]   # row 2     ] ]</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.close","title":"close()","text":"<p>Close the statement</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute","title":"execute()","text":"<p>Execute the prepared statement</p> <p>Returns:</p> Type Description <p>Number of affected rows</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_batch","title":"execute_batch(sql, batch_params, check_affected=True, expected_rows=None)","text":"<p>Convenience method for batch insert</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>SQL statement</p> required <code>batch_params</code> <code>list</code> <p>Batch parameters (list of lists)</p> required <code>check_affected</code> <code>bool</code> <p>Whether to check affected rows</p> <code>True</code> <code>expected_rows</code> <code>int</code> <p>Expected number of affected rows</p> <code>None</code> <p>Returns:</p> Type Description <p>Number of affected rows if check_affected=True</p> <p>Examples:</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_batch--batch-insert-with-expected-rows-validation","title":"Batch insert with expected rows validation","text":"<p>batch_data = [[ts1, v1], [ts2, v2], [ts3, v3]] affected = stmt.execute_batch(     \"INSERT INTO table VALUES (?, ?)\",     batch_data,     expected_rows=3 )</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_single","title":"execute_single(sql, params, check_affected=True, expected_rows=None)","text":"<p>Convenience method for single row insert</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>SQL statement </p> required <code>params</code> <code>list</code> <p>Single row parameters</p> required <code>check_affected</code> <code>bool</code> <p>Whether to check affected rows</p> <code>True</code> <code>expected_rows</code> <code>int</code> <p>Expected number of affected rows</p> <code>None</code> <p>Returns:</p> Type Description <p>Number of affected rows if check_affected=True</p> <p>Examples:</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_single--insert-with-expected-rows-validation","title":"Insert with expected rows validation","text":"<p>affected = stmt.execute_single(     \"INSERT INTO sensor_data VALUES (?, ?, ?, ?)\",     [timestamp, temp, humidity, location],     expected_rows=1 )</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_stmt","title":"execute_stmt(sql, params=None, batch_params=None, tbnames=None, tags=None, datas=None, check_affected=True, expected_rows=None)","text":"<p>Execute a complete statement with prepare, bind, execute and affect_rows check</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>SQL statement with ? placeholders</p> required <code>params</code> <code>list</code> <p>Parameters for single row insert</p> <code>None</code> <code>batch_params</code> <code>list</code> <p>Parameters for batch insert</p> <code>None</code> <code>tbnames</code> <code>list</code> <p>Table names for super table operations</p> <code>None</code> <code>tags</code> <code>list</code> <p>Tag values for super table operations  </p> <code>None</code> <code>datas</code> <code>list</code> <p>Column data for super table operations</p> <code>None</code> <code>check_affected</code> <code>bool</code> <p>Whether to check and return affected rows</p> <code>True</code> <code>expected_rows</code> <code>int</code> <p>Expected number of affected rows for validation</p> <code>None</code> <p>Returns:</p> Type Description <p>Number of affected rows if check_affected=True, otherwise None</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>When expected_rows is provided and doesn't match actual affected rows</p> <p>Examples:</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_stmt--single-row-insert-with-expected-rows-check","title":"Single row insert with expected rows check","text":"<p>affected = stmt.execute_stmt(     \"INSERT INTO sensor_data VALUES (?, ?, ?, ?)\",     params=[timestamp, temp, humidity, location],     expected_rows=1 )</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_stmt--batch-insert-with-expected-rows-check","title":"Batch insert with expected rows check","text":"<p>affected = stmt.execute_stmt(     \"INSERT INTO sensor_data VALUES (?, ?, ?, ?)\",     batch_params=[[ts1, temp1, hum1, loc1], [ts2, temp2, hum2, loc2]],     expected_rows=2 )</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_stmt--super-table-insert-with-expected-rows-check","title":"Super table insert with expected rows check","text":"<p>affected = stmt.execute_stmt(     \"INSERT INTO ? USING device_metrics TAGS(?, ?, ?) VALUES (?, ?, ?)\",     tbnames=[\"device_001\"],      tags=[[\"device_001\", 1, \"Building_A\"],[\"device_002\", 2, \"Building_B\"]],      datas=datas = [[[ts1,100.1, 1]],[[ts2, 200.1, 2],[ts3, 200.2, 2]]],     expected_rows=3 )</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_super_table","title":"execute_super_table(sql, tbnames, tags, datas, check_affected=True, expected_rows=None)","text":"<p>Convenience method for super table operations</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>SQL statement</p> required <code>tbnames</code> <code>list</code> <p>Table names</p> required <code>tags</code> <code>list</code> <p>Tag values</p> required <code>datas</code> <code>list</code> <p>Column data</p> required <code>check_affected</code> <code>bool</code> <p>Whether to check affected rows</p> <code>True</code> <code>expected_rows</code> <code>int</code> <p>Expected number of affected rows</p> <code>None</code> <p>Returns:</p> Type Description <p>Number of affected rows if check_affected=True</p> <p>Examples:</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.execute_super_table--super-table-insert-with-expected-rows-check","title":"Super table insert with expected rows check","text":"<p>affected = stmt.execute_stmt(     \"INSERT INTO ? USING device_metrics TAGS(?, ?, ?) VALUES (?, ?, ?)\",     tbnames=[\"device_001\"],      tags=[[\"device_001\", 1, \"Building_A\"],[\"device_002\", 2, \"Building_B\"]],      datas=datas = [[[ts1,100.1, 1]],[[ts2, 200.1, 2],[ts3, 200.2, 2]]],     expected_rows=3 )</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.init","title":"init(conn)","text":"<p>Initialize stmt2 with connection</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.prepare","title":"prepare(sql)","text":"<p>Prepare a statement using stmt2 API</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <p>SQL statement with ? placeholders</p> required <p>Returns:</p> Type Description <p>self for method chaining</p>"},{"location":"util_funcs_docs/new_test_framework/utils/#stmt2.TDStmt2.reconnect","title":"reconnect(**kwargs)","text":"<p>Reconnect to the database with new parameters</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Connection parameters like host, user, password, etc.</p> <code>{}</code> <p>Returns:</p> Type Description <p>self for method chaining</p>"}]}